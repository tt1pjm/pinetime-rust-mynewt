
/Users/Luppy/PineTime/master-pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/master-pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000000d9

Program Header:
0x70000001 off    0x00015734 vaddr 0x00005734 paddr 0x00005734 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x0000574c memsz 0x0000574c flags r-x
    LOAD off    0x000200d8 vaddr 0x200000d8 paddr 0x0000574c align 2**16
         filesz 0x00000084 memsz 0x0000634c flags rw-
    LOAD off    0x00030000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .text              00005734  00000000  00000000  00010000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab         00000000  00005734  00005734  0002015c  2**0  CONTENTS
  2 .ARM.exidx         00000018  00005734  00005734  00015734  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .vector_relocation 000000d8  20000000  20000000  00030000  2**0  ALLOC
  4 .rtt               00000000  200000d8  200000d8  0002015c  2**0  CONTENTS
  5 .data              00000084  200000d8  0000574c  000200d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bssnz             00000000  2000015c  2000015c  0002015c  2**0  CONTENTS
  7 .bss               000062c8  2000015c  000057d0  0002015c  2**2  ALLOC
  8 .stack_dummy       000001b0  20006428  20006428  00020160  2**3  CONTENTS, READONLY
  9 .ARM.attributes    0000002f  00000000  00000000  00020310  2**0  CONTENTS, READONLY
 10 .comment           0000007f  00000000  00000000  0002033f  2**0  CONTENTS, READONLY
 11 .svc_table         00000004  00000000  00000000  000203be  2**0  CONTENTS, READONLY
 12 .debug_line        000117e2  00000000  00000000  000203c2  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_info        0002a18e  00000000  00000000  00031ba4  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev      000076d1  00000000  00000000  0005bd32  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges     000014f0  00000000  00000000  00063408  2**3  CONTENTS, READONLY, DEBUGGING
 16 .debug_str         0000625c  00000000  00000000  000648f8  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc         0000f680  00000000  00000000  0006ab54  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges      000012d8  00000000  00000000  0007a1d4  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_frame       000035e8  00000000  00000000  0007b4ac  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00005734 l    d  .ARM.extab	00000000 .ARM.extab
00005734 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
2000015c l    d  .bssnz	00000000 .bssnz
2000015c l    d  .bss	00000000 .bss
20006428 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
000000e0 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
000001ec l     F .text	0000003c errata_16
00000228 l     F .text	0000004c errata_31
00000274 l     F .text	0000003c errata_32
000002b0 l     F .text	0000004c errata_36
000002fc l     F .text	0000003c errata_37
00000338 l     F .text	0000003c errata_57
00000374 l     F .text	0000003c errata_66
000003b0 l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00004f74 l     O .text	00000008 flash_devs
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 spiflash.c
000006ac l     F .text	00000014 hal_spiflash_sector_info
000006c0 l     F .text	0000002e spiflash_release_power_down_generic
000006ee l     F .text	00000008 spiflash_delay_us
00000790 l     F .text	00000050 spiflash_wait_ready_till
000007f6 l     F .text	0000006a hal_spiflash_read
00000880 l     F .text	000000c8 hal_spiflash_write
00000948 l     F .text	00000078 spiflash_execute_erase
000009c0 l     F .text	0000002c spiflash_erase_cmd
000009fa l     F .text	00000008 hal_spiflash_erase_sector
00000acc l     F .text	00000008 hal_spiflash_erase
00000b38 l     F .text	0000003e hal_spiflash_init
00004fac l     O .text	0000001c spiflash_flash_funcs
20000128 l     O .data	00000010 supported_chips
00004f7c l     O .text	00000030 spiflash_characteristics
00000000 l    df *ABS*	00000000 hal_common.c
00000000 l    df *ABS*	00000000 hal_flash.c
00000b7c l     F .text	00000028 nrf52k_flash_wait_ready
00000ba4 l     F .text	00000054 nrf52k_flash_erase_sector
00000bf8 l     F .text	00000004 nrf52k_flash_init
00000bfc l     F .text	00000020 nrf52k_flash_sector_info
00000c1c l     F .text	000000d0 nrf52k_flash_write
00000cec l     F .text	0000000e nrf52k_flash_read
00004fe0 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_gpio.c
00000000 l    df *ABS*	00000000 hal_spi.c
00000db4 l     F .text	0000006e nrf52_irqm_handler
00000e3c l     F .text	00000014 hal_spi_stop_transfer
00000e50 l     F .text	0000004a hal_spi_config_slave
00000e9c l     F .text	000000b8 hal_spi_init_master
00000f54 l     F .text	000000de hal_spi_config_master
00004ffc l     O .text	0000000c nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_watchdog.c
000012a0 l     F .text	0000000e nrf52_hal_wdt_default_handler
000012b0 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 nrf52_periph.c
00001348 l     F .text	00000034 nrf52_periph_create_timers
0000137c l     F .text	00000020 nrf52_periph_create_spi
00005008 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 hal_timer.c
000013a8 l     F .text	0000000a nrf_read_timer_cntr
000013b4 l     F .text	000000b4 nrf_timer_set_ocmp
00001468 l     F .text	0000000a nrf_timer_disable_ocmp
00001472 l     F .text	0000000a nrf_rtc_disable_ocmp
0000147c l     F .text	00000054 hal_timer_read_bsptimer
000014d0 l     F .text	00000076 hal_timer_chk_queue
00001546 l     F .text	0000002c hal_timer_irq_handler
0000500c l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
00001824 l     F .text	00000026 os_dev_initialize
2000015c l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os.c
00000000 l    df *ABS*	00000000 os_eventq.c
00000000 l    df *ABS*	00000000 os_mempool.c
000018c8 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
000019f4 l     F .text	00000044 os_msys_init_once
20000168 l     O .bss	00004900 os_msys_1_data
20004a68 l     O .bss	0000000c os_msys_1_mbuf_pool
20004a74 l     O .bss	0000001c os_msys_1_mempool
20000138 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
00001ad4 l       .text	00000000 SVC_User
00001af2 l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 memcmp.c
00001bce l       .text	00000000 test1
00001bc2 l       .text	00000000 loop1
00001bd4 l       .text	00000000 res1
00001bf0 l       .text	00000000 test2
00001bf8 l       .text	00000000 done
00001be4 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
00001c04 l       .text	00000000 test1
00001c00 l       .text	00000000 loop1
00001c12 l       .text	00000000 test2
00001c0e l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 pinetime_boot.c
00001c50 l     F .text	00000050 relocate_vector_table
00000000 l    df *ABS*	00000000 display.c
00001db4 l     F .text	0000001e hard_reset
00001dd4 l     F .text	00000024 delay_ms
00001df8 l     F .text	0000003a transmit_spi
00001e32 l     F .text	0000001a write_data
00001e4c l     F .text	0000004e write_command
00001e9c l     F .text	0000014c init_display
00001fe8 l     F .text	00000028 set_orientation
00002010 l     F .text	000000d0 set_window
20004a90 l     O .bss	00000100 flash_buffer
0000521c l     O .text	00000001 COLMOD_PARA.7864
00005220 l     O .text	00000003 FRMCTR1_PARA.7852
00005224 l     O .text	00000003 FRMCTR2_PARA.7853
00005228 l     O .text	00000006 FRMCTR3_PARA.7854
00005230 l     O .text	00000001 INVCTR_PARA.7855
00005234 l     O .text	00000001 MADCTL1_PARA.7862
00005238 l     O .text	00000003 PWCTR1_PARA.7856
0000523c l     O .text	00000001 PWCTR2_PARA.7857
00005240 l     O .text	00000002 PWCTR3_PARA.7858
00005244 l     O .text	00000002 PWCTR4_PARA.7859
00005248 l     O .text	00000002 PWCTR5_PARA.7860
0000524c l     O .text	00000001 VMCTR1_PARA.7861
00000000 l    df *ABS*	00000000 console.c
20004b90 l     O .bss	00000010 avail_queue
20004ba0 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 semihosting_console.c
20004bac l     O .bss	00000004 semihost_mbuf
20000148 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 ticks.c
20004bb0 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sysinit.c
000022e8 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 nrf52_boot-sysinit-app.c
00000000 l    df *ABS*	00000000 bootutil_misc.c
00002354 l     F .text	0000000c boot_flag_decode
00002360 l     F .text	00000018 boot_magic_decode
00002378 l     F .text	00000060 boot_find_status
000023d8 l     F .text	0000006a boot_write_trailer
00002442 l     F .text	00000016 boot_write_trailer_flag
00005298 l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 loader.c
000027e8 l     F .text	00000040 boot_is_header_valid
00002828 l     F .text	0000001c boot_write_sz
00002844 l     F .text	0000009c boot_read_image_size
000028e0 l     F .text	00000054 boot_check_header_erased
00002934 l     F .text	00000048 boot_initialize_area
0000297c l     F .text	0000003a boot_read_sectors
000029b8 l     F .text	00000034 boot_image_check
000029ec l     F .text	00000098 boot_validate_slot
00002a84 l     F .text	00000038 boot_validated_swap_type
00002abc l     F .text	00000036 boot_read_image_headers
00002b28 l     F .text	0000009c boot_swap_image
00002bc4 l     F .text	00000084 boot_complete_partial_swap
00002c48 l     F .text	00000058 boot_perform_update
00002ca0 l     F .text	000000e4 boot_prepare_image_for_update
20004bb4 l     O .bss	0000006c boot_data
20004c20 l     O .bss	00000400 buf.4971
20005020 l     O .bss	00000600 primary_slot_sectors.5011
20005620 l     O .bss	00000600 scratch_sectors.5013
20005c20 l     O .bss	00000600 secondary_slot_sectors.5012
20006220 l     O .bss	00000100 tmpbuf.4904
00000000 l    df *ABS*	00000000 swap_misc.c
00000000 l    df *ABS*	00000000 swap_scratch.c
0000317e l     F .text	0000002e boot_copy_sz
000031ac l     F .text	00000332 boot_swap_sectors
000054f4 l     O .text	00000010 boot_status_tables
00000000 l    df *ABS*	00000000 image_validate.c
000038a6 l     F .text	0000007e bootutil_img_hash
00000000 l    df *ABS*	00000000 tlv.c
00000000 l    df *ABS*	00000000 flash_map_extended.c
00000000 l    df *ABS*	00000000 sha256.c
000055e8 l     O .text	00000100 K
00000000 l    df *ABS*	00000000 hal_flash.c
00003f10 l     F .text	0000001e hal_flash_check_addr
20006320 l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 hal_system_start.c
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 mynewt.c
00004200 l     F .text	00000004 stdin_read
00004204 l     F .text	00000010 stdout_write
20000150 l     O .data	00000004 _stdin
20000154 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 tinyprintf.c
00004224 l     F .text	000000c0 ui2a
000042e4 l     F .text	00000020 i2a
00004304 l     F .text	00000030 a2d
00004334 l     F .text	00000036 a2i
0000436a l     F .text	0000002a putf
00004394 l     F .text	0000011c putchw
000044b0 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 flash_map.c
000047b0 l     F .text	00000078 flash_map_read_mfg
20006324 l     O .bss	00000078 mfg_areas.7780
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
000049d8 l     F .text	00000094 mfg_seek_next_aux
00004a6c l     F .text	00000070 mfg_read_mmr
00004adc l     F .text	00000054 mfg_read_next_mmr
00004b30 l     F .text	0000003c mfg_open_flash_area
00004b6c l     F .text	00000044 mfg_read_tlv_body
00004c24 l     F .text	0000004e mfg_read_mmr_refs
2000639c l     O .bss	00000001 mfg_initialized
200063a0 l     O .bss	00000018 mfg_mmrs
200063b8 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 nrf52_boot-sysflash.c
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
20006428 g       .bss	00000000 __HeapBase
00000000 g       .svc_table	00000000 SVC_Count
00000144  w    F .text	00000002 TIMER2_IRQHandler
20006400 g     O .bss	00000008 g_os_mempool_list
00000144  w    F .text	00000002 RTC0_IRQHandler
000024d0 g     F .text	000000c0 boot_read_swap_state
00002f8c g     F .text	00000010 boot_go
200000d8 g       .data	00000000 __data_start__
00004fc8 g     O .text	00000018 nrf52k_flash_dev
00004778 g     F .text	00000024 printf
000056e8 g     O .text	00000004 stdout
00000144  w    F .text	00000002 SWI0_EGU0_IRQHandler
00000d5e g     F .text	00000022 hal_gpio_write
00003c24 g     F .text	00000128 mbedtls_internal_sha256_process
00000136  w    F .text	00000002 HardFault_Handler
00001584 g     F .text	00000060 hal_timer_init
00004bc2 g     F .text	0000001a mfg_seek_next_with_type
000041a2 g     F .text	0000000a hal_system_start
0000261c g     F .text	00000044 boot_write_swap_info
00003f56 g     F .text	00000010 hal_flash_align
00000144  w    F .text	00000002 SWI2_EGU2_IRQHandler
00002458 g     F .text	00000020 boot_magic_compatible_check
00001b22 g     F .text	0000000c SysTick_Handler
00000144  w    F .text	00000002 GPIOTE_IRQHandler
00001574 g     F .text	00000010 nrf52_timer0_irq_handler
00001972 g     F .text	00000026 os_memblock_put
00000144  w    F .text	00000002 PWM1_IRQHandler
2000641c g     O .bss	00000004 flash_map
00004110 g     F .text	00000030 hal_flash_is_erased
00001af8 g     F .text	0000002a PendSV_Handler
00000134  w    F .text	00000002 NMI_Handler
0000574c g       .ARM.exidx	00000000 __exidx_end
00003b72 g     F .text	0000000c mbedtls_sha256_init
00000000 g       .text	00000000 __isr_vector_start
00000174 g     F .text	0000002c hal_system_reset
20000148 g       .data	00000000 __aeabi_unwind_cpp_pr0
00000144  w    F .text	00000002 POWER_CLOCK_IRQHandler
0000574c g       .ARM.exidx	00000000 __etext
00000144  w    F .text	00000002 RADIO_IRQHandler
0000490a g     F .text	00000026 flash_area_write
2000015c g       .bssnz	00000000 __bssnz_start__
00000a3e g     F .text	0000008e spiflash_erase
00000144  w    F .text	00000002 PDM_IRQHandler
00002f9c g     F .text	00000084 swap_erase_trailer_sectors
00002e4c g     F .text	00000140 context_boot_go
000035ec g     F .text	00000100 boot_slots_compatible
00004bdc g     F .text	0000000a mfg_read_tlv_flash_area
000022dc g     F .text	0000000c console_get_ticks
00001998 g     F .text	00000010 os_mempool_module_init
00000144  w    F .text	00000002 TEMP_IRQHandler
00000144  w    F .text	00000002 QDEC_IRQHandler
00000144  w    F .text	00000002 TIMER3_IRQHandler
00001878 g     F .text	0000000a timer_handler
00003828 g     F .text	0000007e swap_run
000022d8 g     F .text	00000004 semihosting_console_init
00001bfe g     F .text	0000001a memcpy
000012d0 g     F .text	00000078 hal_watchdog_init
000017f0 g     F .text	0000000c os_cputime_init
00003144 g     F .text	0000003a swap_set_image_ok
00004c74 g     F .text	00000000 .hidden __aeabi_uldivmod
00004140 g     F .text	00000062 hal_flash_isempty
000041cc g     F .text	00000034 puts
00000000 g       *ABS*	00000000 _imghdr_size
20006414 g     O .bss	00000004 console_is_midline
00001b6a g     F .text	00000014 os_mbuf_free
200000e4 g     O .data	00000004 SystemCoreClock
00000158 g     F .text	0000000c hal_system_init
00000144  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
000048e4 g     F .text	00000026 flash_area_read
0000170c g     F .text	0000004c __assert_func
00000e24 g     F .text	00000018 nrf52_spi0_irq_handler
000021ec g     F .text	00000038 console_pkg_init
0000013c  w    F .text	00000002 UsageFault_Handler
00000a22 g     F .text	0000001c spiflash_chip_erase
00000144  w    F .text	00000002 UARTE0_UART0_IRQHandler
00004514 g     F .text	0000025c tfp_format
2000fe50 g       *ABS*	00000000 __HeapLimit
2000015c g       .bss	00000000 __bss_start__
00000164 g     F .text	00000010 hal_debugger_connected
00003fcc g     F .text	00000074 hal_flash_write
00000144  w    F .text	00000002 TIMER4_IRQHandler
00004ca4 g     F .text	000002cc .hidden __udivmoddi4
0000248a g     F .text	0000001e boot_status_entries
00002478 g     F .text	00000008 boot_status_sz
20006408 g     O .bss	00000004 g_current_task
00001882 g     F .text	0000000c os_arch_save_sr
000034de g     F .text	00000034 boot_read_image_header
000025e0 g     F .text	00000020 boot_write_magic
00001940 g     F .text	00000014 os_mempool_init
00000ad4 g     F .text	00000064 spiflash_identify
00001806 g     F .text	00000016 os_cputime_delay_ticks
20006418 g     O .bss	00000001 g_console_input_ignore
00005734 g       .text	00000000 __exidx_start
00002dec g     F .text	00000008 boot_erase_region
000036ec g     F .text	0000013c swap_status_source
00004be6 g     F .text	0000000a mfg_read_tlv_mmr_ref
00001a98 g     F .text	00000014 os_set_env
00000658 g     F .text	00000014 hal_bsp_flash_dev
0000139c g     F .text	0000000c nrf52_periph_create
00004956 g     F .text	0000000a flash_area_align
000022a8 g     F .text	00000008 disable_buffer
00002224 g     F .text	00000048 console_printf
000021e2 g     F .text	00000008 console_blocking_mode
00000144  w    F .text	00000002 I2S_IRQHandler
000005da g     F .text	00000002 _init
00004040 g     F .text	000000d0 hal_flash_erase
000024ca g     F .text	00000006 boot_swap_info_off
00002660 g     F .text	00000022 boot_write_swap_size
000020e0 g     F .text	000000e4 pinetime_boot_display_image
00000144  w    F .text	00000002 SWI4_EGU4_IRQHandler
00002d84 g     F .text	00000068 boot_write_status
00000144  w    F .text	00000002 TIMER0_IRQHandler
00002684 g     F .text	000000d8 boot_swap_type_multi
000000d8 g     F .text	0000005c Reset_Handler
2000641a g     O .bss	00000001 sysinit_active
000025b0 g     F .text	00000030 boot_read_swap_size
00003126 g     F .text	0000001e swap_set_copy_done
00001ca0 g     F .text	00000098 pinetime_boot_init
00001b60 g     F .text	0000000a os_mbuf_pool_init
00001b2e g     F .text	0000001e os_default_irq_asm
000030aa g     F .text	0000007c swap_read_status
00004bf0 g     F .text	00000024 mfg_init
00001ba2 g     F .text	00000014 os_mutex_init
00000148 g     F .text	00000010 _sbrkInit
2000015c g       .bssnz	00000000 __bssnz_end__
00004978 g     F .text	0000005c flash_map_init
0000479c g     F .text	00000014 vprintf
00000144  w    F .text	00000002 TIMER1_IRQHandler
20000000 g       .bss	00000000 _ram_start
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00003514 g     F .text	000000bc swap_read_status_bytes
00000cfa g     F .text	0000002c hal_gpio_init_in
00000144  w    F .text	00000002 PWM2_IRQHandler
2000015c g       .data	00000000 __data_end__
00003dd2 g     F .text	0000013e mbedtls_sha256_finish_ret
00000144  w    F .text	00000002 ECB_IRQHandler
20006410 g     O .bss	00000004 g_os_time
00001120 g     F .text	00000060 hal_spi_init
20006424 g       .bss	00000000 __bss_end__
00000144  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
0000077a g     F .text	00000016 spiflash_device_ready
00001a38 g     F .text	00000010 os_msys_reset
00000144 g     F .text	00000002 Default_Handler
000005cc g     F .text	0000000e _start
00002600 g     F .text	0000000e boot_write_copy_done
000035d0 g     F .text	0000001a boot_status_internal_off
00001aac g     F .text	00000006 os_arch_init_task_stack
00005288 g     O .text	00000010 boot_img_magic
00000d26 g     F .text	00000038 hal_gpio_init_out
00000d80 g     F .text	00000034 hal_gpio_read
2000014c g     O .data	00000004 sysinit_panic_cb
00002308 g     F .text	00000030 mem_init_mbuf_pool
00002b06 g     F .text	00000022 boot_status_is_reset
00001758 g     F .text	00000098 os_default_irq
000009ec g     F .text	0000000e spiflash_sector_erase
00004960 g     F .text	0000000a flash_area_erased_val
00003020 g     F .text	0000008a swap_status_init
2000640c g     O .bss	00000004 g_os_last_ctx_sw_time
00001bb6 g     F .text	00000048 memcmp
00004f70  w    F .text	00000002 .hidden __aeabi_ldiv0
000022f0 g     F .text	0000000c sysinit_start
000015e4 g     F .text	000000f8 hal_timer_config
00001d38 g     F .text	00000048 setup_watchdog
00003b60 g     F .text	00000012 flash_area_id_from_multi_image_slot
00002af2 g     F .text	00000014 boot_status_reset
00002df4 g     F .text	00000058 boot_copy_region
000019a8 g     F .text	0000004c os_msys_register
00004828 g     F .text	00000040 flash_area_open
200000e8 g     O .data	00000040 spiflash_dev
00000144  w    F .text	00000002 SAADC_IRQHandler
00002590 g     F .text	00000020 boot_read_swap_state_by_id
00001c18 g     F .text	00000038 memset
00000000 g       .text	000000d8 __isr_vector
000005e2 g     F .text	00000076 main
000011c8 g     F .text	0000002c hal_spi_set_txrx_cb
000022b0 g     F .text	00000028 console_out_nolock
000006f6 g     F .text	0000005a spiflash_read_jedec_id
00000144  w    F .text	00000002 CCM_AAR_IRQHandler
00000144  w    F .text	00000002 WDT_IRQHandler
000022fc g     F .text	0000000c sysinit_end
000049d4 g     F .text	00000002 modlog_init
00001ab2 g     F .text	00000046 SVC_Handler
00003f76 g     F .text	00000054 hal_flash_read
000016dc g     F .text	00000030 hal_timer_read
00004930 g     F .text	00000026 flash_area_erase
200063bc g     O .bss	00000028 nrf52_hal_spi0
20006419 g     O .bss	00000001 g_silence_console
00000144  w    F .text	00000002 SWI5_EGU5_IRQHandler
20006420 g     O .bss	00000004 flash_map_entries
00000000 g       .text	00000000 __text
00004bb0 g     F .text	00000012 mfg_seek_next
0000496a g     F .text	0000000e flash_area_read_is_empty
000021c4 g     F .text	0000001e console_write
000024a8 g     F .text	00000022 boot_status_off
0000040c g     F .text	000001c0 SystemInit
000017fc g     F .text	0000000a os_cputime_get32
00000144  w    F .text	00000002 RNG_IRQHandler
00003f66 g     F .text	00000010 hal_flash_erased_val
00003924 g     F .text	000000ba bootutil_img_validate
00000000 g       .svc_table	00000000 SVC_Table
00000144  w    F .text	00000002 RTC2_IRQHandler
00001180 g     F .text	00000048 hal_spi_tx_val
00000860 g     F .text	00000020 spiflash_write_enable
20010000 g       .bss	00000000 __StackTop
0000226c g     F .text	0000003c console_flush
00000144  w    F .text	00000002 PWM0_IRQHandler
00000144  w    F .text	00000002 SWI3_EGU3_IRQHandler
00001034 g     F .text	00000038 hal_spi_config
00004868 g     F .text	0000007c flash_area_to_sectors
000056ec g     O .text	00000048 sysflash_map_dflt
200063e4 g     O .bss	0000001c nrf52_hal_timer0
000000d8 g       .text	00000000 __isr_vector_end
00000144  w    F .text	00000002 RTC1_IRQHandler
0000275c g     F .text	0000008a boot_set_pending
0000106c g     F .text	0000004c hal_spi_enable
0000181c g     F .text	00000008 os_cputime_delay_usecs
00000144  w    F .text	00000002 SWI1_EGU1_IRQHandler
000007e0 g     F .text	00000016 spiflash_wait_ready
000041ac g     F .text	0000001e fwrite
00000a12 g     F .text	00000010 spiflash_block_64k_erase
00004c14 g     F .text	00000010 mfg_open
20000140 g     O .data	00000008 g_os_run_list
00000678 g     F .text	00000034 NVIC_Relocate
00002338 g     F .text	0000001c sysinit_app
20000164 g     O .bss	00000004 os_flags
0000188e g     F .text	00000006 os_arch_restore_sr
2000fe50 g       *ABS*	000001b0 __StackLimit
00003d4c g     F .text	00000086 mbedtls_sha256_update_ret
00000144  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00000144  w    F .text	00000002 NFCT_IRQHandler
000003fc g     F .text	00000010 SystemCoreClockUpdate
00001b7e g     F .text	00000024 os_mbuf_free_chain
00001a48 g     F .text	00000034 os_msys_init
00001a7c g     F .text	0000000c os_time_get
000011f4 g     F .text	000000ac hal_spi_txrx
00004f70  w    F .text	00000002 .hidden __aeabi_idiv0
000039de g     F .text	000000ca bootutil_tlv_iter_begin
00000b76 g     F .text	00000006 _exit
000001a0 g     F .text	0000004c hal_system_clock_start
0000013a  w    F .text	00000002 BusFault_Handler
00004214 g     F .text	00000010 strlen
00000750 g     F .text	0000002a spiflash_read_status
00001954 g     F .text	0000001e os_memblock_put_from_cb
000018b6 g     F .text	00000010 os_eventq_init
00001a88 g     F .text	00000010 os_time_advance
00003f2e g     F .text	00000028 hal_flash_init
00000144  w    F .text	00000002 MWU_IRQHandler
00000138  w    F .text	00000002 MemoryManagement_Handler
00000144  w    F .text	00000002 COMP_LPCOMP_IRQHandler
0000184c g     F .text	0000002c os_dev_initialize_all
00001d80 g     F .text	00000034 boot_custom_start
0000066c g     F .text	0000000c hal_bsp_init
00001894 g     F .text	00000022 os_pkg_init
000010b8 g     F .text	00000068 hal_spi_disable
000005dc g     F .text	00000006 flash_device_base
00000a02 g     F .text	00000010 spiflash_block_32k_erase
00004770 g     F .text	00000008 vfprintf
00002480 g     F .text	0000000a boot_trailer_sz
00003aa8 g     F .text	000000b8 bootutil_tlv_iter_next
0000260e g     F .text	0000000e boot_write_image_ok
00003b80 g     F .text	000000a4 mbedtls_sha256_starts_ret



Disassembly of section .text:

00000000 <__isr_vector>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
       0:	20010000 	.word	0x20010000
       4:	000000d9 	.word	0x000000d9
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
       8:	00000135 	.word	0x00000135
       c:	00000137 	.word	0x00000137
	...
    if (nticks == OS_TIMEOUT_NEVER) {
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
      2c:	00001ab3 	.word	0x00001ab3
	...
      38:	00001af9 	.word	0x00001af9
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
      3c:	00001b23 	.word	0x00001b23
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
      40:	00000145 	.word	0x00000145
      44:	00000145 	.word	0x00000145
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
      48:	00000145 	.word	0x00000145
      4c:	00000145 	.word	0x00000145
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
      50:	00000145 	.word	0x00000145
      54:	00000145 	.word	0x00000145
      58:	00000145 	.word	0x00000145
      5c:	00000145 	.word	0x00000145
      60:	00000145 	.word	0x00000145
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
                break;
            }
        }
        if (entry) {
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
      64:	00000145 	.word	0x00000145
      68:	00000145 	.word	0x00000145
      6c:	00000145 	.word	0x00000145
      70:	00000145 	.word	0x00000145
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
      74:	00000145 	.word	0x00000145
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
      78:	00000145 	.word	0x00000145
      7c:	00000145 	.word	0x00000145
      80:	00000145 	.word	0x00000145
      84:	00000145 	.word	0x00000145
      88:	00000145 	.word	0x00000145
      8c:	00000145 	.word	0x00000145
      90:	00000145 	.word	0x00000145
      94:	00000145 	.word	0x00000145
      98:	00000145 	.word	0x00000145
      9c:	00000145 	.word	0x00000145
      a0:	00000145 	.word	0x00000145
      a4:	00000145 	.word	0x00000145
      a8:	00000145 	.word	0x00000145
      ac:	00000145 	.word	0x00000145
      b0:	00000145 	.word	0x00000145
      b4:	00000145 	.word	0x00000145
	...
      c0:	00000145 	.word	0x00000145
      c4:	00000145 	.word	0x00000145
      c8:	00000145 	.word	0x00000145
      cc:	00000145 	.word	0x00000145
      d0:	00000145 	.word	0x00000145
      d4:	00000145 	.word	0x00000145

000000d8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
      d8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
      dc:	4a0c      	ldr	r2, [pc, #48]	; (110 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
      de:	4b0d      	ldr	r3, [pc, #52]	; (114 <.bss_zero_loop+0x34>)

000000e0 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
      e0:	429a      	cmp	r2, r3
    itt     lt
      e2:	bfbc      	itt	lt
    strlt   r0, [r2], #4
      e4:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
      e8:	e7fa      	blt.n	e0 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
      ea:	490b      	ldr	r1, [pc, #44]	; (118 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
      ec:	4a0b      	ldr	r2, [pc, #44]	; (11c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
      ee:	4b0c      	ldr	r3, [pc, #48]	; (120 <.bss_zero_loop+0x40>)

    subs    r3, r2
      f0:	1a9b      	subs	r3, r3, r2
    ble     .LC0
      f2:	dd03      	ble.n	fc <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
      f4:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
      f6:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
      f8:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
      fa:	dcfb      	bgt.n	f4 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
      fc:	4809      	ldr	r0, [pc, #36]	; (124 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
      fe:	490a      	ldr	r1, [pc, #40]	; (128 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
     100:	f000 f822 	bl	148 <_sbrkInit>

    LDR     R0, =SystemInit
     104:	4809      	ldr	r0, [pc, #36]	; (12c <.bss_zero_loop+0x4c>)
    BLX     R0
     106:	4780      	blx	r0

    BL      hal_system_init
     108:	f000 f826 	bl	158 <hal_system_init>

    LDR     R0, =_start
     10c:	4808      	ldr	r0, [pc, #32]	; (130 <.bss_zero_loop+0x50>)
    BX      R0
     10e:	4700      	bx	r0
    ldr     r2, =__bss_start__
     110:	2000015c 	.word	0x2000015c
    ldr     r3, =__bss_end__
     114:	20006424 	.word	0x20006424
    ldr    r1, =__etext
     118:	0000574c 	.word	0x0000574c
    ldr    r2, =__data_start__
     11c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
     120:	2000015c 	.word	0x2000015c
    LDR     R0, =__HeapBase
     124:	20006428 	.word	0x20006428
    LDR     R1, =__HeapLimit
     128:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
     12c:	0000040d 	.word	0x0000040d
    LDR     R0, =_start
     130:	000005cd 	.word	0x000005cd

00000134 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
     134:	e7fe      	b.n	134 <NMI_Handler>

00000136 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
     136:	e7fe      	b.n	136 <HardFault_Handler>

00000138 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
     138:	e7fe      	b.n	138 <MemoryManagement_Handler>

0000013a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
     13a:	e7fe      	b.n	13a <BusFault_Handler>

0000013c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
     13c:	e7fe      	b.n	13c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
     13e:	e7fe      	b.n	13e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
     140:	e7fe      	b.n	140 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
     142:	e7fe      	b.n	142 <UsageFault_Handler+0x6>

00000144 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
     144:	e7fe      	b.n	144 <Default_Handler>
     146:	bf00      	nop

00000148 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
     148:	4b02      	ldr	r3, [pc, #8]	; (154 <_sbrkInit+0xc>)
     14a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
     14c:	6059      	str	r1, [r3, #4]
    brk = base;
     14e:	6098      	str	r0, [r3, #8]
}
     150:	4770      	bx	lr
     152:	bf00      	nop
     154:	200000d8 	.word	0x200000d8

00000158 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
     158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     15c:	2201      	movs	r2, #1
     15e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
     162:	4770      	bx	lr

00000164 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
     164:	4b02      	ldr	r3, [pc, #8]	; (170 <hal_debugger_connected+0xc>)
     166:	6818      	ldr	r0, [r3, #0]
}
     168:	f000 0001 	and.w	r0, r0, #1
     16c:	4770      	bx	lr
     16e:	bf00      	nop
     170:	e000edf0 	.word	0xe000edf0

00000174 <hal_system_reset>:
{
     174:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
     176:	f7ff fff5 	bl	164 <hal_debugger_connected>
     17a:	b100      	cbz	r0, 17e <hal_system_reset+0xa>
            asm("bkpt");
     17c:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     17e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     182:	4905      	ldr	r1, [pc, #20]	; (198 <hal_system_reset+0x24>)
     184:	68ca      	ldr	r2, [r1, #12]
     186:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     18a:	4b04      	ldr	r3, [pc, #16]	; (19c <hal_system_reset+0x28>)
     18c:	4313      	orrs	r3, r2
     18e:	60cb      	str	r3, [r1, #12]
     190:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     194:	bf00      	nop
     196:	e7fd      	b.n	194 <hal_system_reset+0x20>
     198:	e000ed00 	.word	0xe000ed00
     19c:	05fa0004 	.word	0x05fa0004

000001a0 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
     1a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1a4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
     1a8:	4b0f      	ldr	r3, [pc, #60]	; (1e8 <Stack_Size+0x38>)
     1aa:	4013      	ands	r3, r2
     1ac:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
     1b0:	d018      	beq.n	1e4 <Stack_Size+0x34>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
     1b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1b6:	2201      	movs	r2, #1
     1b8:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     1ba:	2100      	movs	r1, #0
     1bc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
     1c0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
     1c4:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
     1c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1ca:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
     1ce:	2b00      	cmp	r3, #0
     1d0:	d0f9      	beq.n	1c6 <Stack_Size+0x16>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
     1d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1d6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
     1da:	4b03      	ldr	r3, [pc, #12]	; (1e8 <Stack_Size+0x38>)
     1dc:	4013      	ands	r3, r2
     1de:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
     1e2:	d1f0      	bne.n	1c6 <Stack_Size+0x16>
                }
            }
        }
    }
#endif
}
     1e4:	4770      	bx	lr
     1e6:	bf00      	nop
     1e8:	00010003 	.word	0x00010003

000001ec <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     1ec:	4b0b      	ldr	r3, [pc, #44]	; (21c <errata_16+0x30>)
     1ee:	781b      	ldrb	r3, [r3, #0]
     1f0:	2b06      	cmp	r3, #6
     1f2:	d001      	beq.n	1f8 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
     1f4:	2000      	movs	r0, #0
     1f6:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     1f8:	4b09      	ldr	r3, [pc, #36]	; (220 <errata_16+0x34>)
     1fa:	681b      	ldr	r3, [r3, #0]
     1fc:	f013 0f0f 	tst.w	r3, #15
     200:	d107      	bne.n	212 <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     202:	4b08      	ldr	r3, [pc, #32]	; (224 <errata_16+0x38>)
     204:	681b      	ldr	r3, [r3, #0]
     206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     20a:	2b30      	cmp	r3, #48	; 0x30
     20c:	d003      	beq.n	216 <errata_16+0x2a>
    return false;
     20e:	2000      	movs	r0, #0
     210:	4770      	bx	lr
     212:	2000      	movs	r0, #0
     214:	4770      	bx	lr
            return true;
     216:	2001      	movs	r0, #1
}
     218:	4770      	bx	lr
     21a:	bf00      	nop
     21c:	f0000fe0 	.word	0xf0000fe0
     220:	f0000fe4 	.word	0xf0000fe4
     224:	f0000fe8 	.word	0xf0000fe8

00000228 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     228:	4b0f      	ldr	r3, [pc, #60]	; (268 <errata_31+0x40>)
     22a:	781b      	ldrb	r3, [r3, #0]
     22c:	2b06      	cmp	r3, #6
     22e:	d001      	beq.n	234 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     230:	2000      	movs	r0, #0
     232:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     234:	4b0d      	ldr	r3, [pc, #52]	; (26c <errata_31+0x44>)
     236:	681b      	ldr	r3, [r3, #0]
     238:	f013 0f0f 	tst.w	r3, #15
     23c:	d10b      	bne.n	256 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     23e:	4b0c      	ldr	r3, [pc, #48]	; (270 <errata_31+0x48>)
     240:	681b      	ldr	r3, [r3, #0]
     242:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     246:	2b30      	cmp	r3, #48	; 0x30
     248:	d007      	beq.n	25a <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     24a:	2b40      	cmp	r3, #64	; 0x40
     24c:	d007      	beq.n	25e <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     24e:	2b50      	cmp	r3, #80	; 0x50
     250:	d007      	beq.n	262 <errata_31+0x3a>
    return false;
     252:	2000      	movs	r0, #0
     254:	4770      	bx	lr
     256:	2000      	movs	r0, #0
     258:	4770      	bx	lr
            return true;
     25a:	2001      	movs	r0, #1
     25c:	4770      	bx	lr
            return true;
     25e:	2001      	movs	r0, #1
     260:	4770      	bx	lr
            return true;
     262:	2001      	movs	r0, #1
}
     264:	4770      	bx	lr
     266:	bf00      	nop
     268:	f0000fe0 	.word	0xf0000fe0
     26c:	f0000fe4 	.word	0xf0000fe4
     270:	f0000fe8 	.word	0xf0000fe8

00000274 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     274:	4b0b      	ldr	r3, [pc, #44]	; (2a4 <errata_32+0x30>)
     276:	781b      	ldrb	r3, [r3, #0]
     278:	2b06      	cmp	r3, #6
     27a:	d001      	beq.n	280 <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
     27c:	2000      	movs	r0, #0
     27e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     280:	4b09      	ldr	r3, [pc, #36]	; (2a8 <errata_32+0x34>)
     282:	681b      	ldr	r3, [r3, #0]
     284:	f013 0f0f 	tst.w	r3, #15
     288:	d107      	bne.n	29a <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     28a:	4b08      	ldr	r3, [pc, #32]	; (2ac <errata_32+0x38>)
     28c:	681b      	ldr	r3, [r3, #0]
     28e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     292:	2b30      	cmp	r3, #48	; 0x30
     294:	d003      	beq.n	29e <errata_32+0x2a>
    return false;
     296:	2000      	movs	r0, #0
     298:	4770      	bx	lr
     29a:	2000      	movs	r0, #0
     29c:	4770      	bx	lr
            return true;
     29e:	2001      	movs	r0, #1
}
     2a0:	4770      	bx	lr
     2a2:	bf00      	nop
     2a4:	f0000fe0 	.word	0xf0000fe0
     2a8:	f0000fe4 	.word	0xf0000fe4
     2ac:	f0000fe8 	.word	0xf0000fe8

000002b0 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     2b0:	4b0f      	ldr	r3, [pc, #60]	; (2f0 <errata_36+0x40>)
     2b2:	781b      	ldrb	r3, [r3, #0]
     2b4:	2b06      	cmp	r3, #6
     2b6:	d001      	beq.n	2bc <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     2b8:	2000      	movs	r0, #0
     2ba:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     2bc:	4b0d      	ldr	r3, [pc, #52]	; (2f4 <errata_36+0x44>)
     2be:	681b      	ldr	r3, [r3, #0]
     2c0:	f013 0f0f 	tst.w	r3, #15
     2c4:	d10b      	bne.n	2de <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     2c6:	4b0c      	ldr	r3, [pc, #48]	; (2f8 <errata_36+0x48>)
     2c8:	681b      	ldr	r3, [r3, #0]
     2ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     2ce:	2b30      	cmp	r3, #48	; 0x30
     2d0:	d007      	beq.n	2e2 <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     2d2:	2b40      	cmp	r3, #64	; 0x40
     2d4:	d007      	beq.n	2e6 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     2d6:	2b50      	cmp	r3, #80	; 0x50
     2d8:	d007      	beq.n	2ea <errata_36+0x3a>
    return false;
     2da:	2000      	movs	r0, #0
     2dc:	4770      	bx	lr
     2de:	2000      	movs	r0, #0
     2e0:	4770      	bx	lr
            return true;
     2e2:	2001      	movs	r0, #1
     2e4:	4770      	bx	lr
            return true;
     2e6:	2001      	movs	r0, #1
     2e8:	4770      	bx	lr
            return true;
     2ea:	2001      	movs	r0, #1
}
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop
     2f0:	f0000fe0 	.word	0xf0000fe0
     2f4:	f0000fe4 	.word	0xf0000fe4
     2f8:	f0000fe8 	.word	0xf0000fe8

000002fc <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     2fc:	4b0b      	ldr	r3, [pc, #44]	; (32c <errata_37+0x30>)
     2fe:	781b      	ldrb	r3, [r3, #0]
     300:	2b06      	cmp	r3, #6
     302:	d001      	beq.n	308 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
     304:	2000      	movs	r0, #0
     306:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     308:	4b09      	ldr	r3, [pc, #36]	; (330 <errata_37+0x34>)
     30a:	681b      	ldr	r3, [r3, #0]
     30c:	f013 0f0f 	tst.w	r3, #15
     310:	d107      	bne.n	322 <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     312:	4b08      	ldr	r3, [pc, #32]	; (334 <errata_37+0x38>)
     314:	681b      	ldr	r3, [r3, #0]
     316:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     31a:	2b30      	cmp	r3, #48	; 0x30
     31c:	d003      	beq.n	326 <errata_37+0x2a>
    return false;
     31e:	2000      	movs	r0, #0
     320:	4770      	bx	lr
     322:	2000      	movs	r0, #0
     324:	4770      	bx	lr
            return true;
     326:	2001      	movs	r0, #1
}
     328:	4770      	bx	lr
     32a:	bf00      	nop
     32c:	f0000fe0 	.word	0xf0000fe0
     330:	f0000fe4 	.word	0xf0000fe4
     334:	f0000fe8 	.word	0xf0000fe8

00000338 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     338:	4b0b      	ldr	r3, [pc, #44]	; (368 <errata_57+0x30>)
     33a:	781b      	ldrb	r3, [r3, #0]
     33c:	2b06      	cmp	r3, #6
     33e:	d001      	beq.n	344 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
     340:	2000      	movs	r0, #0
     342:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     344:	4b09      	ldr	r3, [pc, #36]	; (36c <errata_57+0x34>)
     346:	681b      	ldr	r3, [r3, #0]
     348:	f013 0f0f 	tst.w	r3, #15
     34c:	d107      	bne.n	35e <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     34e:	4b08      	ldr	r3, [pc, #32]	; (370 <errata_57+0x38>)
     350:	681b      	ldr	r3, [r3, #0]
     352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     356:	2b30      	cmp	r3, #48	; 0x30
     358:	d003      	beq.n	362 <errata_57+0x2a>
    return false;
     35a:	2000      	movs	r0, #0
     35c:	4770      	bx	lr
     35e:	2000      	movs	r0, #0
     360:	4770      	bx	lr
            return true;
     362:	2001      	movs	r0, #1
}
     364:	4770      	bx	lr
     366:	bf00      	nop
     368:	f0000fe0 	.word	0xf0000fe0
     36c:	f0000fe4 	.word	0xf0000fe4
     370:	f0000fe8 	.word	0xf0000fe8

00000374 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     374:	4b0b      	ldr	r3, [pc, #44]	; (3a4 <errata_66+0x30>)
     376:	781b      	ldrb	r3, [r3, #0]
     378:	2b06      	cmp	r3, #6
     37a:	d001      	beq.n	380 <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     37c:	2000      	movs	r0, #0
     37e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     380:	4b09      	ldr	r3, [pc, #36]	; (3a8 <errata_66+0x34>)
     382:	681b      	ldr	r3, [r3, #0]
     384:	f013 0f0f 	tst.w	r3, #15
     388:	d107      	bne.n	39a <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     38a:	4b08      	ldr	r3, [pc, #32]	; (3ac <errata_66+0x38>)
     38c:	681b      	ldr	r3, [r3, #0]
     38e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     392:	2b50      	cmp	r3, #80	; 0x50
     394:	d003      	beq.n	39e <errata_66+0x2a>
    return false;
     396:	2000      	movs	r0, #0
     398:	4770      	bx	lr
     39a:	2000      	movs	r0, #0
     39c:	4770      	bx	lr
            return true;
     39e:	2001      	movs	r0, #1
}
     3a0:	4770      	bx	lr
     3a2:	bf00      	nop
     3a4:	f0000fe0 	.word	0xf0000fe0
     3a8:	f0000fe4 	.word	0xf0000fe4
     3ac:	f0000fe8 	.word	0xf0000fe8

000003b0 <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     3b0:	4b0f      	ldr	r3, [pc, #60]	; (3f0 <errata_108+0x40>)
     3b2:	781b      	ldrb	r3, [r3, #0]
     3b4:	2b06      	cmp	r3, #6
     3b6:	d001      	beq.n	3bc <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     3b8:	2000      	movs	r0, #0
     3ba:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     3bc:	4b0d      	ldr	r3, [pc, #52]	; (3f4 <errata_108+0x44>)
     3be:	681b      	ldr	r3, [r3, #0]
     3c0:	f013 0f0f 	tst.w	r3, #15
     3c4:	d10b      	bne.n	3de <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     3c6:	4b0c      	ldr	r3, [pc, #48]	; (3f8 <errata_108+0x48>)
     3c8:	681b      	ldr	r3, [r3, #0]
     3ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     3ce:	2b30      	cmp	r3, #48	; 0x30
     3d0:	d007      	beq.n	3e2 <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     3d2:	2b40      	cmp	r3, #64	; 0x40
     3d4:	d007      	beq.n	3e6 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     3d6:	2b50      	cmp	r3, #80	; 0x50
     3d8:	d007      	beq.n	3ea <errata_108+0x3a>
    return false;
     3da:	2000      	movs	r0, #0
     3dc:	4770      	bx	lr
     3de:	2000      	movs	r0, #0
     3e0:	4770      	bx	lr
            return true;
     3e2:	2001      	movs	r0, #1
     3e4:	4770      	bx	lr
            return true;
     3e6:	2001      	movs	r0, #1
     3e8:	4770      	bx	lr
            return true;
     3ea:	2001      	movs	r0, #1
}
     3ec:	4770      	bx	lr
     3ee:	bf00      	nop
     3f0:	f0000fe0 	.word	0xf0000fe0
     3f4:	f0000fe4 	.word	0xf0000fe4
     3f8:	f0000fe8 	.word	0xf0000fe8

000003fc <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
     3fc:	4b01      	ldr	r3, [pc, #4]	; (404 <SystemCoreClockUpdate+0x8>)
     3fe:	4a02      	ldr	r2, [pc, #8]	; (408 <SystemCoreClockUpdate+0xc>)
     400:	601a      	str	r2, [r3, #0]
}
     402:	4770      	bx	lr
     404:	200000e4 	.word	0x200000e4
     408:	03d09000 	.word	0x03d09000

0000040c <SystemInit>:
{
     40c:	b508      	push	{r3, lr}
    if (errata_16()){
     40e:	f7ff feed 	bl	1ec <errata_16>
     412:	b110      	cbz	r0, 41a <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
     414:	4b60      	ldr	r3, [pc, #384]	; (598 <SystemInit+0x18c>)
     416:	4a61      	ldr	r2, [pc, #388]	; (59c <SystemInit+0x190>)
     418:	601a      	str	r2, [r3, #0]
    if (errata_31()){
     41a:	f7ff ff05 	bl	228 <errata_31>
     41e:	b128      	cbz	r0, 42c <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
     420:	4b5f      	ldr	r3, [pc, #380]	; (5a0 <SystemInit+0x194>)
     422:	681b      	ldr	r3, [r3, #0]
     424:	f3c3 3342 	ubfx	r3, r3, #13, #3
     428:	4a5e      	ldr	r2, [pc, #376]	; (5a4 <SystemInit+0x198>)
     42a:	6013      	str	r3, [r2, #0]
    if (errata_32()){
     42c:	f7ff ff22 	bl	274 <errata_32>
     430:	b120      	cbz	r0, 43c <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     432:	4a5d      	ldr	r2, [pc, #372]	; (5a8 <SystemInit+0x19c>)
     434:	68d3      	ldr	r3, [r2, #12]
     436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     43a:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
     43c:	f7ff ff38 	bl	2b0 <errata_36>
     440:	b140      	cbz	r0, 454 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
     442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     446:	2200      	movs	r2, #0
     448:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
     44c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
     450:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
     454:	f7ff ff52 	bl	2fc <errata_37>
     458:	b110      	cbz	r0, 460 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
     45a:	4b54      	ldr	r3, [pc, #336]	; (5ac <SystemInit+0x1a0>)
     45c:	2203      	movs	r2, #3
     45e:	601a      	str	r2, [r3, #0]
    if (errata_57()){
     460:	f7ff ff6a 	bl	338 <errata_57>
     464:	b158      	cbz	r0, 47e <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
     466:	4b52      	ldr	r3, [pc, #328]	; (5b0 <SystemInit+0x1a4>)
     468:	2205      	movs	r2, #5
     46a:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
     46c:	3378      	adds	r3, #120	; 0x78
     46e:	2201      	movs	r2, #1
     470:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
     472:	3b70      	subs	r3, #112	; 0x70
     474:	2200      	movs	r2, #0
     476:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
     478:	3b04      	subs	r3, #4
     47a:	223f      	movs	r2, #63	; 0x3f
     47c:	601a      	str	r2, [r3, #0]
    if (errata_66()){
     47e:	f7ff ff79 	bl	374 <errata_66>
     482:	2800      	cmp	r0, #0
     484:	d046      	beq.n	514 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
     486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     48a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
     48e:	4b49      	ldr	r3, [pc, #292]	; (5b4 <SystemInit+0x1a8>)
     490:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
     494:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
     498:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
     49c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
     4a0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
     4a4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
     4a8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
     4ac:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
     4b0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
     4b4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
     4b8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
     4bc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
     4c0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
     4c4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
     4c8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
     4cc:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
     4d0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
     4d4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
     4d8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
     4dc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
     4e0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
     4e4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
     4e8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
     4ec:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
     4f0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
     4f4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
     4f8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
     4fc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
     500:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
     504:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
     508:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
     50c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
     510:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
     514:	f7ff ff4c 	bl	3b0 <errata_108>
     518:	b128      	cbz	r0, 526 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
     51a:	4b27      	ldr	r3, [pc, #156]	; (5b8 <SystemInit+0x1ac>)
     51c:	681b      	ldr	r3, [r3, #0]
     51e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
     522:	4a26      	ldr	r2, [pc, #152]	; (5bc <SystemInit+0x1b0>)
     524:	6013      	str	r3, [r2, #0]
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
     526:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     52a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
     52e:	f013 0f01 	tst.w	r3, #1
     532:	d104      	bne.n	53e <SystemInit+0x132>
    SystemCoreClockUpdate();
     534:	f7ff ff62 	bl	3fc <SystemCoreClockUpdate>
    NVIC_Relocate();
     538:	f000 f89e 	bl	678 <NVIC_Relocate>
}
     53c:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     53e:	4b20      	ldr	r3, [pc, #128]	; (5c0 <SystemInit+0x1b4>)
     540:	2201      	movs	r2, #1
     542:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     546:	4b1e      	ldr	r3, [pc, #120]	; (5c0 <SystemInit+0x1b4>)
     548:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
     54c:	2b00      	cmp	r3, #0
     54e:	d0fa      	beq.n	546 <SystemInit+0x13a>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
     550:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     554:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
     558:	f023 0301 	bic.w	r3, r3, #1
     55c:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     560:	4b17      	ldr	r3, [pc, #92]	; (5c0 <SystemInit+0x1b4>)
     562:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
     566:	2b00      	cmp	r3, #0
     568:	d0fa      	beq.n	560 <SystemInit+0x154>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     56a:	4b15      	ldr	r3, [pc, #84]	; (5c0 <SystemInit+0x1b4>)
     56c:	2200      	movs	r2, #0
     56e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     572:	4b13      	ldr	r3, [pc, #76]	; (5c0 <SystemInit+0x1b4>)
     574:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
     578:	2b00      	cmp	r3, #0
     57a:	d0fa      	beq.n	572 <SystemInit+0x166>
     57c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     580:	4910      	ldr	r1, [pc, #64]	; (5c4 <SystemInit+0x1b8>)
     582:	68ca      	ldr	r2, [r1, #12]
     584:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     588:	4b0f      	ldr	r3, [pc, #60]	; (5c8 <SystemInit+0x1bc>)
     58a:	4313      	orrs	r3, r2
     58c:	60cb      	str	r3, [r1, #12]
     58e:	f3bf 8f4f 	dsb	sy
    __NOP();
     592:	bf00      	nop
     594:	e7fd      	b.n	592 <SystemInit+0x186>
     596:	bf00      	nop
     598:	4007c074 	.word	0x4007c074
     59c:	baadf00d 	.word	0xbaadf00d
     5a0:	10000244 	.word	0x10000244
     5a4:	4000053c 	.word	0x4000053c
     5a8:	e000edf0 	.word	0xe000edf0
     5ac:	400005a0 	.word	0x400005a0
     5b0:	40005610 	.word	0x40005610
     5b4:	4000c000 	.word	0x4000c000
     5b8:	10000258 	.word	0x10000258
     5bc:	40000ee4 	.word	0x40000ee4
     5c0:	4001e000 	.word	0x4001e000
     5c4:	e000ed00 	.word	0xe000ed00
     5c8:	05fa0004 	.word	0x05fa0004

000005cc <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
     5cc:	b508      	push	{r3, lr}
#if !MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    rc = main(0, NULL);
     5ce:	2100      	movs	r1, #0
     5d0:	4608      	mov	r0, r1
     5d2:	f000 f806 	bl	5e2 <main>
#define EXIT_SUCCESS	0
#define EXIT_FAILURE	1
__extern void _exit(int s);
__extern_inline void exit(int err)
{
	_exit(err);
     5d6:	f000 face 	bl	b76 <_exit>

000005da <_init>:
}

void
_init(void)
{
}
     5da:	4770      	bx	lr

000005dc <flash_device_base>:
 * TODO: remove this when mynewt needs to support flash_device_base()
 * for devices with nonzero base addresses.
 */
int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    *ret = 0;
     5dc:	2000      	movs	r0, #0
     5de:	6008      	str	r0, [r1, #0]
    return 0;
}
     5e0:	4770      	bx	lr

000005e2 <main>:

int
main(void)
{
     5e2:	b500      	push	{lr}
     5e4:	b085      	sub	sp, #20
    struct boot_rsp rsp;
    uintptr_t flash_base;
    int rc;

    hal_bsp_init();
     5e6:	f000 f841 	bl	66c <hal_bsp_init>

#if !MYNEWT_VAL(OS_SCHEDULING) && MYNEWT_VAL(WATCHDOG_INTERVAL)
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
     5ea:	f247 5030 	movw	r0, #30000	; 0x7530
     5ee:	f000 fe6f 	bl	12d0 <hal_watchdog_init>
    assert(rc == 0);
     5f2:	b9f8      	cbnz	r0, 634 <main+0x52>
#endif

#if defined(MCUBOOT_SERIAL) || defined(MCUBOOT_HAVE_LOGGING) || \
        MYNEWT_VAL(CRYPTO) || MYNEWT_VAL(HASH)
    /* initialize uart/crypto without os */
    os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
     5f4:	2001      	movs	r0, #1
     5f6:	f001 f929 	bl	184c <os_dev_initialize_all>
    os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
     5fa:	2002      	movs	r0, #2
     5fc:	f001 f926 	bl	184c <os_dev_initialize_all>
    sysinit();
     600:	f001 fe76 	bl	22f0 <sysinit_start>
     604:	f001 fe98 	bl	2338 <sysinit_app>
     608:	f001 fe78 	bl	22fc <sysinit_end>
    console_blocking_mode();
     60c:	f001 fde9 	bl	21e2 <console_blocking_mode>
#endif
#else
    flash_map_init();
#endif

    rc = boot_go(&rsp);
     610:	a801      	add	r0, sp, #4
     612:	f002 fcbb 	bl	2f8c <boot_go>
    assert(rc == 0);
     616:	b998      	cbnz	r0, 640 <main+0x5e>

    rc = flash_device_base(rsp.br_flash_dev_id, &flash_base);
     618:	4669      	mov	r1, sp
     61a:	f89d 0008 	ldrb.w	r0, [sp, #8]
     61e:	f7ff ffdd 	bl	5dc <flash_device_base>
    assert(rc == 0);
     622:	b998      	cbnz	r0, 64c <main+0x6a>

#if MYNEWT_VAL(BOOT_CUSTOM_START)
    boot_custom_start(flash_base, &rsp);
     624:	a901      	add	r1, sp, #4
     626:	9800      	ldr	r0, [sp, #0]
     628:	f001 fbaa 	bl	1d80 <boot_custom_start>
    hal_system_start((void *)(flash_base + rsp.br_image_off +
                              rsp.br_hdr->ih_hdr_size));
#endif

    return 0;
}
     62c:	2000      	movs	r0, #0
     62e:	b005      	add	sp, #20
     630:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
     634:	2300      	movs	r3, #0
     636:	461a      	mov	r2, r3
     638:	4619      	mov	r1, r3
     63a:	4618      	mov	r0, r3
     63c:	f001 f866 	bl	170c <__assert_func>
    assert(rc == 0);
     640:	2300      	movs	r3, #0
     642:	461a      	mov	r2, r3
     644:	4619      	mov	r1, r3
     646:	4618      	mov	r0, r3
     648:	f001 f860 	bl	170c <__assert_func>
    assert(rc == 0);
     64c:	2300      	movs	r3, #0
     64e:	461a      	mov	r2, r3
     650:	4619      	mov	r1, r3
     652:	4618      	mov	r0, r3
     654:	f001 f85a 	bl	170c <__assert_func>

00000658 <hal_bsp_flash_dev>:

/// Return the Flash Device for the ID. 0 for Internal Flash ROM, 1 for External SPI Flash
const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    if (id >= ARRAY_SIZE(flash_devs)) {
     658:	2801      	cmp	r0, #1
     65a:	d803      	bhi.n	664 <hal_bsp_flash_dev+0xc>
        return NULL;
    }
    return flash_devs[id];
     65c:	4b02      	ldr	r3, [pc, #8]	; (668 <hal_bsp_flash_dev+0x10>)
     65e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
     662:	4770      	bx	lr
        return NULL;
     664:	2000      	movs	r0, #0
}
     666:	4770      	bx	lr
     668:	00004f74 	.word	0x00004f74

0000066c <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
     66c:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
     66e:	f7ff fd97 	bl	1a0 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
     672:	f000 fe93 	bl	139c <nrf52_periph_create>
}
     676:	bd08      	pop	{r3, pc}

00000678 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
     678:	4a09      	ldr	r2, [pc, #36]	; (6a0 <NVIC_Relocate+0x28>)
     67a:	4b0a      	ldr	r3, [pc, #40]	; (6a4 <NVIC_Relocate+0x2c>)
     67c:	429a      	cmp	r2, r3
     67e:	d00a      	beq.n	696 <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
     680:	2300      	movs	r3, #0
     682:	e006      	b.n	692 <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
     684:	4a07      	ldr	r2, [pc, #28]	; (6a4 <NVIC_Relocate+0x2c>)
     686:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
     68a:	4a05      	ldr	r2, [pc, #20]	; (6a0 <NVIC_Relocate+0x28>)
     68c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
     690:	3301      	adds	r3, #1
     692:	2b35      	cmp	r3, #53	; 0x35
     694:	ddf6      	ble.n	684 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
     696:	4a02      	ldr	r2, [pc, #8]	; (6a0 <NVIC_Relocate+0x28>)
     698:	4b03      	ldr	r3, [pc, #12]	; (6a8 <NVIC_Relocate+0x30>)
     69a:	609a      	str	r2, [r3, #8]
#endif
}
     69c:	4770      	bx	lr
     69e:	bf00      	nop
     6a0:	20000000 	.word	0x20000000
     6a4:	00000000 	.word	0x00000000
     6a8:	e000ed00 	.word	0xe000ed00

000006ac <hal_spiflash_sector_info>:
}

static int
hal_spiflash_sector_info(const struct hal_flash *hal_flash_dev, int idx,
        uint32_t *address, uint32_t *sz)
{
     6ac:	b410      	push	{r4}
    const struct spiflash_dev *dev = (const struct spiflash_dev *)hal_flash_dev;

    *address = idx * dev->sector_size;
     6ae:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
     6b0:	fb01 f104 	mul.w	r1, r1, r4
     6b4:	6011      	str	r1, [r2, #0]
    *sz = dev->sector_size;
     6b6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     6b8:	601a      	str	r2, [r3, #0]
    return 0;
}
     6ba:	2000      	movs	r0, #0
     6bc:	bc10      	pop	{r4}
     6be:	4770      	bx	lr

000006c0 <spiflash_release_power_down_generic>:
{
     6c0:	b530      	push	{r4, r5, lr}
     6c2:	b083      	sub	sp, #12
     6c4:	4605      	mov	r5, r0
    uint8_t cmd[1] = { SPIFLASH_RELEASE_POWER_DOWN };
     6c6:	ac02      	add	r4, sp, #8
     6c8:	23ab      	movs	r3, #171	; 0xab
     6ca:	f804 3d04 	strb.w	r3, [r4, #-4]!
    hal_gpio_write(dev->ss_pin, 0);
     6ce:	2100      	movs	r1, #0
     6d0:	6a80      	ldr	r0, [r0, #40]	; 0x28
     6d2:	f000 fb44 	bl	d5e <hal_gpio_write>
    hal_spi_txrx(dev->spi_num, cmd, cmd, sizeof cmd);
     6d6:	2301      	movs	r3, #1
     6d8:	4622      	mov	r2, r4
     6da:	4621      	mov	r1, r4
     6dc:	6a28      	ldr	r0, [r5, #32]
     6de:	f000 fd89 	bl	11f4 <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
     6e2:	2101      	movs	r1, #1
     6e4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     6e6:	f000 fb3a 	bl	d5e <hal_gpio_write>
}
     6ea:	b003      	add	sp, #12
     6ec:	bd30      	pop	{r4, r5, pc}

000006ee <spiflash_delay_us>:
{
     6ee:	b508      	push	{r3, lr}
    os_cputime_delay_usecs(usecs);
     6f0:	f001 f894 	bl	181c <os_cputime_delay_usecs>
}
     6f4:	bd08      	pop	{r3, pc}

000006f6 <spiflash_read_jedec_id>:
{
     6f6:	b5f0      	push	{r4, r5, r6, r7, lr}
     6f8:	b083      	sub	sp, #12
     6fa:	4604      	mov	r4, r0
     6fc:	460f      	mov	r7, r1
     6fe:	4616      	mov	r6, r2
     700:	461d      	mov	r5, r3
    uint8_t cmd[4] = { SPIFLASH_READ_JEDEC_ID, 0, 0, 0 };
     702:	239f      	movs	r3, #159	; 0x9f
     704:	f88d 3004 	strb.w	r3, [sp, #4]
     708:	2100      	movs	r1, #0
     70a:	f88d 1005 	strb.w	r1, [sp, #5]
     70e:	f88d 1006 	strb.w	r1, [sp, #6]
     712:	f88d 1007 	strb.w	r1, [sp, #7]
    hal_gpio_write(dev->ss_pin, 0);
     716:	6a80      	ldr	r0, [r0, #40]	; 0x28
     718:	f000 fb21 	bl	d5e <hal_gpio_write>
    hal_spi_txrx(dev->spi_num, cmd, cmd, sizeof cmd);
     71c:	2304      	movs	r3, #4
     71e:	eb0d 0203 	add.w	r2, sp, r3
     722:	4611      	mov	r1, r2
     724:	6a20      	ldr	r0, [r4, #32]
     726:	f000 fd65 	bl	11f4 <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
     72a:	2101      	movs	r1, #1
     72c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     72e:	f000 fb16 	bl	d5e <hal_gpio_write>
    if (manufacturer) {
     732:	b117      	cbz	r7, 73a <spiflash_read_jedec_id+0x44>
        *manufacturer = cmd[1];
     734:	f89d 3005 	ldrb.w	r3, [sp, #5]
     738:	703b      	strb	r3, [r7, #0]
    if (memory_type) {
     73a:	b116      	cbz	r6, 742 <spiflash_read_jedec_id+0x4c>
        *memory_type = cmd[2];
     73c:	f89d 3006 	ldrb.w	r3, [sp, #6]
     740:	7033      	strb	r3, [r6, #0]
    if (capacity) {
     742:	b115      	cbz	r5, 74a <spiflash_read_jedec_id+0x54>
        *capacity = cmd[3];
     744:	f89d 3007 	ldrb.w	r3, [sp, #7]
     748:	702b      	strb	r3, [r5, #0]
}
     74a:	2000      	movs	r0, #0
     74c:	b003      	add	sp, #12
     74e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000750 <spiflash_read_status>:
{
     750:	b538      	push	{r3, r4, r5, lr}
     752:	4604      	mov	r4, r0
    hal_gpio_write(dev->ss_pin, 0);
     754:	2100      	movs	r1, #0
     756:	6a80      	ldr	r0, [r0, #40]	; 0x28
     758:	f000 fb01 	bl	d5e <hal_gpio_write>
    hal_spi_tx_val(dev->spi_num, cmd);
     75c:	2105      	movs	r1, #5
     75e:	6a20      	ldr	r0, [r4, #32]
     760:	f000 fd0e 	bl	1180 <hal_spi_tx_val>
    val = hal_spi_tx_val(dev->spi_num, 0xFF);
     764:	21ff      	movs	r1, #255	; 0xff
     766:	6a20      	ldr	r0, [r4, #32]
     768:	f000 fd0a 	bl	1180 <hal_spi_tx_val>
     76c:	b2c5      	uxtb	r5, r0
    hal_gpio_write(dev->ss_pin, 1);
     76e:	2101      	movs	r1, #1
     770:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     772:	f000 faf4 	bl	d5e <hal_gpio_write>
}
     776:	4628      	mov	r0, r5
     778:	bd38      	pop	{r3, r4, r5, pc}

0000077a <spiflash_device_ready>:
{
     77a:	b510      	push	{r4, lr}
     77c:	4604      	mov	r4, r0
    dev->ready = !(spiflash_read_status(dev) & SPIFLASH_STATUS_BUSY);
     77e:	f7ff ffe7 	bl	750 <spiflash_read_status>
     782:	f080 0001 	eor.w	r0, r0, #1
     786:	f000 0001 	and.w	r0, r0, #1
     78a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
     78e:	bd10      	pop	{r4, pc}

00000790 <spiflash_wait_ready_till>:
    if (dev->ready) {
     790:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
     794:	b9eb      	cbnz	r3, 7d2 <spiflash_wait_ready_till+0x42>
{
     796:	b570      	push	{r4, r5, r6, lr}
     798:	4604      	mov	r4, r0
     79a:	460e      	mov	r6, r1
     79c:	4615      	mov	r5, r2
    if (step_us < MYNEWT_VAL(SPIFLASH_READ_STATUS_INTERVAL)) {
     79e:	2a09      	cmp	r2, #9
     7a0:	d904      	bls.n	7ac <spiflash_wait_ready_till+0x1c>
    } else if (step_us > 1000000) {
     7a2:	4b0e      	ldr	r3, [pc, #56]	; (7dc <spiflash_wait_ready_till+0x4c>)
     7a4:	429a      	cmp	r2, r3
     7a6:	d902      	bls.n	7ae <spiflash_wait_ready_till+0x1e>
        step_us = 1000000;
     7a8:	4d0c      	ldr	r5, [pc, #48]	; (7dc <spiflash_wait_ready_till+0x4c>)
     7aa:	e000      	b.n	7ae <spiflash_wait_ready_till+0x1e>
        step_us = MYNEWT_VAL(SPIFLASH_READ_STATUS_INTERVAL);
     7ac:	250a      	movs	r5, #10
    limit = os_cputime_get32() + os_cputime_usecs_to_ticks(timeout_us);
     7ae:	f001 f825 	bl	17fc <os_cputime_get32>
     7b2:	4406      	add	r6, r0
        if (spiflash_device_ready(dev)) {
     7b4:	4620      	mov	r0, r4
     7b6:	f7ff ffe0 	bl	77a <spiflash_device_ready>
     7ba:	b960      	cbnz	r0, 7d6 <spiflash_wait_ready_till+0x46>
        spiflash_delay_us(step_us);
     7bc:	4628      	mov	r0, r5
     7be:	f7ff ff96 	bl	6ee <spiflash_delay_us>
    } while (CPUTIME_LT(os_cputime_get32(), limit));
     7c2:	f001 f81b 	bl	17fc <os_cputime_get32>
     7c6:	1b80      	subs	r0, r0, r6
     7c8:	2800      	cmp	r0, #0
     7ca:	dbf3      	blt.n	7b4 <spiflash_wait_ready_till+0x24>
    int rc = -1;
     7cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     7d0:	e002      	b.n	7d8 <spiflash_wait_ready_till+0x48>
        return 0;
     7d2:	2000      	movs	r0, #0
}
     7d4:	4770      	bx	lr
            rc = 0;
     7d6:	2000      	movs	r0, #0
}
     7d8:	bd70      	pop	{r4, r5, r6, pc}
     7da:	bf00      	nop
     7dc:	000f4240 	.word	0x000f4240

000007e0 <spiflash_wait_ready>:
{
     7e0:	b508      	push	{r3, lr}
    return spiflash_wait_ready_till(dev, timeout_ms * 1000, timeout_ms * 10);
     7e2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
     7e6:	005a      	lsls	r2, r3, #1
     7e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     7ec:	fb03 f101 	mul.w	r1, r3, r1
     7f0:	f7ff ffce 	bl	790 <spiflash_wait_ready_till>
}
     7f4:	bd08      	pop	{r3, pc}

000007f6 <hal_spiflash_read>:
{
     7f6:	b570      	push	{r4, r5, r6, lr}
     7f8:	b082      	sub	sp, #8
     7fa:	4605      	mov	r5, r0
     7fc:	4616      	mov	r6, r2
     7fe:	461c      	mov	r4, r3
    uint8_t cmd[] = { SPIFLASH_READ,
     800:	2303      	movs	r3, #3
     802:	f88d 3004 	strb.w	r3, [sp, #4]
        (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)(addr) };
     806:	f3c1 4307 	ubfx	r3, r1, #16, #8
    uint8_t cmd[] = { SPIFLASH_READ,
     80a:	f88d 3005 	strb.w	r3, [sp, #5]
        (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)(addr) };
     80e:	f3c1 2307 	ubfx	r3, r1, #8, #8
    uint8_t cmd[] = { SPIFLASH_READ,
     812:	f88d 3006 	strb.w	r3, [sp, #6]
     816:	f88d 1007 	strb.w	r1, [sp, #7]
    err = spiflash_wait_ready(dev, 100);
     81a:	2164      	movs	r1, #100	; 0x64
     81c:	f7ff ffe0 	bl	7e0 <spiflash_wait_ready>
    if (!err) {
     820:	b900      	cbnz	r0, 824 <hal_spiflash_read+0x2e>
        if (len > 0) {
     822:	b914      	cbnz	r4, 82a <hal_spiflash_read+0x34>
}
     824:	2000      	movs	r0, #0
     826:	b002      	add	sp, #8
     828:	bd70      	pop	{r4, r5, r6, pc}
    hal_gpio_write(dev->ss_pin, 0);
     82a:	2100      	movs	r1, #0
     82c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     82e:	f000 fa96 	bl	d5e <hal_gpio_write>
            hal_spi_txrx(dev->spi_num, cmd, NULL, sizeof cmd);
     832:	2304      	movs	r3, #4
     834:	2200      	movs	r2, #0
     836:	eb0d 0103 	add.w	r1, sp, r3
     83a:	6a28      	ldr	r0, [r5, #32]
     83c:	f000 fcda 	bl	11f4 <hal_spi_txrx>
            memset(buf, 0xFF, len);
     840:	4622      	mov	r2, r4
     842:	21ff      	movs	r1, #255	; 0xff
     844:	4630      	mov	r0, r6
     846:	f001 f9e7 	bl	1c18 <memset>
            hal_spi_txrx(dev->spi_num, buf, buf, len);
     84a:	4623      	mov	r3, r4
     84c:	4632      	mov	r2, r6
     84e:	4631      	mov	r1, r6
     850:	6a28      	ldr	r0, [r5, #32]
     852:	f000 fccf 	bl	11f4 <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
     856:	2101      	movs	r1, #1
     858:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     85a:	f000 fa80 	bl	d5e <hal_gpio_write>
     85e:	e7e1      	b.n	824 <hal_spiflash_read+0x2e>

00000860 <spiflash_write_enable>:
{
     860:	b510      	push	{r4, lr}
     862:	4604      	mov	r4, r0
    hal_gpio_write(dev->ss_pin, 0);
     864:	2100      	movs	r1, #0
     866:	6a80      	ldr	r0, [r0, #40]	; 0x28
     868:	f000 fa79 	bl	d5e <hal_gpio_write>
    hal_spi_tx_val(dev->spi_num, cmd);
     86c:	2106      	movs	r1, #6
     86e:	6a20      	ldr	r0, [r4, #32]
     870:	f000 fc86 	bl	1180 <hal_spi_tx_val>
    hal_gpio_write(dev->ss_pin, 1);
     874:	2101      	movs	r1, #1
     876:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     878:	f000 fa71 	bl	d5e <hal_gpio_write>
}
     87c:	2000      	movs	r0, #0
     87e:	bd10      	pop	{r4, pc}

00000880 <hal_spiflash_write>:
{
     880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     884:	b082      	sub	sp, #8
     886:	4605      	mov	r5, r0
     888:	460e      	mov	r6, r1
     88a:	4690      	mov	r8, r2
     88c:	461f      	mov	r7, r3
    uint8_t cmd[4] = { SPIFLASH_PAGE_PROGRAM };
     88e:	2300      	movs	r3, #0
     890:	9301      	str	r3, [sp, #4]
     892:	2302      	movs	r3, #2
     894:	f88d 3004 	strb.w	r3, [sp, #4]
    if (spiflash_wait_ready(dev, 100) != 0) {
     898:	2164      	movs	r1, #100	; 0x64
     89a:	f7ff ffa1 	bl	7e0 <spiflash_wait_ready>
     89e:	2800      	cmp	r0, #0
     8a0:	d14a      	bne.n	938 <hal_spiflash_write+0xb8>
     8a2:	4603      	mov	r3, r0
    pp_time_typical = dev->characteristics->tbp1.typical;
     8a4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
     8a6:	f8d2 9028 	ldr.w	r9, [r2, #40]	; 0x28
    pp_time_maximum = dev->characteristics->tpp.maximum;
     8aa:	f8d2 a024 	ldr.w	sl, [r2, #36]	; 0x24
    if (pp_time_maximum < pp_time_typical) {
     8ae:	45d1      	cmp	r9, sl
     8b0:	d840      	bhi.n	934 <hal_spiflash_write+0xb4>
    while (len) {
     8b2:	2f00      	cmp	r7, #0
     8b4:	d042      	beq.n	93c <hal_spiflash_write+0xbc>
        spiflash_write_enable(dev);
     8b6:	4628      	mov	r0, r5
     8b8:	f7ff ffd2 	bl	860 <spiflash_write_enable>
        cmd[1] = (uint8_t)(addr >> 16);
     8bc:	f3c6 4307 	ubfx	r3, r6, #16, #8
     8c0:	f88d 3005 	strb.w	r3, [sp, #5]
        cmd[2] = (uint8_t)(addr >> 8);
     8c4:	f3c6 2307 	ubfx	r3, r6, #8, #8
     8c8:	f88d 3006 	strb.w	r3, [sp, #6]
        cmd[3] = (uint8_t)(addr);
     8cc:	f88d 6007 	strb.w	r6, [sp, #7]
        page_limit = (addr & ~(dev->page_size - 1)) + dev->page_size;
     8d0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     8d2:	425c      	negs	r4, r3
     8d4:	4034      	ands	r4, r6
     8d6:	441c      	add	r4, r3
        to_write = page_limit - addr > len ? len :  page_limit - addr;
     8d8:	1ba4      	subs	r4, r4, r6
     8da:	42bc      	cmp	r4, r7
     8dc:	bf28      	it	cs
     8de:	463c      	movcs	r4, r7
    hal_gpio_write(dev->ss_pin, 0);
     8e0:	2100      	movs	r1, #0
     8e2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     8e4:	f000 fa3b 	bl	d5e <hal_gpio_write>
        hal_spi_txrx(dev->spi_num, cmd, NULL, sizeof cmd);
     8e8:	2304      	movs	r3, #4
     8ea:	2200      	movs	r2, #0
     8ec:	eb0d 0103 	add.w	r1, sp, r3
     8f0:	6a28      	ldr	r0, [r5, #32]
     8f2:	f000 fc7f 	bl	11f4 <hal_spi_txrx>
        hal_spi_txrx(dev->spi_num, (void *)u8buf, NULL, to_write);
     8f6:	4623      	mov	r3, r4
     8f8:	2200      	movs	r2, #0
     8fa:	4641      	mov	r1, r8
     8fc:	6a28      	ldr	r0, [r5, #32]
     8fe:	f000 fc79 	bl	11f4 <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
     902:	2101      	movs	r1, #1
     904:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     906:	f000 fa2a 	bl	d5e <hal_gpio_write>
        dev->ready = false;
     90a:	2300      	movs	r3, #0
     90c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        spiflash_delay_us(pp_time_typical);
     910:	4648      	mov	r0, r9
     912:	f7ff feec 	bl	6ee <spiflash_delay_us>
        rc = spiflash_wait_ready_till(dev, pp_time_maximum - pp_time_typical,
     916:	ebaa 0109 	sub.w	r1, sl, r9
     91a:	4a0a      	ldr	r2, [pc, #40]	; (944 <hal_spiflash_write+0xc4>)
     91c:	fba2 3201 	umull	r3, r2, r2, r1
     920:	08d2      	lsrs	r2, r2, #3
     922:	4628      	mov	r0, r5
     924:	f7ff ff34 	bl	790 <spiflash_wait_ready_till>
        if (rc) {
     928:	4603      	mov	r3, r0
     92a:	b938      	cbnz	r0, 93c <hal_spiflash_write+0xbc>
        addr += to_write;
     92c:	4426      	add	r6, r4
        u8buf += to_write;
     92e:	44a0      	add	r8, r4
        len -= to_write;
     930:	1b3f      	subs	r7, r7, r4
     932:	e7be      	b.n	8b2 <hal_spiflash_write+0x32>
        pp_time_maximum = pp_time_typical;
     934:	46ca      	mov	sl, r9
     936:	e7bc      	b.n	8b2 <hal_spiflash_write+0x32>
        rc = -1;
     938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
     93c:	4618      	mov	r0, r3
     93e:	b002      	add	sp, #8
     940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     944:	cccccccd 	.word	0xcccccccd

00000948 <spiflash_execute_erase>:
{
     948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     94a:	4604      	mov	r4, r0
     94c:	460d      	mov	r5, r1
     94e:	4617      	mov	r7, r2
     950:	461e      	mov	r6, r3
    if (spiflash_wait_ready(dev, 100) != 0) {
     952:	2164      	movs	r1, #100	; 0x64
     954:	f7ff ff44 	bl	7e0 <spiflash_wait_ready>
     958:	bb68      	cbnz	r0, 9b6 <spiflash_execute_erase+0x6e>
    spiflash_write_enable(dev);
     95a:	4620      	mov	r0, r4
     95c:	f7ff ff80 	bl	860 <spiflash_write_enable>
    spiflash_read_status(dev);
     960:	4620      	mov	r0, r4
     962:	f7ff fef5 	bl	750 <spiflash_read_status>
    hal_gpio_write(dev->ss_pin, 0);
     966:	2100      	movs	r1, #0
     968:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     96a:	f000 f9f8 	bl	d5e <hal_gpio_write>
    hal_spi_txrx(dev->spi_num, (void *)buf, NULL, size);
     96e:	463b      	mov	r3, r7
     970:	2200      	movs	r2, #0
     972:	4629      	mov	r1, r5
     974:	6a20      	ldr	r0, [r4, #32]
     976:	f000 fc3d 	bl	11f4 <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
     97a:	2101      	movs	r1, #1
     97c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     97e:	f000 f9ee 	bl	d5e <hal_gpio_write>
    dev->ready = false;
     982:	2300      	movs	r3, #0
     984:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    start_time = os_cputime_get32();
     988:	f000 ff38 	bl	17fc <os_cputime_get32>
     98c:	4605      	mov	r5, r0
    spiflash_delay_us(delay_spec->typical);
     98e:	6830      	ldr	r0, [r6, #0]
     990:	f7ff fead 	bl	6ee <spiflash_delay_us>
    wait_time_us = os_cputime_ticks_to_usecs(os_cputime_get32() - start_time);
     994:	f000 ff32 	bl	17fc <os_cputime_get32>
     998:	1b40      	subs	r0, r0, r5
    if (wait_time_us > delay_spec->maximum) {
     99a:	6871      	ldr	r1, [r6, #4]
     99c:	4281      	cmp	r1, r0
     99e:	d308      	bcc.n	9b2 <spiflash_execute_erase+0x6a>
        wait_time_us = delay_spec->maximum - wait_time_us;
     9a0:	1a09      	subs	r1, r1, r0
    rc = spiflash_wait_ready_till(dev, wait_time_us, wait_time_us / 50);
     9a2:	4a06      	ldr	r2, [pc, #24]	; (9bc <spiflash_execute_erase+0x74>)
     9a4:	fba2 3201 	umull	r3, r2, r2, r1
     9a8:	0912      	lsrs	r2, r2, #4
     9aa:	4620      	mov	r0, r4
     9ac:	f7ff fef0 	bl	790 <spiflash_wait_ready_till>
}
     9b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        wait_time_us = 0;
     9b2:	2100      	movs	r1, #0
     9b4:	e7f5      	b.n	9a2 <spiflash_execute_erase+0x5a>
        rc = -1;
     9b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
     9ba:	e7f9      	b.n	9b0 <spiflash_execute_erase+0x68>
     9bc:	51eb851f 	.word	0x51eb851f

000009c0 <spiflash_erase_cmd>:

static int
spiflash_erase_cmd(struct spiflash_dev *dev, uint8_t cmd, uint32_t addr,
                   const struct spiflash_time_spec *time_spec)
{
     9c0:	b500      	push	{lr}
     9c2:	b083      	sub	sp, #12
    uint8_t buf[4] = { cmd, (uint8_t)(addr >> 16U), (uint8_t)(addr >> 8U),
     9c4:	f88d 1004 	strb.w	r1, [sp, #4]
     9c8:	f3c2 4107 	ubfx	r1, r2, #16, #8
     9cc:	f88d 1005 	strb.w	r1, [sp, #5]
     9d0:	f3c2 2107 	ubfx	r1, r2, #8, #8
     9d4:	f88d 1006 	strb.w	r1, [sp, #6]
     9d8:	f88d 2007 	strb.w	r2, [sp, #7]
                       (uint8_t)addr };
    return spiflash_execute_erase(dev, buf, sizeof(buf), time_spec);
     9dc:	2204      	movs	r2, #4
     9de:	eb0d 0102 	add.w	r1, sp, r2
     9e2:	f7ff ffb1 	bl	948 <spiflash_execute_erase>

}
     9e6:	b003      	add	sp, #12
     9e8:	f85d fb04 	ldr.w	pc, [sp], #4

000009ec <spiflash_sector_erase>:

int
spiflash_sector_erase(struct spiflash_dev *dev, uint32_t addr)
{
     9ec:	b508      	push	{r3, lr}
    return spiflash_erase_cmd(dev, SPIFLASH_SECTOR_ERASE, addr,
     9ee:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     9f0:	460a      	mov	r2, r1
     9f2:	2120      	movs	r1, #32
     9f4:	f7ff ffe4 	bl	9c0 <spiflash_erase_cmd>
                              &dev->characteristics->tse);
}
     9f8:	bd08      	pop	{r3, pc}

000009fa <hal_spiflash_erase_sector>:
{
     9fa:	b508      	push	{r3, lr}
    return spiflash_sector_erase(dev, addr);
     9fc:	f7ff fff6 	bl	9ec <spiflash_sector_erase>
}
     a00:	bd08      	pop	{r3, pc}

00000a02 <spiflash_block_32k_erase>:

#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_32BK)
int
spiflash_block_32k_erase(struct spiflash_dev *dev, uint32_t addr)
{
     a02:	b508      	push	{r3, lr}
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_32KB, addr,
                              &dev->characteristics->tbe1);
     a04:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_32KB, addr,
     a06:	3308      	adds	r3, #8
     a08:	460a      	mov	r2, r1
     a0a:	2152      	movs	r1, #82	; 0x52
     a0c:	f7ff ffd8 	bl	9c0 <spiflash_erase_cmd>
}
     a10:	bd08      	pop	{r3, pc}

00000a12 <spiflash_block_64k_erase>:
#endif

#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_64BK)
int
spiflash_block_64k_erase(struct spiflash_dev *dev, uint32_t addr)
{
     a12:	b508      	push	{r3, lr}
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_64KB, addr,
                              &dev->characteristics->tbe2);
     a14:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_64KB, addr,
     a16:	3310      	adds	r3, #16
     a18:	460a      	mov	r2, r1
     a1a:	21d8      	movs	r1, #216	; 0xd8
     a1c:	f7ff ffd0 	bl	9c0 <spiflash_erase_cmd>
}
     a20:	bd08      	pop	{r3, pc}

00000a22 <spiflash_chip_erase>:
#endif

int
spiflash_chip_erase(struct spiflash_dev *dev)
{
     a22:	b500      	push	{lr}
     a24:	b083      	sub	sp, #12
    uint8_t buf[1] = { SPIFLASH_CHIP_ERASE };
     a26:	a902      	add	r1, sp, #8
     a28:	2360      	movs	r3, #96	; 0x60
     a2a:	f801 3d04 	strb.w	r3, [r1, #-4]!

    return spiflash_execute_erase(dev, buf, sizeof(buf),
                                  &dev->characteristics->tce);
     a2e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return spiflash_execute_erase(dev, buf, sizeof(buf),
     a30:	3318      	adds	r3, #24
     a32:	2201      	movs	r2, #1
     a34:	f7ff ff88 	bl	948 <spiflash_execute_erase>
}
     a38:	b003      	add	sp, #12
     a3a:	f85d fb04 	ldr.w	pc, [sp], #4

00000a3e <spiflash_erase>:

int
spiflash_erase(struct spiflash_dev *dev, uint32_t address, uint32_t size)
{
     a3e:	b570      	push	{r4, r5, r6, lr}
     a40:	4606      	mov	r6, r0
     a42:	4615      	mov	r5, r2
    int rc = 0;

    if (address == 0 && size == dev->hal.hf_size) {
     a44:	460c      	mov	r4, r1
     a46:	b911      	cbnz	r1, a4e <spiflash_erase+0x10>
     a48:	6883      	ldr	r3, [r0, #8]
     a4a:	4293      	cmp	r3, r2
     a4c:	d005      	beq.n	a5a <spiflash_erase+0x1c>
        return spiflash_chip_erase(dev);
    }
    address &= ~0xFFFU;
     a4e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
     a52:	f024 040f 	bic.w	r4, r4, #15
    int rc = 0;
     a56:	2300      	movs	r3, #0
    while (size) {
     a58:	e01c      	b.n	a94 <spiflash_erase+0x56>
        return spiflash_chip_erase(dev);
     a5a:	f7ff ffe2 	bl	a22 <spiflash_chip_erase>
     a5e:	4603      	mov	r3, r0
     a60:	e010      	b.n	a84 <spiflash_erase+0x46>
#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_64BK)
        if ((address & 0xFFFFU) == 0 && (size >= 0x10000)) {
            /* 64 KB erase if possible */
            rc = spiflash_block_64k_erase(dev, address);
     a62:	4621      	mov	r1, r4
     a64:	4630      	mov	r0, r6
     a66:	f7ff ffd4 	bl	a12 <spiflash_block_64k_erase>
            if (rc) {
     a6a:	4603      	mov	r3, r0
     a6c:	b950      	cbnz	r0, a84 <spiflash_erase+0x46>
                goto err;
            }
            address += 0x10000;
     a6e:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
            size -= 0x10000;
     a72:	f5a5 3580 	sub.w	r5, r5, #65536	; 0x10000
            continue;
     a76:	e00d      	b.n	a94 <spiflash_erase+0x56>
        }
#endif
#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_32BK)
        if ((address & 0x7FFFU) == 0 && (size >= 0x8000)) {
            /* 32 KB erase if possible */
            rc = spiflash_block_32k_erase(dev, address);
     a78:	4621      	mov	r1, r4
     a7a:	4630      	mov	r0, r6
     a7c:	f7ff ffc1 	bl	a02 <spiflash_block_32k_erase>
            if (rc) {
     a80:	4603      	mov	r3, r0
     a82:	b108      	cbz	r0, a88 <spiflash_erase+0x4a>
            size = 0;
        }
    }
err:
    return rc;
}
     a84:	4618      	mov	r0, r3
     a86:	bd70      	pop	{r4, r5, r6, pc}
            address += 0x8000;
     a88:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
            size -= 0x8000;
     a8c:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
            continue;
     a90:	e000      	b.n	a94 <spiflash_erase+0x56>
            size = 0;
     a92:	2500      	movs	r5, #0
    while (size) {
     a94:	2d00      	cmp	r5, #0
     a96:	d0f5      	beq.n	a84 <spiflash_erase+0x46>
        if ((address & 0xFFFFU) == 0 && (size >= 0x10000)) {
     a98:	b2a3      	uxth	r3, r4
     a9a:	b913      	cbnz	r3, aa2 <spiflash_erase+0x64>
     a9c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
     aa0:	d2df      	bcs.n	a62 <spiflash_erase+0x24>
        if ((address & 0x7FFFU) == 0 && (size >= 0x8000)) {
     aa2:	f3c4 030e 	ubfx	r3, r4, #0, #15
     aa6:	b913      	cbnz	r3, aae <spiflash_erase+0x70>
     aa8:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
     aac:	d2e4      	bcs.n	a78 <spiflash_erase+0x3a>
        rc = spiflash_sector_erase(dev, address);
     aae:	4621      	mov	r1, r4
     ab0:	4630      	mov	r0, r6
     ab2:	f7ff ff9b 	bl	9ec <spiflash_sector_erase>
        if (rc) {
     ab6:	4603      	mov	r3, r0
     ab8:	2800      	cmp	r0, #0
     aba:	d1e3      	bne.n	a84 <spiflash_erase+0x46>
        address += MYNEWT_VAL(SPIFLASH_SECTOR_SIZE);
     abc:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
        if (size > MYNEWT_VAL(SPIFLASH_SECTOR_SIZE)) {
     ac0:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
     ac4:	d9e5      	bls.n	a92 <spiflash_erase+0x54>
            size -= MYNEWT_VAL(SPIFLASH_SECTOR_SIZE);
     ac6:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
     aca:	e7e3      	b.n	a94 <spiflash_erase+0x56>

00000acc <hal_spiflash_erase>:
{
     acc:	b508      	push	{r3, lr}
    return spiflash_erase(dev, address, size);
     ace:	f7ff ffb6 	bl	a3e <spiflash_erase>
}
     ad2:	bd08      	pop	{r3, pc}

00000ad4 <spiflash_identify>:

int
spiflash_identify(struct spiflash_dev *dev)
{
     ad4:	b570      	push	{r4, r5, r6, lr}
     ad6:	b082      	sub	sp, #8
     ad8:	4606      	mov	r6, r0
    int i;
    int j;
    uint8_t manufacturer = 0;
     ada:	2300      	movs	r3, #0
     adc:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t memory_type = 0;
     ae0:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t capacity = 0;
     ae4:	ac02      	add	r4, sp, #8
     ae6:	f804 3d03 	strb.w	r3, [r4, #-3]!

    spiflash_lock(dev);

    /* Only one chip specified, no need for search*/
    if ((sizeof(supported_chips) / sizeof(supported_chips[0])) == 2) {
        supported_chips[0].fc_release_power_down(dev);
     aea:	4d12      	ldr	r5, [pc, #72]	; (b34 <spiflash_identify+0x60>)
     aec:	686b      	ldr	r3, [r5, #4]
     aee:	4798      	blx	r3
        spiflash_read_jedec_id(dev, &manufacturer, &memory_type, &capacity);
     af0:	4623      	mov	r3, r4
     af2:	f10d 0206 	add.w	r2, sp, #6
     af6:	f10d 0107 	add.w	r1, sp, #7
     afa:	4630      	mov	r0, r6
     afc:	f7ff fdfb 	bl	6f6 <spiflash_read_jedec_id>
        /* If BSP defined SpiFlash manufacturer or memory type does not
         * match SpiFlash is most likely not connected, connected to
         * different pins, or of different type.
         * It is unlikely that flash depended packaged will work correctly.
         */
        assert(manufacturer == supported_chips[0].fc_jedec_id.ji_manufacturer &&
     b00:	782a      	ldrb	r2, [r5, #0]
     b02:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b06:	429a      	cmp	r2, r3
     b08:	d10e      	bne.n	b28 <spiflash_identify+0x54>
     b0a:	786a      	ldrb	r2, [r5, #1]
     b0c:	f89d 3006 	ldrb.w	r3, [sp, #6]
     b10:	429a      	cmp	r2, r3
     b12:	d109      	bne.n	b28 <spiflash_identify+0x54>
     b14:	78aa      	ldrb	r2, [r5, #2]
     b16:	f89d 3005 	ldrb.w	r3, [sp, #5]
     b1a:	429a      	cmp	r2, r3
     b1c:	d104      	bne.n	b28 <spiflash_identify+0x54>
            memory_type != supported_chips[0].fc_jedec_id.ji_type ||
            capacity != supported_chips[0].fc_jedec_id.ji_capacity) {
            rc = -1;
            goto err;
        }
        dev->flash_chip = &supported_chips[0];
     b1e:	4b05      	ldr	r3, [pc, #20]	; (b34 <spiflash_identify+0x60>)
     b20:	63b3      	str	r3, [r6, #56]	; 0x38
    }
err:
    spiflash_unlock(dev);

    return rc;
}
     b22:	2000      	movs	r0, #0
     b24:	b002      	add	sp, #8
     b26:	bd70      	pop	{r4, r5, r6, pc}
        assert(manufacturer == supported_chips[0].fc_jedec_id.ji_manufacturer &&
     b28:	2300      	movs	r3, #0
     b2a:	461a      	mov	r2, r3
     b2c:	4619      	mov	r1, r3
     b2e:	4618      	mov	r0, r3
     b30:	f000 fdec 	bl	170c <__assert_func>
     b34:	20000128 	.word	0x20000128

00000b38 <hal_spiflash_init>:

static int
hal_spiflash_init(const struct hal_flash *hal_flash_dev)
{
     b38:	b510      	push	{r4, lr}
     b3a:	4604      	mov	r4, r0
    os_callout_init(&dev->apd_tmo_co, os_eventq_dflt_get(),
                    spiflash_apd_tmo_func, dev);
#endif

#if !MYNEWT_VAL(BUS_DRIVER_PRESENT)
    hal_gpio_init_out(dev->ss_pin, 1);
     b3c:	2101      	movs	r1, #1
     b3e:	6a80      	ldr	r0, [r0, #40]	; 0x28
     b40:	f000 f8f1 	bl	d26 <hal_gpio_init_out>

    (void)hal_spi_disable(dev->spi_num);
     b44:	6a20      	ldr	r0, [r4, #32]
     b46:	f000 fab7 	bl	10b8 <hal_spi_disable>

    rc = hal_spi_config(dev->spi_num, &dev->spi_settings);
     b4a:	f104 0118 	add.w	r1, r4, #24
     b4e:	6a20      	ldr	r0, [r4, #32]
     b50:	f000 fa70 	bl	1034 <hal_spi_config>
    if (rc) {
     b54:	4603      	mov	r3, r0
     b56:	b108      	cbz	r0, b5c <hal_spiflash_init+0x24>
    hal_spi_enable(dev->spi_num);
#endif
    rc = spiflash_identify(dev);

    return rc;
}
     b58:	4618      	mov	r0, r3
     b5a:	bd10      	pop	{r4, pc}
    hal_spi_set_txrx_cb(dev->spi_num, NULL, NULL);
     b5c:	2200      	movs	r2, #0
     b5e:	4611      	mov	r1, r2
     b60:	6a20      	ldr	r0, [r4, #32]
     b62:	f000 fb31 	bl	11c8 <hal_spi_set_txrx_cb>
    hal_spi_enable(dev->spi_num);
     b66:	6a20      	ldr	r0, [r4, #32]
     b68:	f000 fa80 	bl	106c <hal_spi_enable>
    rc = spiflash_identify(dev);
     b6c:	4620      	mov	r0, r4
     b6e:	f7ff ffb1 	bl	ad4 <spiflash_identify>
     b72:	4603      	mov	r3, r0
    return rc;
     b74:	e7f0      	b.n	b58 <hal_spiflash_init+0x20>

00000b76 <_exit>:

void _exit(int status);

void
_exit(int status)
{
     b76:	b508      	push	{r3, lr}
    hal_system_reset();
     b78:	f7ff fafc 	bl	174 <hal_system_reset>

00000b7c <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
     b7c:	2300      	movs	r3, #0
     b7e:	4a07      	ldr	r2, [pc, #28]	; (b9c <nrf52k_flash_wait_ready+0x20>)
     b80:	4293      	cmp	r3, r2
     b82:	dc06      	bgt.n	b92 <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
     b84:	4a06      	ldr	r2, [pc, #24]	; (ba0 <nrf52k_flash_wait_ready+0x24>)
     b86:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
     b8a:	2a01      	cmp	r2, #1
     b8c:	d004      	beq.n	b98 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
     b8e:	3301      	adds	r3, #1
     b90:	e7f5      	b.n	b7e <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
     b92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     b96:	4770      	bx	lr
            return 0;
     b98:	2000      	movs	r0, #0
}
     b9a:	4770      	bx	lr
     b9c:	0001869f 	.word	0x0001869f
     ba0:	4001e000 	.word	0x4001e000

00000ba4 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
     ba4:	b538      	push	{r3, r4, r5, lr}
     ba6:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
     ba8:	f7ff ffe8 	bl	b7c <nrf52k_flash_wait_ready>
     bac:	b9f0      	cbnz	r0, bec <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     bae:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     bb2:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
     bb4:	4b0f      	ldr	r3, [pc, #60]	; (bf4 <nrf52k_flash_erase_sector+0x50>)
     bb6:	2202      	movs	r2, #2
     bb8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
     bbc:	f7ff ffde 	bl	b7c <nrf52k_flash_wait_ready>
     bc0:	b148      	cbz	r0, bd6 <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
     bc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
     bc6:	4a0b      	ldr	r2, [pc, #44]	; (bf4 <nrf52k_flash_erase_sector+0x50>)
     bc8:	2100      	movs	r1, #0
     bca:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
     bce:	b904      	cbnz	r4, bd2 <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
     bd0:	b662      	cpsie	i
    return rc;
}
     bd2:	4618      	mov	r0, r3
     bd4:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
     bd6:	4b07      	ldr	r3, [pc, #28]	; (bf4 <nrf52k_flash_erase_sector+0x50>)
     bd8:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
     bdc:	f7ff ffce 	bl	b7c <nrf52k_flash_wait_ready>
     be0:	4603      	mov	r3, r0
     be2:	2800      	cmp	r0, #0
     be4:	d0ef      	beq.n	bc6 <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
     be6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     bea:	e7ec      	b.n	bc6 <nrf52k_flash_erase_sector+0x22>
        return -1;
     bec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     bf0:	e7ef      	b.n	bd2 <nrf52k_flash_erase_sector+0x2e>
     bf2:	bf00      	nop
     bf4:	4001e000 	.word	0x4001e000

00000bf8 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
     bf8:	2000      	movs	r0, #0
     bfa:	4770      	bx	lr

00000bfc <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
     bfc:	297f      	cmp	r1, #127	; 0x7f
     bfe:	dc06      	bgt.n	c0e <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
     c00:	0309      	lsls	r1, r1, #12
     c02:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
     c04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     c08:	601a      	str	r2, [r3, #0]
}
     c0a:	2000      	movs	r0, #0
     c0c:	4770      	bx	lr
{
     c0e:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
     c10:	2300      	movs	r3, #0
     c12:	461a      	mov	r2, r3
     c14:	4619      	mov	r1, r3
     c16:	4618      	mov	r0, r3
     c18:	f000 fd78 	bl	170c <__assert_func>

00000c1c <nrf52k_flash_write>:
{
     c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     c20:	b082      	sub	sp, #8
     c22:	460d      	mov	r5, r1
     c24:	4616      	mov	r6, r2
     c26:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
     c28:	f7ff ffa8 	bl	b7c <nrf52k_flash_wait_ready>
     c2c:	2800      	cmp	r0, #0
     c2e:	d158      	bne.n	ce2 <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     c30:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     c34:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
     c36:	4b2c      	ldr	r3, [pc, #176]	; (ce8 <nrf52k_flash_write+0xcc>)
     c38:	2201      	movs	r2, #1
     c3a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
     c3e:	f015 0803 	ands.w	r8, r5, #3
     c42:	d10b      	bne.n	c5c <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
     c44:	2c03      	cmp	r4, #3
     c46:	d925      	bls.n	c94 <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
     c48:	f7ff ff98 	bl	b7c <nrf52k_flash_wait_ready>
     c4c:	2800      	cmp	r0, #0
     c4e:	d139      	bne.n	cc4 <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
     c50:	f856 3b04 	ldr.w	r3, [r6], #4
     c54:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
     c58:	3c04      	subs	r4, #4
     c5a:	e7f3      	b.n	c44 <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
     c5c:	f7ff ff8e 	bl	b7c <nrf52k_flash_wait_ready>
     c60:	bb68      	cbnz	r0, cbe <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
     c62:	f025 0a03 	bic.w	sl, r5, #3
     c66:	f8da 3000 	ldr.w	r3, [sl]
     c6a:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
     c6c:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
     c70:	45a1      	cmp	r9, r4
     c72:	d900      	bls.n	c76 <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
     c74:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
     c76:	464a      	mov	r2, r9
     c78:	4631      	mov	r1, r6
     c7a:	ab01      	add	r3, sp, #4
     c7c:	eb03 0008 	add.w	r0, r3, r8
     c80:	f000 ffbd 	bl	1bfe <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
     c84:	9b01      	ldr	r3, [sp, #4]
     c86:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
     c8a:	444d      	add	r5, r9
        num_bytes -= cnt;
     c8c:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
     c90:	444e      	add	r6, r9
     c92:	e7d7      	b.n	c44 <nrf52k_flash_write+0x28>
    if (num_bytes) {
     c94:	b164      	cbz	r4, cb0 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
     c96:	682b      	ldr	r3, [r5, #0]
     c98:	a802      	add	r0, sp, #8
     c9a:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
     c9e:	4622      	mov	r2, r4
     ca0:	4631      	mov	r1, r6
     ca2:	f000 ffac 	bl	1bfe <memcpy>
        if (nrf52k_flash_wait_ready()) {
     ca6:	f7ff ff69 	bl	b7c <nrf52k_flash_wait_ready>
     caa:	b9b8      	cbnz	r0, cdc <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
     cac:	9b01      	ldr	r3, [sp, #4]
     cae:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
     cb0:	f7ff ff64 	bl	b7c <nrf52k_flash_wait_ready>
     cb4:	4603      	mov	r3, r0
     cb6:	b138      	cbz	r0, cc8 <nrf52k_flash_write+0xac>
        rc = -1;
     cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     cbc:	e004      	b.n	cc8 <nrf52k_flash_write+0xac>
    int rc = -1;
     cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     cc2:	e001      	b.n	cc8 <nrf52k_flash_write+0xac>
     cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
     cc8:	4a07      	ldr	r2, [pc, #28]	; (ce8 <nrf52k_flash_write+0xcc>)
     cca:	2100      	movs	r1, #0
     ccc:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
     cd0:	b907      	cbnz	r7, cd4 <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
     cd2:	b662      	cpsie	i
}
     cd4:	4618      	mov	r0, r3
     cd6:	b002      	add	sp, #8
     cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
     cdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     ce0:	e7f2      	b.n	cc8 <nrf52k_flash_write+0xac>
        return -1;
     ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     ce6:	e7f5      	b.n	cd4 <nrf52k_flash_write+0xb8>
     ce8:	4001e000 	.word	0x4001e000

00000cec <nrf52k_flash_read>:
{
     cec:	b508      	push	{r3, lr}
     cee:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
     cf0:	461a      	mov	r2, r3
     cf2:	f000 ff84 	bl	1bfe <memcpy>
}
     cf6:	2000      	movs	r0, #0
     cf8:	bd08      	pop	{r3, pc}

00000cfa <hal_gpio_init_in>:
{
    uint32_t conf;
    NRF_GPIO_Type *port;
    int pin_index = HAL_GPIO_INDEX(pin);

    switch (pull) {
     cfa:	2901      	cmp	r1, #1
     cfc:	d003      	beq.n	d06 <hal_gpio_init_in+0xc>
     cfe:	2902      	cmp	r1, #2
     d00:	d00f      	beq.n	d22 <hal_gpio_init_in+0x28>
    case HAL_GPIO_PULL_DOWN:
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
        break;
    case HAL_GPIO_PULL_NONE:
    default:
        conf = 0;
     d02:	2100      	movs	r1, #0
        break;
     d04:	e000      	b.n	d08 <hal_gpio_init_in+0xe>
        conf = GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos;
     d06:	210c      	movs	r1, #12
    }

    port = HAL_GPIO_PORT(pin);
    port->PIN_CNF[pin_index] = conf;
     d08:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
     d0c:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
     d10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
     d14:	2301      	movs	r3, #1
     d16:	fa03 f000 	lsl.w	r0, r3, r0
     d1a:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c

    return 0;
}
     d1e:	2000      	movs	r0, #0
     d20:	4770      	bx	lr
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
     d22:	2104      	movs	r1, #4
     d24:	e7f0      	b.n	d08 <hal_gpio_init_in+0xe>

00000d26 <hal_gpio_init_out>:
{
    NRF_GPIO_Type *port;
    int pin_index = HAL_GPIO_INDEX(pin);

    port = HAL_GPIO_PORT(pin);
    if (val) {
     d26:	b999      	cbnz	r1, d50 <hal_gpio_init_out+0x2a>
        port->OUTSET = HAL_GPIO_MASK(pin);
    } else {
        port->OUTCLR = HAL_GPIO_MASK(pin);
     d28:	2301      	movs	r3, #1
     d2a:	4083      	lsls	r3, r0
     d2c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
     d30:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    }
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
     d34:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
     d38:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
     d3c:	2103      	movs	r1, #3
     d3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        (GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);
    port->DIRSET = HAL_GPIO_MASK(pin);
     d42:	2301      	movs	r3, #1
     d44:	fa03 f000 	lsl.w	r0, r3, r0
     d48:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518

    return 0;
}
     d4c:	2000      	movs	r0, #0
     d4e:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
     d50:	2301      	movs	r3, #1
     d52:	4083      	lsls	r3, r0
     d54:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
     d58:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
     d5c:	e7ea      	b.n	d34 <hal_gpio_init_out+0xe>

00000d5e <hal_gpio_write>:
hal_gpio_write(int pin, int val)
{
    NRF_GPIO_Type *port;

    port = HAL_GPIO_PORT(pin);
    if (val) {
     d5e:	b939      	cbnz	r1, d70 <hal_gpio_write+0x12>
        port->OUTSET = HAL_GPIO_MASK(pin);
    } else {
        port->OUTCLR = HAL_GPIO_MASK(pin);
     d60:	2301      	movs	r3, #1
     d62:	fa03 f000 	lsl.w	r0, r3, r0
     d66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
     d6a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    }
}
     d6e:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
     d70:	2301      	movs	r3, #1
     d72:	fa03 f000 	lsl.w	r0, r3, r0
     d76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
     d7a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
     d7e:	4770      	bx	lr

00000d80 <hal_gpio_read>:
hal_gpio_read(int pin)
{
    NRF_GPIO_Type *port;
    port = HAL_GPIO_PORT(pin);

    return (port->DIR & HAL_GPIO_MASK(pin)) ?
     d80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
     d84:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
     d88:	2301      	movs	r3, #1
     d8a:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
     d8c:	421a      	tst	r2, r3
     d8e:	d108      	bne.n	da2 <hal_gpio_read+0x22>
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
     d90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
     d94:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
     d98:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
     d9c:	f000 0001 	and.w	r0, r0, #1
}
     da0:	4770      	bx	lr
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
     da2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
     da6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
     daa:	fa23 f000 	lsr.w	r0, r3, r0
     dae:	f000 0001 	and.w	r0, r0, #1
     db2:	4770      	bx	lr

00000db4 <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
     db4:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
     db6:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
     db8:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
     dbc:	b32b      	cbz	r3, e0a <nrf52_irqm_handler+0x56>
        spim->EVENTS_END = 0;
     dbe:	2300      	movs	r3, #0
     dc0:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
     dc4:	7843      	ldrb	r3, [r0, #1]
     dc6:	b303      	cbz	r3, e0a <nrf52_irqm_handler+0x56>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
     dc8:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
     dcc:	88c3      	ldrh	r3, [r0, #6]
     dce:	fa13 f382 	uxtah	r3, r3, r2
     dd2:	b29b      	uxth	r3, r3
     dd4:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
     dd6:	8881      	ldrh	r1, [r0, #4]
     dd8:	428b      	cmp	r3, r1
     dda:	d217      	bcs.n	e0c <nrf52_irqm_handler+0x58>
     ddc:	b292      	uxth	r2, r2
            spi->nhs_txbuf += xfr_bytes;
     dde:	6984      	ldr	r4, [r0, #24]
     de0:	4414      	add	r4, r2
     de2:	6184      	str	r4, [r0, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
     de4:	1acb      	subs	r3, r1, r3
     de6:	b29b      	uxth	r3, r3
            len = min(SPIM_TXD_MAXCNT_MAX, len);
     de8:	2bff      	cmp	r3, #255	; 0xff
     dea:	bf28      	it	cs
     dec:	23ff      	movcs	r3, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
     dee:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
     df2:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
     df6:	69c1      	ldr	r1, [r0, #28]
     df8:	b129      	cbz	r1, e06 <nrf52_irqm_handler+0x52>
                spi->nhs_rxbuf += xfr_bytes;
     dfa:	440a      	add	r2, r1
     dfc:	61c2      	str	r2, [r0, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
     dfe:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
     e02:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
     e06:	2301      	movs	r3, #1
     e08:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
     e0a:	bd38      	pop	{r3, r4, r5, pc}
     e0c:	4604      	mov	r4, r0
            if (spi->txrx_cb_func) {
     e0e:	6a03      	ldr	r3, [r0, #32]
     e10:	b10b      	cbz	r3, e16 <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
     e12:	6a40      	ldr	r0, [r0, #36]	; 0x24
     e14:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
     e16:	2300      	movs	r3, #0
     e18:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
     e1a:	2340      	movs	r3, #64	; 0x40
     e1c:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
     e20:	e7f3      	b.n	e0a <nrf52_irqm_handler+0x56>
	...

00000e24 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
     e24:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
     e26:	4b04      	ldr	r3, [pc, #16]	; (e38 <nrf52_spi0_irq_handler+0x14>)
     e28:	781b      	ldrb	r3, [r3, #0]
     e2a:	b103      	cbz	r3, e2e <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
     e2c:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
     e2e:	4802      	ldr	r0, [pc, #8]	; (e38 <nrf52_spi0_irq_handler+0x14>)
     e30:	f7ff ffc0 	bl	db4 <nrf52_irqm_handler>
}
     e34:	e7fa      	b.n	e2c <nrf52_spi0_irq_handler+0x8>
     e36:	bf00      	nop
     e38:	200063bc 	.word	0x200063bc

00000e3c <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
     e3c:	2301      	movs	r3, #1
     e3e:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
     e40:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
     e44:	2b00      	cmp	r3, #0
     e46:	d0fb      	beq.n	e40 <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
     e48:	2300      	movs	r3, #0
     e4a:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
     e4e:	4770      	bx	lr

00000e50 <hal_spi_config_slave>:
}

static int
hal_spi_config_slave(struct nrf52_hal_spi *spi,
                     struct hal_spi_settings *settings)
{
     e50:	b410      	push	{r4}
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
     e52:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
     e54:	780b      	ldrb	r3, [r1, #0]
     e56:	2b03      	cmp	r3, #3
     e58:	d80c      	bhi.n	e74 <hal_spi_config_slave+0x24>
     e5a:	e8df f003 	tbb	[pc, r3]
     e5e:	0e02      	.short	0x0e02
     e60:	0805      	.short	0x0805
        case HAL_SPI_MODE0:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
     e62:	2300      	movs	r3, #0
    rc = 0;
     e64:	4618      	mov	r0, r3
     e66:	e00a      	b.n	e7e <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE1:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
        case HAL_SPI_MODE2:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
     e68:	2304      	movs	r3, #4
    rc = 0;
     e6a:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos);
            break;
     e6c:	e007      	b.n	e7e <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE3:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
     e6e:	2306      	movs	r3, #6
    rc = 0;
     e70:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
     e72:	e004      	b.n	e7e <hal_spi_config_slave+0x2e>
        default:
            nrf_config = 0;
     e74:	2300      	movs	r3, #0
            rc = EINVAL;
     e76:	2016      	movs	r0, #22
            break;
     e78:	e001      	b.n	e7e <hal_spi_config_slave+0x2e>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
     e7a:	2302      	movs	r3, #2
    rc = 0;
     e7c:	2000      	movs	r0, #0
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
     e7e:	784c      	ldrb	r4, [r1, #1]
     e80:	2c01      	cmp	r4, #1
     e82:	d005      	beq.n	e90 <hal_spi_config_slave+0x40>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
     e84:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
     e88:	788b      	ldrb	r3, [r1, #2]
     e8a:	b923      	cbnz	r3, e96 <hal_spi_config_slave+0x46>
            rc = EINVAL;
            break;
    }

    return rc;
}
     e8c:	bc10      	pop	{r4}
     e8e:	4770      	bx	lr
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
     e90:	f043 0301 	orr.w	r3, r3, #1
     e94:	e7f6      	b.n	e84 <hal_spi_config_slave+0x34>
            rc = EINVAL;
     e96:	2016      	movs	r0, #22
    return rc;
     e98:	e7f8      	b.n	e8c <hal_spi_config_slave+0x3c>
	...

00000e9c <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
     e9c:	b430      	push	{r4, r5}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
     e9e:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
     ea0:	2501      	movs	r5, #1
     ea2:	409d      	lsls	r5, r3
     ea4:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
     ea8:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    port->PIN_CNF[pin] =
     eac:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
     eb0:	2503      	movs	r5, #3
     eb2:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
     eb6:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
     eb8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
     ebc:	2500      	movs	r5, #0
     ebe:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
     ec2:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
     ec4:	780c      	ldrb	r4, [r1, #0]
     ec6:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
     eca:	784c      	ldrb	r4, [r1, #1]
     ecc:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
     ed0:	7889      	ldrb	r1, [r1, #2]
     ed2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
     ed6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     eda:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
     ede:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
     ee2:	4919      	ldr	r1, [pc, #100]	; (f48 <hal_spi_init_master+0xac>)
     ee4:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
     ee6:	3310      	adds	r3, #16
     ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
     eec:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
     ef0:	42ab      	cmp	r3, r5
     ef2:	db22      	blt.n	f3a <hal_spi_init_master+0x9e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ef4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
     ef8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
     efc:	22e0      	movs	r2, #224	; 0xe0
     efe:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
     f02:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
     f06:	2b00      	cmp	r3, #0
     f08:	db08      	blt.n	f1c <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f0a:	f003 011f 	and.w	r1, r3, #31
     f0e:	095b      	lsrs	r3, r3, #5
     f10:	2201      	movs	r2, #1
     f12:	408a      	lsls	r2, r1
     f14:	3360      	adds	r3, #96	; 0x60
     f16:	490d      	ldr	r1, [pc, #52]	; (f4c <hal_spi_init_master+0xb0>)
     f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
     f1c:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
     f20:	2b00      	cmp	r3, #0
     f22:	db07      	blt.n	f34 <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f24:	f003 011f 	and.w	r1, r3, #31
     f28:	095b      	lsrs	r3, r3, #5
     f2a:	2201      	movs	r2, #1
     f2c:	408a      	lsls	r2, r1
     f2e:	4907      	ldr	r1, [pc, #28]	; (f4c <hal_spi_init_master+0xb0>)
     f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
     f34:	2000      	movs	r0, #0
     f36:	bc30      	pop	{r4, r5}
     f38:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     f3a:	f003 030f 	and.w	r3, r3, #15
     f3e:	4a04      	ldr	r2, [pc, #16]	; (f50 <hal_spi_init_master+0xb4>)
     f40:	441a      	add	r2, r3
     f42:	23e0      	movs	r3, #224	; 0xe0
     f44:	7613      	strb	r3, [r2, #24]
     f46:	e7dc      	b.n	f02 <hal_spi_init_master+0x66>
     f48:	e000ed00 	.word	0xe000ed00
     f4c:	e000e100 	.word	0xe000e100
     f50:	e000ecfc 	.word	0xe000ecfc

00000f54 <hal_spi_config_master>:
{
     f54:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
     f56:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
     f58:	680c      	ldr	r4, [r1, #0]
     f5a:	684b      	ldr	r3, [r1, #4]
     f5c:	6084      	str	r4, [r0, #8]
     f5e:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
     f60:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
     f64:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
     f68:	7808      	ldrb	r0, [r1, #0]
     f6a:	2801      	cmp	r0, #1
     f6c:	d916      	bls.n	f9c <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
     f6e:	2001      	movs	r0, #1
     f70:	4098      	lsls	r0, r3
     f72:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
     f76:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
     f7a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
     f7e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
     f82:	2403      	movs	r4, #3
     f84:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
     f88:	788b      	ldrb	r3, [r1, #2]
     f8a:	b973      	cbnz	r3, faa <hal_spi_config_master+0x56>
    rc = 0;
     f8c:	2000      	movs	r0, #0
    switch (settings->data_mode) {
     f8e:	780b      	ldrb	r3, [r1, #0]
     f90:	2b03      	cmp	r3, #3
     f92:	d812      	bhi.n	fba <hal_spi_config_master+0x66>
     f94:	e8df f003 	tbb	[pc, r3]
     f98:	0f0d140b 	.word	0x0f0d140b
        port->OUTCLR = (1UL << pin);
     f9c:	2001      	movs	r0, #1
     f9e:	4098      	lsls	r0, r3
     fa0:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
     fa4:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
     fa8:	e7e7      	b.n	f7a <hal_spi_config_master+0x26>
            rc = EINVAL;
     faa:	2016      	movs	r0, #22
     fac:	e7ef      	b.n	f8e <hal_spi_config_master+0x3a>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
     fae:	2300      	movs	r3, #0
     fb0:	e007      	b.n	fc2 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
     fb2:	2304      	movs	r3, #4
            break;
     fb4:	e005      	b.n	fc2 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
     fb6:	2306      	movs	r3, #6
            break;
     fb8:	e003      	b.n	fc2 <hal_spi_config_master+0x6e>
            nrf_config = 0;
     fba:	2300      	movs	r3, #0
            rc = EINVAL;
     fbc:	2016      	movs	r0, #22
            break;
     fbe:	e000      	b.n	fc2 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
     fc0:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
     fc2:	784c      	ldrb	r4, [r1, #1]
     fc4:	2c01      	cmp	r4, #1
     fc6:	d010      	beq.n	fea <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
     fc8:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
     fcc:	684b      	ldr	r3, [r1, #4]
     fce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     fd2:	d022      	beq.n	101a <hal_spi_config_master+0xc6>
     fd4:	d80c      	bhi.n	ff0 <hal_spi_config_master+0x9c>
     fd6:	2bfa      	cmp	r3, #250	; 0xfa
     fd8:	d028      	beq.n	102c <hal_spi_config_master+0xd8>
     fda:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
     fde:	d019      	beq.n	1014 <hal_spi_config_master+0xc0>
     fe0:	2b7d      	cmp	r3, #125	; 0x7d
     fe2:	d011      	beq.n	1008 <hal_spi_config_master+0xb4>
            frequency = 0;
     fe4:	2300      	movs	r3, #0
            rc = EINVAL;
     fe6:	2016      	movs	r0, #22
            break;
     fe8:	e010      	b.n	100c <hal_spi_config_master+0xb8>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
     fea:	f043 0301 	orr.w	r3, r3, #1
     fee:	e7eb      	b.n	fc8 <hal_spi_config_master+0x74>
    switch (settings->baudrate) {
     ff0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
     ff4:	d014      	beq.n	1020 <hal_spi_config_master+0xcc>
     ff6:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
     ffa:	d014      	beq.n	1026 <hal_spi_config_master+0xd2>
     ffc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    1000:	d1f0      	bne.n	fe4 <hal_spi_config_master+0x90>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
    1002:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
            break;
    1006:	e001      	b.n	100c <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
    1008:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
    100c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
    1010:	bc10      	pop	{r4}
    1012:	4770      	bx	lr
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
    1014:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
            break;
    1018:	e7f8      	b.n	100c <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
    101a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            break;
    101e:	e7f5      	b.n	100c <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
    1020:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
    1024:	e7f2      	b.n	100c <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
    1026:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
            break;
    102a:	e7ef      	b.n	100c <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
    102c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    1030:	e7ec      	b.n	100c <hal_spi_config_master+0xb8>
	...

00001034 <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1034:	2802      	cmp	r0, #2
    1036:	dc10      	bgt.n	105a <hal_spi_config+0x26>
{
    1038:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    103a:	4b0b      	ldr	r3, [pc, #44]	; (1068 <hal_spi_config+0x34>)
    103c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1040:	b168      	cbz	r0, 105e <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
    1042:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
    1044:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    1048:	b95b      	cbnz	r3, 1062 <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    104a:	7803      	ldrb	r3, [r0, #0]
    104c:	b113      	cbz	r3, 1054 <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    } else {
        rc = hal_spi_config_slave(spi, settings);
    104e:	f7ff feff 	bl	e50 <hal_spi_config_slave>
    }

err:
    return (rc);
}
    1052:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_master(spi, settings);
    1054:	f7ff ff7e 	bl	f54 <hal_spi_config_master>
    1058:	e7fb      	b.n	1052 <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    105a:	2016      	movs	r0, #22
}
    105c:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    105e:	2016      	movs	r0, #22
    1060:	e7f7      	b.n	1052 <hal_spi_config+0x1e>
        return -1;
    1062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1066:	e7f4      	b.n	1052 <hal_spi_config+0x1e>
    1068:	00004ffc 	.word	0x00004ffc

0000106c <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    106c:	2802      	cmp	r0, #2
    106e:	dc1b      	bgt.n	10a8 <hal_spi_enable+0x3c>
    1070:	4b10      	ldr	r3, [pc, #64]	; (10b4 <hal_spi_enable+0x48>)
    1072:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1076:	b1cb      	cbz	r3, 10ac <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    1078:	781a      	ldrb	r2, [r3, #0]
    107a:	b17a      	cbz	r2, 109c <hal_spi_enable+0x30>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    } else {
        if (spi->txrx_cb_func == NULL) {
    107c:	6a1a      	ldr	r2, [r3, #32]
    107e:	b1ba      	cbz	r2, 10b0 <hal_spi_enable+0x44>
            rc = EINVAL;
            goto err;
        }

        spis = spi->nhs_spi.spis;
    1080:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
    1082:	2000      	movs	r0, #0
    1084:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
    1088:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
    108c:	f240 4202 	movw	r2, #1026	; 0x402
    1090:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
    1094:	2202      	movs	r2, #2
    1096:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    109a:	4770      	bx	lr
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
    109c:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    109e:	2201      	movs	r2, #1
    10a0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    rc = 0;
    10a4:	2000      	movs	r0, #0
    10a6:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    10a8:	2016      	movs	r0, #22
    10aa:	4770      	bx	lr
    10ac:	2016      	movs	r0, #22
    10ae:	4770      	bx	lr
            rc = EINVAL;
    10b0:	2016      	movs	r0, #22

err:
    return rc;
}
    10b2:	4770      	bx	lr
    10b4:	00004ffc 	.word	0x00004ffc

000010b8 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    10b8:	2802      	cmp	r0, #2
    10ba:	dc2a      	bgt.n	1112 <hal_spi_disable+0x5a>
{
    10bc:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    10be:	4b17      	ldr	r3, [pc, #92]	; (111c <hal_spi_disable+0x64>)
    10c0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    10c4:	b33c      	cbz	r4, 1116 <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    10c6:	7823      	ldrb	r3, [r4, #0]
    10c8:	b9ab      	cbnz	r3, 10f6 <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
    10ca:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
    10cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    10d0:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
    10d4:	7863      	ldrb	r3, [r4, #1]
    10d6:	b943      	cbnz	r3, 10ea <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
    10d8:	2300      	movs	r3, #0
    10da:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
    10de:	2000      	movs	r0, #0
    10e0:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
    10e2:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
    10e4:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
    10e6:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
    10e8:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
    10ea:	4628      	mov	r0, r5
    10ec:	f7ff fea6 	bl	e3c <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
    10f0:	2300      	movs	r3, #0
    10f2:	7063      	strb	r3, [r4, #1]
    10f4:	e7f0      	b.n	10d8 <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
    10f6:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
    10f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    10fc:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
    1100:	2300      	movs	r3, #0
    1102:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
    1106:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
    110a:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    110e:	70e3      	strb	r3, [r4, #3]
    1110:	e7e5      	b.n	10de <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1112:	2016      	movs	r0, #22
}
    1114:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1116:	2016      	movs	r0, #22
    return rc;
    1118:	e7e6      	b.n	10e8 <hal_spi_disable+0x30>
    111a:	bf00      	nop
    111c:	00004ffc 	.word	0x00004ffc

00001120 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1120:	2802      	cmp	r0, #2
    1122:	dc1d      	bgt.n	1160 <hal_spi_init+0x40>
{
    1124:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1126:	4b13      	ldr	r3, [pc, #76]	; (1174 <hal_spi_init+0x54>)
    1128:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    112c:	b1d4      	cbz	r4, 1164 <hal_spi_init+0x44>
    if (cfg == NULL) {
    112e:	b1d9      	cbz	r1, 1168 <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
    1130:	2a01      	cmp	r2, #1
    1132:	d81b      	bhi.n	116c <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
    1134:	7022      	strb	r2, [r4, #0]
    if (spi_num == 0) {
    1136:	b9d8      	cbnz	r0, 1170 <hal_spi_init+0x50>
    1138:	460d      	mov	r5, r1
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
    113a:	2303      	movs	r3, #3
    113c:	7523      	strb	r3, [r4, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
    113e:	b94a      	cbnz	r2, 1154 <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
    1140:	4b0d      	ldr	r3, [pc, #52]	; (1178 <hal_spi_init+0x58>)
    1142:	6123      	str	r3, [r4, #16]
    hal_spi_disable(spi_num);
    1144:	f7ff ffb8 	bl	10b8 <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
    1148:	4a0c      	ldr	r2, [pc, #48]	; (117c <hal_spi_init+0x5c>)
    114a:	4629      	mov	r1, r5
    114c:	4620      	mov	r0, r4
    114e:	f7ff fea5 	bl	e9c <hal_spi_init_master>
    1152:	e00c      	b.n	116e <hal_spi_init+0x4e>
            assert(0);
    1154:	2300      	movs	r3, #0
    1156:	461a      	mov	r2, r3
    1158:	4619      	mov	r1, r3
    115a:	4618      	mov	r0, r3
    115c:	f000 fad6 	bl	170c <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1160:	2016      	movs	r0, #22
}
    1162:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1164:	2016      	movs	r0, #22
    1166:	e002      	b.n	116e <hal_spi_init+0x4e>
    rc = EINVAL;
    1168:	2016      	movs	r0, #22
    116a:	e000      	b.n	116e <hal_spi_init+0x4e>
    116c:	2016      	movs	r0, #22
}
    116e:	bd38      	pop	{r3, r4, r5, pc}
    rc = EINVAL;
    1170:	2016      	movs	r0, #22
    return (rc);
    1172:	e7fc      	b.n	116e <hal_spi_init+0x4e>
    1174:	00004ffc 	.word	0x00004ffc
    1178:	40003000 	.word	0x40003000
    117c:	00000e25 	.word	0x00000e25

00001180 <hal_spi_tx_val>:
    int rc;
    uint16_t retval;
    NRF_SPI_Type *spi;
    struct nrf52_hal_spi *hal_spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
    1180:	2802      	cmp	r0, #2
    1182:	dc17      	bgt.n	11b4 <hal_spi_tx_val+0x34>
    1184:	4b0f      	ldr	r3, [pc, #60]	; (11c4 <hal_spi_tx_val+0x44>)
    1186:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    118a:	b1ab      	cbz	r3, 11b8 <hal_spi_tx_val+0x38>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    118c:	781a      	ldrb	r2, [r3, #0]
    118e:	b9aa      	cbnz	r2, 11bc <hal_spi_tx_val+0x3c>
        spi = (NRF_SPI_Type *)hal_spi->nhs_spi.spim;
    1190:	691a      	ldr	r2, [r3, #16]
        spi->EVENTS_READY = 0;
    1192:	2300      	movs	r3, #0
    1194:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        spi->TXD = (uint8_t)val;
    1198:	b2c9      	uxtb	r1, r1
    119a:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
        while (!spi->EVENTS_READY) {}
    119e:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
    11a2:	2b00      	cmp	r3, #0
    11a4:	d0fb      	beq.n	119e <hal_spi_tx_val+0x1e>
        spi->EVENTS_READY = 0;
    11a6:	2300      	movs	r3, #0
    11a8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        retval = (uint16_t)spi->RXD;
    11ac:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    11b0:	b280      	uxth	r0, r0
    11b2:	4770      	bx	lr
    }

    return retval;

err:
    return rc;
    11b4:	2016      	movs	r0, #22
    11b6:	4770      	bx	lr
    11b8:	2016      	movs	r0, #22
    11ba:	4770      	bx	lr
        retval = 0xFFFF;
    11bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    11c0:	4770      	bx	lr
    11c2:	bf00      	nop
    11c4:	00004ffc 	.word	0x00004ffc

000011c8 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    11c8:	2802      	cmp	r0, #2
    11ca:	dc0a      	bgt.n	11e2 <hal_spi_set_txrx_cb+0x1a>
    11cc:	4b08      	ldr	r3, [pc, #32]	; (11f0 <hal_spi_set_txrx_cb+0x28>)
    11ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    11d2:	b143      	cbz	r3, 11e6 <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
    11d4:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
    11d6:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
    11da:	b930      	cbnz	r0, 11ea <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
    11dc:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
    11de:	625a      	str	r2, [r3, #36]	; 0x24
    11e0:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    11e2:	2016      	movs	r0, #22
    11e4:	4770      	bx	lr
    11e6:	2016      	movs	r0, #22
    11e8:	4770      	bx	lr
        rc = -1;
    11ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
    11ee:	4770      	bx	lr
    11f0:	00004ffc 	.word	0x00004ffc

000011f4 <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
    11f4:	2b00      	cmp	r3, #0
    11f6:	d046      	beq.n	1286 <hal_spi_txrx+0x92>
{
    11f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11fa:	460d      	mov	r5, r1
    11fc:	4617      	mov	r7, r2
    11fe:	461e      	mov	r6, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
    1200:	2802      	cmp	r0, #2
    1202:	dc42      	bgt.n	128a <hal_spi_txrx+0x96>
    1204:	4b25      	ldr	r3, [pc, #148]	; (129c <hal_spi_txrx+0xa8>)
    1206:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    120a:	2b00      	cmp	r3, #0
    120c:	d03f      	beq.n	128e <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    120e:	781a      	ldrb	r2, [r3, #0]
    1210:	2a00      	cmp	r2, #0
    1212:	d13e      	bne.n	1292 <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
    1214:	2900      	cmp	r1, #0
    1216:	d03e      	beq.n	1296 <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
    1218:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
    121a:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
    121e:	2b07      	cmp	r3, #7
    1220:	d004      	beq.n	122c <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
    1222:	b95b      	cbnz	r3, 123c <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    1224:	2301      	movs	r3, #1
    1226:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    122a:	e007      	b.n	123c <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
    122c:	f7ff ff44 	bl	10b8 <hal_spi_disable>
    1230:	e7f8      	b.n	1224 <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
    1232:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
    1236:	2300      	movs	r3, #0
    1238:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
    123c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    1240:	2b00      	cmp	r3, #0
    1242:	d1f6      	bne.n	1232 <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
    1244:	782b      	ldrb	r3, [r5, #0]
    1246:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
    124a:	1e71      	subs	r1, r6, #1
        rxd = (uint8_t *)rxbuf;
    124c:	4638      	mov	r0, r7
        for (i = 0; i < len; ++i) {
    124e:	2200      	movs	r2, #0
    1250:	e00d      	b.n	126e <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
    1252:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    1256:	2b00      	cmp	r3, #0
    1258:	d0fb      	beq.n	1252 <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
    125a:	2300      	movs	r3, #0
    125c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
    1260:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
    1264:	b2db      	uxtb	r3, r3
            if (rxbuf) {
    1266:	b10f      	cbz	r7, 126c <hal_spi_txrx+0x78>
                *rxd = rxval;
    1268:	f800 3b01 	strb.w	r3, [r0], #1
        for (i = 0; i < len; ++i) {
    126c:	3201      	adds	r2, #1
    126e:	42b2      	cmp	r2, r6
    1270:	da07      	bge.n	1282 <hal_spi_txrx+0x8e>
            if (txcnt) {
    1272:	2900      	cmp	r1, #0
    1274:	d0ed      	beq.n	1252 <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
    1276:	786b      	ldrb	r3, [r5, #1]
    1278:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
    127c:	3901      	subs	r1, #1
                ++txd;
    127e:	3501      	adds	r5, #1
    1280:	e7e7      	b.n	1252 <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
    1282:	2000      	movs	r0, #0
    }

err:
    return rc;
}
    1284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
    1286:	2016      	movs	r0, #22
}
    1288:	4770      	bx	lr
    return rc;
    128a:	2016      	movs	r0, #22
    128c:	e7fa      	b.n	1284 <hal_spi_txrx+0x90>
    128e:	2016      	movs	r0, #22
    1290:	e7f8      	b.n	1284 <hal_spi_txrx+0x90>
    1292:	2016      	movs	r0, #22
    1294:	e7f6      	b.n	1284 <hal_spi_txrx+0x90>
    1296:	2016      	movs	r0, #22
    1298:	e7f4      	b.n	1284 <hal_spi_txrx+0x90>
    129a:	bf00      	nop
    129c:	00004ffc 	.word	0x00004ffc

000012a0 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
    12a0:	b508      	push	{r3, lr}
    assert(0);
    12a2:	2300      	movs	r3, #0
    12a4:	461a      	mov	r2, r3
    12a6:	4619      	mov	r1, r3
    12a8:	4618      	mov	r0, r3
    12aa:	f000 fa2f 	bl	170c <__assert_func>
	...

000012b0 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
    12b0:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
    12b2:	4b06      	ldr	r3, [pc, #24]	; (12cc <nrf52_wdt_irq_handler+0x1c>)
    12b4:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    12b8:	f013 0f01 	tst.w	r3, #1
    12bc:	d100      	bne.n	12c0 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
    12be:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
    12c0:	4b02      	ldr	r3, [pc, #8]	; (12cc <nrf52_wdt_irq_handler+0x1c>)
    12c2:	2200      	movs	r2, #0
    12c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
    12c8:	f7ff ffea 	bl	12a0 <nrf52_hal_wdt_default_handler>
    12cc:	40010000 	.word	0x40010000

000012d0 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
    12d0:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
    12d2:	4b17      	ldr	r3, [pc, #92]	; (1330 <hal_watchdog_init+0x60>)
    12d4:	2201      	movs	r2, #1
    12d6:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
    12da:	4b16      	ldr	r3, [pc, #88]	; (1334 <hal_watchdog_init+0x64>)
    12dc:	4298      	cmp	r0, r3
    12de:	d821      	bhi.n	1324 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
    12e0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    12e4:	0153      	lsls	r3, r2, #5
    12e6:	4a14      	ldr	r2, [pc, #80]	; (1338 <hal_watchdog_init+0x68>)
    12e8:	fba2 2303 	umull	r2, r3, r2, r3
    12ec:	08db      	lsrs	r3, r3, #3
    12ee:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    12f2:	4b0f      	ldr	r3, [pc, #60]	; (1330 <hal_watchdog_init+0x60>)
    12f4:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
    12f8:	4a10      	ldr	r2, [pc, #64]	; (133c <hal_watchdog_init+0x6c>)
    12fa:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    12fc:	4910      	ldr	r1, [pc, #64]	; (1340 <hal_watchdog_init+0x70>)
    12fe:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1302:	4a10      	ldr	r2, [pc, #64]	; (1344 <hal_watchdog_init+0x74>)
    1304:	21e0      	movs	r1, #224	; 0xe0
    1306:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    130a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    130e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1312:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
    1314:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
    1318:	f042 0201 	orr.w	r2, r2, #1
    131c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
    1320:	2000      	movs	r0, #0
    1322:	bd08      	pop	{r3, pc}
        assert(0);
    1324:	2300      	movs	r3, #0
    1326:	461a      	mov	r2, r3
    1328:	4619      	mov	r1, r3
    132a:	4618      	mov	r0, r3
    132c:	f000 f9ee 	bl	170c <__assert_func>
    1330:	40010000 	.word	0x40010000
    1334:	02aaaaaa 	.word	0x02aaaaaa
    1338:	10624dd3 	.word	0x10624dd3
    133c:	e000ed00 	.word	0xe000ed00
    1340:	000012b1 	.word	0x000012b1
    1344:	e000e100 	.word	0xe000e100

00001348 <nrf52_periph_create_timers>:
};
#endif

static void
nrf52_periph_create_timers(void)
{
    1348:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
    134a:	2100      	movs	r1, #0
    134c:	4608      	mov	r0, r1
    134e:	f000 f919 	bl	1584 <hal_timer_init>
    assert(rc == 0);
    1352:	b920      	cbnz	r0, 135e <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
    1354:	4808      	ldr	r0, [pc, #32]	; (1378 <nrf52_periph_create_timers+0x30>)
    1356:	f000 fa4b 	bl	17f0 <os_cputime_init>
    assert(rc == 0);
    135a:	b930      	cbnz	r0, 136a <nrf52_periph_create_timers+0x22>
#endif
}
    135c:	bd08      	pop	{r3, pc}
    assert(rc == 0);
    135e:	2300      	movs	r3, #0
    1360:	461a      	mov	r2, r3
    1362:	4619      	mov	r1, r3
    1364:	4618      	mov	r0, r3
    1366:	f000 f9d1 	bl	170c <__assert_func>
    assert(rc == 0);
    136a:	2300      	movs	r3, #0
    136c:	461a      	mov	r2, r3
    136e:	4619      	mov	r1, r3
    1370:	4618      	mov	r0, r3
    1372:	f000 f9cb 	bl	170c <__assert_func>
    1376:	bf00      	nop
    1378:	000f4240 	.word	0x000f4240

0000137c <nrf52_periph_create_spi>:
#endif
}

static void
nrf52_periph_create_spi(void)
{
    137c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
    137e:	2200      	movs	r2, #0
    1380:	4905      	ldr	r1, [pc, #20]	; (1398 <nrf52_periph_create_spi+0x1c>)
    1382:	4610      	mov	r0, r2
    1384:	f7ff fecc 	bl	1120 <hal_spi_init>
    assert(rc == 0);
    1388:	b900      	cbnz	r0, 138c <nrf52_periph_create_spi+0x10>
#endif
#if MYNEWT_VAL(SPI_2_SLAVE)
    rc = hal_spi_init(2, (void *)&os_bsp_spi2s_cfg, HAL_SPI_TYPE_SLAVE);
    assert(rc == 0);
#endif
}
    138a:	bd08      	pop	{r3, pc}
    assert(rc == 0);
    138c:	2300      	movs	r3, #0
    138e:	461a      	mov	r2, r3
    1390:	4619      	mov	r1, r3
    1392:	4618      	mov	r0, r3
    1394:	f000 f9ba 	bl	170c <__assert_func>
    1398:	00005008 	.word	0x00005008

0000139c <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
    139c:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
    139e:	f7ff ffd3 	bl	1348 <nrf52_periph_create_timers>
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
    nrf52_periph_create_spi();
    13a2:	f7ff ffeb 	bl	137c <nrf52_periph_create_spi>
}
    13a6:	bd08      	pop	{r3, pc}

000013a8 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
    13a8:	2301      	movs	r3, #1
    13aa:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
    13ac:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
    13b0:	4770      	bx	lr
	...

000013b4 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
    13b4:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
    13b6:	7883      	ldrb	r3, [r0, #2]
    13b8:	b393      	cbz	r3, 1420 <nrf_timer_set_ocmp+0x6c>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
    13ba:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    13bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    13c0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
    13c4:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
    13c6:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
    13ca:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
    13ce:	b11d      	cbz	r5, 13d8 <nrf_timer_set_ocmp+0x24>
            temp += (1UL << 24);
    13d0:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
    13d4:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
    13d8:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
    13da:	1acb      	subs	r3, r1, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
    13dc:	2b02      	cmp	r3, #2
    13de:	dc0e      	bgt.n	13fe <nrf_timer_set_ocmp+0x4a>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    13e0:	7842      	ldrb	r2, [r0, #1]
    13e2:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    13e4:	2b00      	cmp	r3, #0
    13e6:	db15      	blt.n	1414 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13e8:	f002 021f 	and.w	r2, r2, #31
    13ec:	095b      	lsrs	r3, r3, #5
    13ee:	2101      	movs	r1, #1
    13f0:	fa01 f202 	lsl.w	r2, r1, r2
    13f4:	3340      	adds	r3, #64	; 0x40
    13f6:	491b      	ldr	r1, [pc, #108]	; (1464 <nrf_timer_set_ocmp+0xb0>)
    13f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    13fc:	e00a      	b.n	1414 <nrf_timer_set_ocmp+0x60>
        } else  {
            if (delta_t < (1UL << 24)) {
    13fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    1402:	d208      	bcs.n	1416 <nrf_timer_set_ocmp+0x62>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
    1404:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1408:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    140c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1410:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
    1414:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
    1416:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
    141a:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
    141e:	e7f5      	b.n	140c <nrf_timer_set_ocmp+0x58>
    1420:	460d      	mov	r5, r1
    1422:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
    1424:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    1426:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    142a:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
    142e:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
    1432:	2200      	movs	r2, #0
    1434:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    1438:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
    143c:	f7ff ffb4 	bl	13a8 <nrf_read_timer_cntr>
    1440:	1b40      	subs	r0, r0, r5
    1442:	2800      	cmp	r0, #0
    1444:	dbe6      	blt.n	1414 <nrf_timer_set_ocmp+0x60>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    1446:	7862      	ldrb	r2, [r4, #1]
    1448:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    144a:	2b00      	cmp	r3, #0
    144c:	dbe2      	blt.n	1414 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    144e:	f002 021f 	and.w	r2, r2, #31
    1452:	095b      	lsrs	r3, r3, #5
    1454:	2101      	movs	r1, #1
    1456:	fa01 f202 	lsl.w	r2, r1, r2
    145a:	3340      	adds	r3, #64	; 0x40
    145c:	4901      	ldr	r1, [pc, #4]	; (1464 <nrf_timer_set_ocmp+0xb0>)
    145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    1462:	e7d7      	b.n	1414 <nrf_timer_set_ocmp+0x60>
    1464:	e000e100 	.word	0xe000e100

00001468 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    1468:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    146c:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
    1470:	4770      	bx	lr

00001472 <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    1472:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1476:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
    147a:	4770      	bx	lr

0000147c <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
    147c:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
    147e:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1480:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    1484:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
    1486:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
    1488:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
    148c:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
    1490:	b1ad      	cbz	r5, 14be <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
    1492:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
    1496:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
    1498:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
    149c:	2500      	movs	r5, #0
    149e:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    14a2:	7840      	ldrb	r0, [r0, #1]
    14a4:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
    14a6:	42aa      	cmp	r2, r5
    14a8:	db09      	blt.n	14be <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14aa:	f000 001f 	and.w	r0, r0, #31
    14ae:	0952      	lsrs	r2, r2, #5
    14b0:	2501      	movs	r5, #1
    14b2:	fa05 f000 	lsl.w	r0, r5, r0
    14b6:	3240      	adds	r2, #64	; 0x40
    14b8:	4d04      	ldr	r5, [pc, #16]	; (14cc <hal_timer_read_bsptimer+0x50>)
    14ba:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
    14be:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
    14c2:	b904      	cbnz	r4, 14c6 <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
    14c4:	b662      	cpsie	i

    return tcntr;
}
    14c6:	bc30      	pop	{r4, r5}
    14c8:	4770      	bx	lr
    14ca:	bf00      	nop
    14cc:	e000e100 	.word	0xe000e100

000014d0 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
    14d0:	b570      	push	{r4, r5, r6, lr}
    14d2:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    14d4:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    14d8:	b672      	cpsid	i
    14da:	e013      	b.n	1504 <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
    14dc:	6928      	ldr	r0, [r5, #16]
    14de:	f7ff ff63 	bl	13a8 <nrf_read_timer_cntr>
            delta = 0;
    14e2:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
    14e4:	68e3      	ldr	r3, [r4, #12]
    14e6:	1ac0      	subs	r0, r0, r3
    14e8:	4290      	cmp	r0, r2
    14ea:	db19      	blt.n	1520 <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
    14ec:	6923      	ldr	r3, [r4, #16]
    14ee:	b1a3      	cbz	r3, 151a <hal_timer_chk_queue+0x4a>
    14f0:	6962      	ldr	r2, [r4, #20]
    14f2:	615a      	str	r2, [r3, #20]
    14f4:	6963      	ldr	r3, [r4, #20]
    14f6:	6922      	ldr	r2, [r4, #16]
    14f8:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
    14fa:	2300      	movs	r3, #0
    14fc:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
    14fe:	6863      	ldr	r3, [r4, #4]
    1500:	68a0      	ldr	r0, [r4, #8]
    1502:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
    1504:	696c      	ldr	r4, [r5, #20]
    1506:	b15c      	cbz	r4, 1520 <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
    1508:	78ab      	ldrb	r3, [r5, #2]
    150a:	2b00      	cmp	r3, #0
    150c:	d0e6      	beq.n	14dc <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
    150e:	4628      	mov	r0, r5
    1510:	f7ff ffb4 	bl	147c <hal_timer_read_bsptimer>
            delta = -3;
    1514:	f06f 0202 	mvn.w	r2, #2
    1518:	e7e4      	b.n	14e4 <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
    151a:	6963      	ldr	r3, [r4, #20]
    151c:	61ab      	str	r3, [r5, #24]
    151e:	e7e9      	b.n	14f4 <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
    1520:	696b      	ldr	r3, [r5, #20]
    if (timer) {
    1522:	b133      	cbz	r3, 1532 <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
    1524:	68d9      	ldr	r1, [r3, #12]
    1526:	4628      	mov	r0, r5
    1528:	f7ff ff44 	bl	13b4 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
    152c:	b906      	cbnz	r6, 1530 <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
    152e:	b662      	cpsie	i
}
    1530:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
    1532:	78ab      	ldrb	r3, [r5, #2]
    1534:	b11b      	cbz	r3, 153e <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
    1536:	6928      	ldr	r0, [r5, #16]
    1538:	f7ff ff9b 	bl	1472 <nrf_rtc_disable_ocmp>
    153c:	e7f6      	b.n	152c <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
    153e:	6928      	ldr	r0, [r5, #16]
    1540:	f7ff ff92 	bl	1468 <nrf_timer_disable_ocmp>
    1544:	e7f2      	b.n	152c <hal_timer_chk_queue+0x5c>

00001546 <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
    1546:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
    1548:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    154a:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
    154e:	b113      	cbz	r3, 1556 <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
    1550:	2300      	movs	r3, #0
    1552:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
    1556:	6883      	ldr	r3, [r0, #8]
    1558:	3301      	adds	r3, #1
    155a:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
    155c:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
    1560:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    1564:	d100      	bne.n	1568 <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
    1566:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
    1568:	f7ff ffb2 	bl	14d0 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    156c:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
    1570:	e7f9      	b.n	1566 <hal_timer_irq_handler+0x20>
	...

00001574 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
    1574:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
    1576:	4802      	ldr	r0, [pc, #8]	; (1580 <nrf52_timer0_irq_handler+0xc>)
    1578:	f7ff ffe5 	bl	1546 <hal_timer_irq_handler>
}
    157c:	bd08      	pop	{r3, pc}
    157e:	bf00      	nop
    1580:	200063e4 	.word	0x200063e4

00001584 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    1584:	2805      	cmp	r0, #5
    1586:	dc1c      	bgt.n	15c2 <hal_timer_init+0x3e>
    1588:	4b12      	ldr	r3, [pc, #72]	; (15d4 <hal_timer_init+0x50>)
    158a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    158e:	b1d3      	cbz	r3, 15c6 <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
    1590:	781a      	ldrb	r2, [r3, #0]
    1592:	b9d2      	cbnz	r2, 15ca <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
    1594:	b9d8      	cbnz	r0, 15ce <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
    1596:	4a10      	ldr	r2, [pc, #64]	; (15d8 <hal_timer_init+0x54>)
    1598:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
    159a:	2208      	movs	r2, #8
    159c:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    159e:	4b0f      	ldr	r3, [pc, #60]	; (15dc <hal_timer_init+0x58>)
    15a0:	f44f 7280 	mov.w	r2, #256	; 0x100
    15a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    15a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    15ac:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    15b0:	22e0      	movs	r2, #224	; 0xe0
    15b2:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
    15b6:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
    15ba:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    15bc:	4a08      	ldr	r2, [pc, #32]	; (15e0 <hal_timer_init+0x5c>)
    15be:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
    15c0:	4770      	bx	lr

err:
    return rc;
    15c2:	2016      	movs	r0, #22
    15c4:	4770      	bx	lr
    15c6:	2016      	movs	r0, #22
    15c8:	4770      	bx	lr
    15ca:	2016      	movs	r0, #22
    15cc:	4770      	bx	lr
    15ce:	2016      	movs	r0, #22
}
    15d0:	4770      	bx	lr
    15d2:	bf00      	nop
    15d4:	0000500c 	.word	0x0000500c
    15d8:	40008000 	.word	0x40008000
    15dc:	e000e100 	.word	0xe000e100
    15e0:	00001575 	.word	0x00001575

000015e4 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    15e4:	2805      	cmp	r0, #5
    15e6:	dc65      	bgt.n	16b4 <hal_timer_config+0xd0>
    15e8:	4b39      	ldr	r3, [pc, #228]	; (16d0 <hal_timer_config+0xec>)
    15ea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    15ee:	2800      	cmp	r0, #0
    15f0:	d062      	beq.n	16b8 <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
    15f2:	4b38      	ldr	r3, [pc, #224]	; (16d4 <hal_timer_config+0xf0>)
    15f4:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
    15f8:	7803      	ldrb	r3, [r0, #0]
    15fa:	2b00      	cmp	r3, #0
    15fc:	d15e      	bne.n	16bc <hal_timer_config+0xd8>
    15fe:	2900      	cmp	r1, #0
    1600:	d05e      	beq.n	16c0 <hal_timer_config+0xdc>
    1602:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1606:	d85d      	bhi.n	16c4 <hal_timer_config+0xe0>
        (bsptimer->tmr_reg == NULL)) {
    1608:	6902      	ldr	r2, [r0, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
    160a:	2a00      	cmp	r2, #0
    160c:	d05c      	beq.n	16c8 <hal_timer_config+0xe4>
{
    160e:	b430      	push	{r4, r5}
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
    1610:	2901      	cmp	r1, #1
    1612:	d013      	beq.n	163c <hal_timer_config+0x58>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
    1614:	2301      	movs	r3, #1
    1616:	2b09      	cmp	r3, #9
    1618:	d810      	bhi.n	163c <hal_timer_config+0x58>
            if (div <= (1 << prescaler)) {
    161a:	2201      	movs	r2, #1
    161c:	409a      	lsls	r2, r3
    161e:	428a      	cmp	r2, r1
    1620:	d202      	bcs.n	1628 <hal_timer_config+0x44>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
    1622:	3301      	adds	r3, #1
    1624:	b2db      	uxtb	r3, r3
    1626:	e7f6      	b.n	1616 <hal_timer_config+0x32>
                min_delta = div - (1 << (prescaler - 1));
    1628:	1e5c      	subs	r4, r3, #1
    162a:	2501      	movs	r5, #1
    162c:	fa05 f404 	lsl.w	r4, r5, r4
    1630:	1b0c      	subs	r4, r1, r4
                max_delta = (1 << prescaler) - div;
    1632:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
    1634:	428c      	cmp	r4, r1
    1636:	d201      	bcs.n	163c <hal_timer_config+0x58>
                    prescaler -= 1;
    1638:	3b01      	subs	r3, #1
    163a:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
    163c:	4a25      	ldr	r2, [pc, #148]	; (16d4 <hal_timer_config+0xf0>)
    163e:	411a      	asrs	r2, r3
    1640:	60c2      	str	r2, [r0, #12]
    bsptimer->tmr_enabled = 1;
    1642:	2201      	movs	r2, #1
    1644:	7002      	strb	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1646:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    164a:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
    164c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1650:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
    1654:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
    1658:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
    165c:	d00c      	beq.n	1678 <hal_timer_config+0x94>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    165e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1662:	2100      	movs	r1, #0
    1664:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1668:	2101      	movs	r1, #1
    166a:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
    166c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1670:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
    1674:	2a00      	cmp	r2, #0
    1676:	d0f9      	beq.n	166c <hal_timer_config+0x88>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
    1678:	6902      	ldr	r2, [r0, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
    167a:	2101      	movs	r1, #1
    167c:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
    167e:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
    1680:	2500      	movs	r5, #0
    1682:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
    1686:	2503      	movs	r5, #3
    1688:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
    168c:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
    1690:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
    1692:	7842      	ldrb	r2, [r0, #1]
    1694:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    1696:	2b00      	cmp	r3, #0
    1698:	db07      	blt.n	16aa <hal_timer_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    169a:	f002 021f 	and.w	r2, r2, #31
    169e:	095b      	lsrs	r3, r3, #5
    16a0:	fa01 f202 	lsl.w	r2, r1, r2
    16a4:	490c      	ldr	r1, [pc, #48]	; (16d8 <hal_timer_config+0xf4>)
    16a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
    16aa:	b97c      	cbnz	r4, 16cc <hal_timer_config+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
    16ac:	b662      	cpsie	i

    return 0;
    16ae:	2000      	movs	r0, #0

err:
    return rc;
}
    16b0:	bc30      	pop	{r4, r5}
    16b2:	4770      	bx	lr
    return rc;
    16b4:	2016      	movs	r0, #22
    16b6:	4770      	bx	lr
    16b8:	2016      	movs	r0, #22
    16ba:	4770      	bx	lr
    16bc:	2016      	movs	r0, #22
    16be:	4770      	bx	lr
    16c0:	2016      	movs	r0, #22
    16c2:	4770      	bx	lr
    16c4:	2016      	movs	r0, #22
    16c6:	4770      	bx	lr
    16c8:	2016      	movs	r0, #22
}
    16ca:	4770      	bx	lr
    return 0;
    16cc:	2000      	movs	r0, #0
    16ce:	e7ef      	b.n	16b0 <hal_timer_config+0xcc>
    16d0:	0000500c 	.word	0x0000500c
    16d4:	00f42400 	.word	0x00f42400
    16d8:	e000e100 	.word	0xe000e100

000016dc <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
    16dc:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    16de:	2805      	cmp	r0, #5
    16e0:	dc0c      	bgt.n	16fc <hal_timer_read+0x20>
    16e2:	4b09      	ldr	r3, [pc, #36]	; (1708 <hal_timer_read+0x2c>)
    16e4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    16e8:	b140      	cbz	r0, 16fc <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
    16ea:	7883      	ldrb	r3, [r0, #2]
    16ec:	b91b      	cbnz	r3, 16f6 <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
    16ee:	6900      	ldr	r0, [r0, #16]
    16f0:	f7ff fe5a 	bl	13a8 <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
    16f4:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
    16f6:	f7ff fec1 	bl	147c <hal_timer_read_bsptimer>
    16fa:	e7fb      	b.n	16f4 <hal_timer_read+0x18>
    assert(0);
    16fc:	2300      	movs	r3, #0
    16fe:	461a      	mov	r2, r3
    1700:	4619      	mov	r1, r3
    1702:	4618      	mov	r0, r3
    1704:	f000 f802 	bl	170c <__assert_func>
    1708:	0000500c 	.word	0x0000500c

0000170c <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
    170c:	b508      	push	{r3, lr}
    170e:	4675      	mov	r5, lr
    1710:	4604      	mov	r4, r0
    1712:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
    1714:	f000 f8b5 	bl	1882 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
    1718:	f000 fd63 	bl	21e2 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
    171c:	b18c      	cbz	r4, 1742 <__assert_func+0x36>
    171e:	4633      	mov	r3, r6
    1720:	4622      	mov	r2, r4
    1722:	4629      	mov	r1, r5
    1724:	4809      	ldr	r0, [pc, #36]	; (174c <__assert_func+0x40>)
    1726:	f000 fd7d 	bl	2224 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
    172a:	f7fe fd1b 	bl	164 <hal_debugger_connected>
    172e:	b100      	cbz	r0, 1732 <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
    1730:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
    1732:	4b07      	ldr	r3, [pc, #28]	; (1750 <__assert_func+0x44>)
    1734:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1738:	605a      	str	r2, [r3, #4]
    asm("isb");
    173a:	f3bf 8f6f 	isb	sy
    hal_system_reset();
    173e:	f7fe fd19 	bl	174 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
    1742:	4629      	mov	r1, r5
    1744:	4803      	ldr	r0, [pc, #12]	; (1754 <__assert_func+0x48>)
    1746:	f000 fd6d 	bl	2224 <console_printf>
    174a:	e7ee      	b.n	172a <__assert_func+0x1e>
    174c:	00005034 	.word	0x00005034
    1750:	e000ed00 	.word	0xe000ed00
    1754:	00005024 	.word	0x00005024

00001758 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
    1758:	b500      	push	{lr}
    175a:	b083      	sub	sp, #12
    175c:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    175e:	f000 fd40 	bl	21e2 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    1762:	4d1b      	ldr	r5, [pc, #108]	; (17d0 <os_default_irq+0x78>)
    1764:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
    1766:	6822      	ldr	r2, [r4, #0]
    1768:	f3c1 0108 	ubfx	r1, r1, #0, #9
    176c:	4819      	ldr	r0, [pc, #100]	; (17d4 <os_default_irq+0x7c>)
    176e:	f000 fd59 	bl	2224 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
    1772:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
    1774:	6883      	ldr	r3, [r0, #8]
    1776:	6842      	ldr	r2, [r0, #4]
    1778:	6801      	ldr	r1, [r0, #0]
    177a:	68c0      	ldr	r0, [r0, #12]
    177c:	9000      	str	r0, [sp, #0]
    177e:	4816      	ldr	r0, [pc, #88]	; (17d8 <os_default_irq+0x80>)
    1780:	f000 fd50 	bl	2224 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
    1784:	6923      	ldr	r3, [r4, #16]
    1786:	9300      	str	r3, [sp, #0]
    1788:	68e3      	ldr	r3, [r4, #12]
    178a:	68a2      	ldr	r2, [r4, #8]
    178c:	6861      	ldr	r1, [r4, #4]
    178e:	4813      	ldr	r0, [pc, #76]	; (17dc <os_default_irq+0x84>)
    1790:	f000 fd48 	bl	2224 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
    1794:	6a23      	ldr	r3, [r4, #32]
    1796:	9300      	str	r3, [sp, #0]
    1798:	69e3      	ldr	r3, [r4, #28]
    179a:	69a2      	ldr	r2, [r4, #24]
    179c:	6961      	ldr	r1, [r4, #20]
    179e:	4810      	ldr	r0, [pc, #64]	; (17e0 <os_default_irq+0x88>)
    17a0:	f000 fd40 	bl	2224 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    17a4:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
    17a6:	6983      	ldr	r3, [r0, #24]
    17a8:	6942      	ldr	r2, [r0, #20]
    17aa:	6901      	ldr	r1, [r0, #16]
    17ac:	69c0      	ldr	r0, [r0, #28]
    17ae:	9000      	str	r0, [sp, #0]
    17b0:	480c      	ldr	r0, [pc, #48]	; (17e4 <os_default_irq+0x8c>)
    17b2:	f000 fd37 	bl	2224 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
    17b6:	6869      	ldr	r1, [r5, #4]
    17b8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    17ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
    17bc:	480a      	ldr	r0, [pc, #40]	; (17e8 <os_default_irq+0x90>)
    17be:	f000 fd31 	bl	2224 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
    17c2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    17c4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    17c6:	4809      	ldr	r0, [pc, #36]	; (17ec <os_default_irq+0x94>)
    17c8:	f000 fd2c 	bl	2224 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
    17cc:	f7fe fcd2 	bl	174 <hal_system_reset>
    17d0:	e000ed00 	.word	0xe000ed00
    17d4:	0000504c 	.word	0x0000504c
    17d8:	00005080 	.word	0x00005080
    17dc:	000050b4 	.word	0x000050b4
    17e0:	000050e8 	.word	0x000050e8
    17e4:	0000511c 	.word	0x0000511c
    17e8:	00005150 	.word	0x00005150
    17ec:	00005178 	.word	0x00005178

000017f0 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
    17f0:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
    17f2:	4601      	mov	r1, r0
    17f4:	2000      	movs	r0, #0
    17f6:	f7ff fef5 	bl	15e4 <hal_timer_config>
    return rc;
}
    17fa:	bd08      	pop	{r3, pc}

000017fc <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
    17fc:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
    17fe:	2000      	movs	r0, #0
    1800:	f7ff ff6c 	bl	16dc <hal_timer_read>
    return cpu_time;
}
    1804:	bd08      	pop	{r3, pc}

00001806 <os_cputime_delay_ticks>:
{
    1806:	b510      	push	{r4, lr}
    1808:	4604      	mov	r4, r0
    until = os_cputime_get32() + ticks;
    180a:	f7ff fff7 	bl	17fc <os_cputime_get32>
    180e:	4404      	add	r4, r0
    while ((int32_t)(os_cputime_get32() - until) < 0) {
    1810:	f7ff fff4 	bl	17fc <os_cputime_get32>
    1814:	1b00      	subs	r0, r0, r4
    1816:	2800      	cmp	r0, #0
    1818:	dbfa      	blt.n	1810 <os_cputime_delay_ticks+0xa>
}
    181a:	bd10      	pop	{r4, pc}

0000181c <os_cputime_delay_usecs>:
{
    181c:	b508      	push	{r3, lr}
    os_cputime_delay_ticks(ticks);
    181e:	f7ff fff2 	bl	1806 <os_cputime_delay_ticks>
}
    1822:	bd08      	pop	{r3, pc}

00001824 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
    1824:	b510      	push	{r4, lr}
    1826:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
    1828:	6903      	ldr	r3, [r0, #16]
    182a:	6941      	ldr	r1, [r0, #20]
    182c:	4798      	blx	r3
    if (rc != 0) {
    182e:	4603      	mov	r3, r0
    1830:	b128      	cbz	r0, 183e <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
    1832:	7ee2      	ldrb	r2, [r4, #27]
    1834:	f012 0f08 	tst.w	r2, #8
    1838:	d105      	bne.n	1846 <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
    183a:	2300      	movs	r3, #0
    183c:	e003      	b.n	1846 <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    183e:	7ee2      	ldrb	r2, [r4, #27]
    1840:	f042 0201 	orr.w	r2, r2, #1
    1844:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
    1846:	4618      	mov	r0, r3
    1848:	bd10      	pop	{r4, pc}
	...

0000184c <os_dev_initialize_all>:
    return (rc);
}

int
os_dev_initialize_all(uint8_t stage)
{
    184c:	b538      	push	{r3, r4, r5, lr}
    184e:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    1850:	4b08      	ldr	r3, [pc, #32]	; (1874 <os_dev_initialize_all+0x28>)
    1852:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
    1854:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    1856:	e000      	b.n	185a <os_dev_initialize_all+0xe>
    1858:	6a24      	ldr	r4, [r4, #32]
    185a:	b144      	cbz	r4, 186e <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
    185c:	7e23      	ldrb	r3, [r4, #24]
    185e:	42ab      	cmp	r3, r5
    1860:	d1fa      	bne.n	1858 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
    1862:	4620      	mov	r0, r4
    1864:	f7ff ffde 	bl	1824 <os_dev_initialize>
            if (rc) {
    1868:	4602      	mov	r2, r0
    186a:	2800      	cmp	r0, #0
    186c:	d0f4      	beq.n	1858 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
    186e:	4610      	mov	r0, r2
    1870:	bd38      	pop	{r3, r4, r5, pc}
    1872:	bf00      	nop
    1874:	2000015c 	.word	0x2000015c

00001878 <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
    1878:	b508      	push	{r3, lr}
    os_time_advance(1);
    187a:	2001      	movs	r0, #1
    187c:	f000 f904 	bl	1a88 <os_time_advance>
}
    1880:	bd08      	pop	{r3, pc}

00001882 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1882:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    1886:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
    1888:	f000 0001 	and.w	r0, r0, #1
    188c:	4770      	bx	lr

0000188e <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
    188e:	b900      	cbnz	r0, 1892 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
    1890:	b662      	cpsie	i
        __enable_irq();
    }
}
    1892:	4770      	bx	lr

00001894 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
    1894:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
    1896:	2003      	movs	r0, #3
    1898:	f7ff ffd8 	bl	184c <os_dev_initialize_all>
    189c:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
    189e:	b920      	cbnz	r0, 18aa <os_pkg_init+0x16>

    os_mempool_module_init();
    18a0:	f000 f87a 	bl	1998 <os_mempool_module_init>
    os_msys_init();
    18a4:	f000 f8d0 	bl	1a48 <os_msys_init>
}
    18a8:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
    18aa:	2300      	movs	r3, #0
    18ac:	461a      	mov	r2, r3
    18ae:	4619      	mov	r1, r3
    18b0:	4618      	mov	r0, r3
    18b2:	f7ff ff2b 	bl	170c <__assert_func>

000018b6 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
    18b6:	2200      	movs	r2, #0
    18b8:	6002      	str	r2, [r0, #0]
    18ba:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
    18bc:	4603      	mov	r3, r0
    18be:	f843 2f08 	str.w	r2, [r3, #8]!
    18c2:	60c3      	str	r3, [r0, #12]
}
    18c4:	4770      	bx	lr
	...

000018c8 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
    18c8:	2800      	cmp	r0, #0
    18ca:	d031      	beq.n	1930 <os_mempool_init_internal+0x68>
{
    18cc:	b430      	push	{r4, r5}
    18ce:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
    18d0:	2a00      	cmp	r2, #0
    18d2:	d02f      	beq.n	1934 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
    18d4:	b1bb      	cbz	r3, 1906 <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
    18d6:	b113      	cbz	r3, 18de <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
    18d8:	f013 0f03 	tst.w	r3, #3
    18dc:	d12c      	bne.n	1938 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    18de:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
    18e0:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
    18e2:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
    18e4:	f89d 000c 	ldrb.w	r0, [sp, #12]
    18e8:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
    18ea:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
    18ec:	60e3      	str	r3, [r4, #12]
    mp->name = name;
    18ee:	9802      	ldr	r0, [sp, #8]
    18f0:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
    18f2:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
    18f4:	b199      	cbz	r1, 191e <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    18f6:	f012 0f03 	tst.w	r2, #3
    18fa:	d002      	beq.n	1902 <os_mempool_init_internal+0x3a>
    18fc:	f022 0203 	bic.w	r2, r2, #3
    1900:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
    1902:	2001      	movs	r0, #1
    1904:	e007      	b.n	1916 <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
    1906:	2900      	cmp	r1, #0
    1908:	d0e5      	beq.n	18d6 <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
    190a:	2003      	movs	r0, #3
    190c:	e00e      	b.n	192c <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
    190e:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
    1910:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
    1912:	3001      	adds	r0, #1
            block_addr += true_block_size;
    1914:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
    1916:	4281      	cmp	r1, r0
    1918:	dcf9      	bgt.n	190e <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
    191a:	2200      	movs	r2, #0
    191c:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
    191e:	2000      	movs	r0, #0
    1920:	6120      	str	r0, [r4, #16]
    1922:	4b06      	ldr	r3, [pc, #24]	; (193c <os_mempool_init_internal+0x74>)
    1924:	685a      	ldr	r2, [r3, #4]
    1926:	6014      	str	r4, [r2, #0]
    1928:	3410      	adds	r4, #16
    192a:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
    192c:	bc30      	pop	{r4, r5}
    192e:	4770      	bx	lr
        return OS_INVALID_PARM;
    1930:	2003      	movs	r0, #3
}
    1932:	4770      	bx	lr
        return OS_INVALID_PARM;
    1934:	2003      	movs	r0, #3
    1936:	e7f9      	b.n	192c <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
    1938:	2004      	movs	r0, #4
    193a:	e7f7      	b.n	192c <os_mempool_init_internal+0x64>
    193c:	20006400 	.word	0x20006400

00001940 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
    1940:	b510      	push	{r4, lr}
    1942:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
    1944:	2400      	movs	r4, #0
    1946:	9401      	str	r4, [sp, #4]
    1948:	9c04      	ldr	r4, [sp, #16]
    194a:	9400      	str	r4, [sp, #0]
    194c:	f7ff ffbc 	bl	18c8 <os_mempool_init_internal>
}
    1950:	b002      	add	sp, #8
    1952:	bd10      	pop	{r4, pc}

00001954 <os_memblock_put_from_cb>:
    return (void *)block;
}

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
    1954:	b538      	push	{r3, r4, r5, lr}
    1956:	4604      	mov	r4, r0
    1958:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
    195a:	f7ff ff92 	bl	1882 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
    195e:	6963      	ldr	r3, [r4, #20]
    1960:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
    1962:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
    1964:	88e3      	ldrh	r3, [r4, #6]
    1966:	3301      	adds	r3, #1
    1968:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
    196a:	f7ff ff90 	bl	188e <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
    196e:	2000      	movs	r0, #0
    1970:	bd38      	pop	{r3, r4, r5, pc}

00001972 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
    1972:	b168      	cbz	r0, 1990 <os_memblock_put+0x1e>
{
    1974:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
    1976:	b169      	cbz	r1, 1994 <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
    1978:	7a83      	ldrb	r3, [r0, #10]
    197a:	f013 0f01 	tst.w	r3, #1
    197e:	d004      	beq.n	198a <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
    1980:	69c3      	ldr	r3, [r0, #28]
    1982:	b113      	cbz	r3, 198a <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    1984:	6a02      	ldr	r2, [r0, #32]
    1986:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
    1988:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
    198a:	f7ff ffe3 	bl	1954 <os_memblock_put_from_cb>
    198e:	e7fb      	b.n	1988 <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
    1990:	2003      	movs	r0, #3
}
    1992:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    1994:	2003      	movs	r0, #3
    1996:	e7f7      	b.n	1988 <os_memblock_put+0x16>

00001998 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
    1998:	4b02      	ldr	r3, [pc, #8]	; (19a4 <os_mempool_module_init+0xc>)
    199a:	2200      	movs	r2, #0
    199c:	601a      	str	r2, [r3, #0]
    199e:	605b      	str	r3, [r3, #4]
}
    19a0:	4770      	bx	lr
    19a2:	bf00      	nop
    19a4:	20006400 	.word	0x20006400

000019a8 <os_msys_register>:
static struct os_sanity_check os_msys_sc;
#endif

int
os_msys_register(struct os_mbuf_pool *new_pool)
{
    19a8:	b430      	push	{r4, r5}
    struct os_mbuf_pool *prev;

    /* We want to have order from smallest to biggest mempool. */
    prev = NULL;
    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    19aa:	4b11      	ldr	r3, [pc, #68]	; (19f0 <os_msys_register+0x48>)
    19ac:	681d      	ldr	r5, [r3, #0]
    19ae:	462b      	mov	r3, r5
    prev = NULL;
    19b0:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    19b2:	b133      	cbz	r3, 19c2 <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
    19b4:	8801      	ldrh	r1, [r0, #0]
    19b6:	881a      	ldrh	r2, [r3, #0]
    19b8:	4291      	cmp	r1, r2
    19ba:	d302      	bcc.n	19c2 <os_msys_register+0x1a>
            break;
        }
        prev = pool;
    19bc:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    19be:	689b      	ldr	r3, [r3, #8]
    19c0:	e7f7      	b.n	19b2 <os_msys_register+0xa>
    }

    if (prev) {
    19c2:	b15c      	cbz	r4, 19dc <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    19c4:	68a3      	ldr	r3, [r4, #8]
    19c6:	6083      	str	r3, [r0, #8]
    19c8:	b11b      	cbz	r3, 19d2 <os_msys_register+0x2a>
    19ca:	60a0      	str	r0, [r4, #8]
    } else {
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    }

    return (0);
}
    19cc:	2000      	movs	r0, #0
    19ce:	bc30      	pop	{r4, r5}
    19d0:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    19d2:	f100 0308 	add.w	r3, r0, #8
    19d6:	4a06      	ldr	r2, [pc, #24]	; (19f0 <os_msys_register+0x48>)
    19d8:	6053      	str	r3, [r2, #4]
    19da:	e7f6      	b.n	19ca <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    19dc:	6085      	str	r5, [r0, #8]
    19de:	b115      	cbz	r5, 19e6 <os_msys_register+0x3e>
    19e0:	4b03      	ldr	r3, [pc, #12]	; (19f0 <os_msys_register+0x48>)
    19e2:	6018      	str	r0, [r3, #0]
    19e4:	e7f2      	b.n	19cc <os_msys_register+0x24>
    19e6:	f100 0308 	add.w	r3, r0, #8
    19ea:	4a01      	ldr	r2, [pc, #4]	; (19f0 <os_msys_register+0x48>)
    19ec:	6053      	str	r3, [r2, #4]
    19ee:	e7f7      	b.n	19e0 <os_msys_register+0x38>
    19f0:	20000138 	.word	0x20000138

000019f4 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
    19f4:	b530      	push	{r4, r5, lr}
    19f6:	b083      	sub	sp, #12
    19f8:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
    19fa:	9d07      	ldr	r5, [sp, #28]
    19fc:	9501      	str	r5, [sp, #4]
    19fe:	9d06      	ldr	r5, [sp, #24]
    1a00:	9500      	str	r5, [sp, #0]
    1a02:	f000 fc81 	bl	2308 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
    1a06:	b138      	cbz	r0, 1a18 <os_msys_init_once+0x24>
    1a08:	2000      	movs	r0, #0
    1a0a:	9000      	str	r0, [sp, #0]
    1a0c:	4b09      	ldr	r3, [pc, #36]	; (1a34 <os_msys_init_once+0x40>)
    1a0e:	681d      	ldr	r5, [r3, #0]
    1a10:	4603      	mov	r3, r0
    1a12:	4602      	mov	r2, r0
    1a14:	4601      	mov	r1, r0
    1a16:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
    1a18:	4620      	mov	r0, r4
    1a1a:	f7ff ffc5 	bl	19a8 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    1a1e:	b138      	cbz	r0, 1a30 <os_msys_init_once+0x3c>
    1a20:	2000      	movs	r0, #0
    1a22:	9000      	str	r0, [sp, #0]
    1a24:	4b03      	ldr	r3, [pc, #12]	; (1a34 <os_msys_init_once+0x40>)
    1a26:	681c      	ldr	r4, [r3, #0]
    1a28:	4603      	mov	r3, r0
    1a2a:	4602      	mov	r2, r0
    1a2c:	4601      	mov	r1, r0
    1a2e:	47a0      	blx	r4
}
    1a30:	b003      	add	sp, #12
    1a32:	bd30      	pop	{r4, r5, pc}
    1a34:	2000014c 	.word	0x2000014c

00001a38 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
    1a38:	4b02      	ldr	r3, [pc, #8]	; (1a44 <os_msys_reset+0xc>)
    1a3a:	2200      	movs	r2, #0
    1a3c:	601a      	str	r2, [r3, #0]
    1a3e:	605b      	str	r3, [r3, #4]
}
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop
    1a44:	20000138 	.word	0x20000138

00001a48 <os_msys_init>:

void
os_msys_init(void)
{
    1a48:	b500      	push	{lr}
    1a4a:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
    1a4c:	f7ff fff4 	bl	1a38 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
    1a50:	4b06      	ldr	r3, [pc, #24]	; (1a6c <os_msys_init+0x24>)
    1a52:	9301      	str	r3, [sp, #4]
    1a54:	f44f 7392 	mov.w	r3, #292	; 0x124
    1a58:	9300      	str	r3, [sp, #0]
    1a5a:	2340      	movs	r3, #64	; 0x40
    1a5c:	4a04      	ldr	r2, [pc, #16]	; (1a70 <os_msys_init+0x28>)
    1a5e:	4905      	ldr	r1, [pc, #20]	; (1a74 <os_msys_init+0x2c>)
    1a60:	4805      	ldr	r0, [pc, #20]	; (1a78 <os_msys_init+0x30>)
    1a62:	f7ff ffc7 	bl	19f4 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
    1a66:	b003      	add	sp, #12
    1a68:	f85d fb04 	ldr.w	pc, [sp], #4
    1a6c:	00005194 	.word	0x00005194
    1a70:	20004a68 	.word	0x20004a68
    1a74:	20004a74 	.word	0x20004a74
    1a78:	20000168 	.word	0x20000168

00001a7c <os_time_get>:

os_time_t
os_time_get(void)
{
    return (g_os_time);
}
    1a7c:	4b01      	ldr	r3, [pc, #4]	; (1a84 <os_time_get+0x8>)
    1a7e:	6818      	ldr	r0, [r3, #0]
    1a80:	4770      	bx	lr
    1a82:	bf00      	nop
    1a84:	20006410 	.word	0x20006410

00001a88 <os_time_advance>:
#else

void
os_time_advance(int ticks)
{
    g_os_time += ticks;
    1a88:	4a02      	ldr	r2, [pc, #8]	; (1a94 <os_time_advance+0xc>)
    1a8a:	6813      	ldr	r3, [r2, #0]
    1a8c:	4418      	add	r0, r3
    1a8e:	6010      	str	r0, [r2, #0]
}
    1a90:	4770      	bx	lr
    1a92:	bf00      	nop
    1a94:	20006410 	.word	0x20006410

00001a98 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
    1a98:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
    1a9c:	482b      	ldr	r0, [pc, #172]	; (1b4c <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
    1a9e:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
    1aa0:	3002      	adds	r0, #2
        MSR     CONTROL,R0
    1aa2:	f380 8814 	msr	CONTROL, r0
        ISB
    1aa6:	f3bf 8f6f 	isb	sy
        BX      LR
    1aaa:	4770      	bx	lr

00001aac <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
    1aac:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
    1ab0:	4770      	bx	lr

00001ab2 <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
    1ab2:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
    1ab6:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
    1ab8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
    1abc:	b951      	cbnz	r1, 1ad4 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    1abe:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    1ac2:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
    1ac4:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    1ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
    1aca:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
    1ace:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
    1ad2:	4770      	bx	lr

00001ad4 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    1ad4:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
    1ad6:	4a1e      	ldr	r2, [pc, #120]	; (1b50 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
    1ad8:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
    1ada:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
    1adc:	d809      	bhi.n	1af2 <SVC_Done>

        LDR     R4,=SVC_Table-4
    1ade:	4c1d      	ldr	r4, [pc, #116]	; (1b54 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
    1ae0:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    1ae4:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
    1ae8:	47a0      	blx	r4

        MRS     R12,PSP
    1aea:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
    1aee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

00001af2 <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    1af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
    1af6:	4770      	bx	lr

00001af8 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    1af8:	4b17      	ldr	r3, [pc, #92]	; (1b58 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
    1afa:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
    1afc:	4b17      	ldr	r3, [pc, #92]	; (1b5c <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
    1afe:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
    1b00:	4291      	cmp	r1, r2
        IT      EQ
    1b02:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
    1b04:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
    1b06:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
    1b0a:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
    1b0e:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
    1b12:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
    1b14:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
    1b18:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
    1b1c:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
    1b20:	4770      	bx	lr

00001b22 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    1b22:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
    1b24:	f7ff fea8 	bl	1878 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    1b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
    1b2c:	4770      	bx	lr

00001b2e <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
    1b2e:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
    1b32:	bf0c      	ite	eq
        MRSEQ   R3,MSP
    1b34:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
    1b38:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
    1b3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
    1b40:	4668      	mov	r0, sp
        BL      os_default_irq
    1b42:	f7ff fe09 	bl	1758 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
    1b46:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
    1b4a:	4770      	bx	lr
        LDR     R0,=os_flags
    1b4c:	20000164 	.word	0x20000164
        LDR     R2,=SVC_Count
    1b50:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
    1b54:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    1b58:	20000140 	.word	0x20000140
        LDR     R3,=g_current_task      /* Get current task */
    1b5c:	20006408 	.word	0x20006408

00001b60 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
    1b60:	3a10      	subs	r2, #16
    1b62:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
    1b64:	6041      	str	r1, [r0, #4]

    return (0);
}
    1b66:	2000      	movs	r0, #0
    1b68:	4770      	bx	lr

00001b6a <os_mbuf_free>:
    return om;
}

int
os_mbuf_free(struct os_mbuf *om)
{
    1b6a:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
    1b6c:	6883      	ldr	r3, [r0, #8]
    1b6e:	b123      	cbz	r3, 1b7a <os_mbuf_free+0x10>
    1b70:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
    1b72:	6858      	ldr	r0, [r3, #4]
    1b74:	f7ff fefd 	bl	1972 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
    1b78:	bd08      	pop	{r3, pc}
    rc = 0;
    1b7a:	2000      	movs	r0, #0
    return (rc);
    1b7c:	e7fc      	b.n	1b78 <os_mbuf_free+0xe>

00001b7e <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
    1b7e:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
    1b80:	b160      	cbz	r0, 1b9c <os_mbuf_free_chain+0x1e>
{
    1b82:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
    1b84:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
    1b86:	4618      	mov	r0, r3
    1b88:	f7ff ffef 	bl	1b6a <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
    1b8c:	4623      	mov	r3, r4
        if (rc != 0) {
    1b8e:	4602      	mov	r2, r0
    1b90:	b910      	cbnz	r0, 1b98 <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
    1b92:	2c00      	cmp	r4, #0
    1b94:	d1f6      	bne.n	1b84 <os_mbuf_free_chain+0x6>
    }

    rc = 0;
    1b96:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
    1b98:	4610      	mov	r0, r2
    1b9a:	bd10      	pop	{r4, pc}
    rc = 0;
    1b9c:	2200      	movs	r2, #0
}
    1b9e:	4610      	mov	r0, r2
    1ba0:	4770      	bx	lr

00001ba2 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
    1ba2:	4603      	mov	r3, r0
    1ba4:	b128      	cbz	r0, 1bb2 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
    1ba6:	2000      	movs	r0, #0
    1ba8:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
    1baa:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
    1bac:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
    1bae:	6018      	str	r0, [r3, #0]
    1bb0:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    1bb2:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
    1bb4:	4770      	bx	lr

00001bb6 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
    1bb6:	b470      	push	{r4, r5, r6}
    1bb8:	f04f 0500 	mov.w	r5, #0
    1bbc:	f022 0603 	bic.w	r6, r2, #3
    1bc0:	e005      	b.n	1bce <test1>

00001bc2 <loop1>:
    1bc2:	5943      	ldr	r3, [r0, r5]
    1bc4:	594c      	ldr	r4, [r1, r5]
    1bc6:	42a3      	cmp	r3, r4
    1bc8:	d104      	bne.n	1bd4 <res1>
    1bca:	f105 0504 	add.w	r5, r5, #4

00001bce <test1>:
    1bce:	42b5      	cmp	r5, r6
    1bd0:	d1f7      	bne.n	1bc2 <loop1>
    1bd2:	e00d      	b.n	1bf0 <test2>

00001bd4 <res1>:
    1bd4:	ba1b      	rev	r3, r3
    1bd6:	ba24      	rev	r4, r4
    1bd8:	1b1b      	subs	r3, r3, r4
    1bda:	bf8c      	ite	hi
    1bdc:	2301      	movhi	r3, #1
    1bde:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
    1be2:	e009      	b.n	1bf8 <done>

00001be4 <loop2>:
    1be4:	5d43      	ldrb	r3, [r0, r5]
    1be6:	5d4c      	ldrb	r4, [r1, r5]
    1be8:	1b1b      	subs	r3, r3, r4
    1bea:	d105      	bne.n	1bf8 <done>
    1bec:	f105 0501 	add.w	r5, r5, #1

00001bf0 <test2>:
    1bf0:	4295      	cmp	r5, r2
    1bf2:	d1f7      	bne.n	1be4 <loop2>
    1bf4:	f04f 0300 	mov.w	r3, #0

00001bf8 <done>:
    1bf8:	4618      	mov	r0, r3
    1bfa:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
    1bfc:	4770      	bx	lr

00001bfe <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
    1bfe:	e001      	b.n	1c04 <test1>

00001c00 <loop1>:
    1c00:	588b      	ldr	r3, [r1, r2]
    1c02:	5083      	str	r3, [r0, r2]

00001c04 <test1>:
    1c04:	3a04      	subs	r2, #4
    1c06:	d5fb      	bpl.n	1c00 <loop1>
    1c08:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
    1c0c:	e001      	b.n	1c12 <test2>

00001c0e <loop2>:
    1c0e:	5c8b      	ldrb	r3, [r1, r2]
    1c10:	5483      	strb	r3, [r0, r2]

00001c12 <test2>:
    1c12:	3a01      	subs	r2, #1
    1c14:	d5fb      	bpl.n	1c0e <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
    1c16:	4770      	bx	lr

00001c18 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
    1c18:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
    1c1a:	4605      	mov	r5, r0
    1c1c:	b2c9      	uxtb	r1, r1
    1c1e:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    1c22:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    1c26:	18ab      	adds	r3, r5, r2
    1c28:	2403      	movs	r4, #3
    1c2a:	4023      	ands	r3, r4
    1c2c:	1ad3      	subs	r3, r2, r3
    1c2e:	d40b      	bmi.n	1c48 <memset+0x30>
    1c30:	e001      	b.n	1c36 <memset+0x1e>
    1c32:	3a01      	subs	r2, #1
    1c34:	54a9      	strb	r1, [r5, r2]
    1c36:	429a      	cmp	r2, r3
    1c38:	d1fb      	bne.n	1c32 <memset+0x1a>
    1c3a:	e000      	b.n	1c3e <memset+0x26>
    1c3c:	50a9      	str	r1, [r5, r2]
    1c3e:	3a04      	subs	r2, #4
    1c40:	d5fc      	bpl.n	1c3c <memset+0x24>
    1c42:	3204      	adds	r2, #4
    1c44:	e000      	b.n	1c48 <memset+0x30>
    1c46:	54a9      	strb	r1, [r5, r2]
    1c48:	3a01      	subs	r2, #1
    1c4a:	d5fc      	bpl.n	1c46 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
    1c4c:	bc30      	pop	{r4, r5}
    1c4e:	4770      	bx	lr

00001c50 <relocate_vector_table>:
/// Relocate the Arm Vector Table from vector_table to relocated_vector_table.
/// relocated_vector_table must be aligned to 0x100 page boundary.
static void relocate_vector_table(void *vector_table, void *relocated_vector_table) {
    uint32_t *current_location = (uint32_t *) vector_table;
    uint32_t *new_location = (uint32_t *) relocated_vector_table;
    if (new_location == current_location) { return; }  //  No need to relocate
    1c50:	4288      	cmp	r0, r1
    1c52:	d021      	beq.n	1c98 <relocate_vector_table+0x48>
static void relocate_vector_table(void *vector_table, void *relocated_vector_table) {
    1c54:	b538      	push	{r3, r4, r5, lr}
    //  Check whether we need to copy the vectors.
    int vector_diff = 0;  //  Non-zero if a vector is different
    for (int i = 0; i < NVIC_NUM_VECTORS; i++) {
    1c56:	2300      	movs	r3, #0
    1c58:	2b35      	cmp	r3, #53	; 0x35
    1c5a:	dc07      	bgt.n	1c6c <relocate_vector_table+0x1c>
        if (new_location[i] != current_location[i]) {
    1c5c:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
    1c60:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    1c64:	42a5      	cmp	r5, r4
    1c66:	d103      	bne.n	1c70 <relocate_vector_table+0x20>
    for (int i = 0; i < NVIC_NUM_VECTORS; i++) {
    1c68:	3301      	adds	r3, #1
    1c6a:	e7f5      	b.n	1c58 <relocate_vector_table+0x8>
    int vector_diff = 0;  //  Non-zero if a vector is different
    1c6c:	2300      	movs	r3, #0
    1c6e:	e000      	b.n	1c72 <relocate_vector_table+0x22>
            vector_diff = 1;
    1c70:	2301      	movs	r3, #1
    1c72:	460c      	mov	r4, r1
    1c74:	4605      	mov	r5, r0
            break;
        }
    }
    //  If we need to copy the vectors, erase the flash ROM and write the vectors.
    if (vector_diff) {
    1c76:	b913      	cbnz	r3, 1c7e <relocate_vector_table+0x2e>
            vector_table, //  From the original address
            0x100         //  Assume that we copy an entire page
        );
    }
    //  Point VTOR Register in the System Control Block to the relocated vector table.
    *SCB_VTOR = (uint32_t) relocated_vector_table;
    1c78:	4b08      	ldr	r3, [pc, #32]	; (1c9c <relocate_vector_table+0x4c>)
    1c7a:	601c      	str	r4, [r3, #0]
}
    1c7c:	bd38      	pop	{r3, r4, r5, pc}
        hal_flash_erase(  //  Erase...
    1c7e:	f44f 7280 	mov.w	r2, #256	; 0x100
    1c82:	2000      	movs	r0, #0
    1c84:	f002 f9dc 	bl	4040 <hal_flash_erase>
        hal_flash_write(  //  Write...
    1c88:	f44f 7380 	mov.w	r3, #256	; 0x100
    1c8c:	462a      	mov	r2, r5
    1c8e:	4621      	mov	r1, r4
    1c90:	2000      	movs	r0, #0
    1c92:	f002 f99b 	bl	3fcc <hal_flash_write>
    1c96:	e7ef      	b.n	1c78 <relocate_vector_table+0x28>
    1c98:	4770      	bx	lr
    1c9a:	bf00      	nop
    1c9c:	e000ed08 	.word	0xe000ed08

00001ca0 <pinetime_boot_init>:
void pinetime_boot_init(void) {
    1ca0:	b538      	push	{r3, r4, r5, lr}
    console_printf("Starting Bootloader...\n");
    1ca2:	4820      	ldr	r0, [pc, #128]	; (1d24 <pinetime_boot_init+0x84>)
    1ca4:	f000 fabe 	bl	2224 <console_printf>
    console_flush();
    1ca8:	f000 fae0 	bl	226c <console_flush>
    hal_gpio_init_in(PUSH_BUTTON_IN, HAL_GPIO_PULL_DOWN);  //  TODO: Doesn't seem to work
    1cac:	2102      	movs	r1, #2
    1cae:	200d      	movs	r0, #13
    1cb0:	f7ff f823 	bl	cfa <hal_gpio_init_in>
    hal_gpio_init_out(PUSH_BUTTON_OUT, 1);
    1cb4:	2101      	movs	r1, #1
    1cb6:	200f      	movs	r0, #15
    1cb8:	f7ff f835 	bl	d26 <hal_gpio_init_out>
    hal_gpio_write(PUSH_BUTTON_OUT, 1);  //  Enable the button
    1cbc:	2101      	movs	r1, #1
    1cbe:	200f      	movs	r0, #15
    1cc0:	f7ff f84d 	bl	d5e <hal_gpio_write>
    pinetime_boot_display_image();
    1cc4:	f000 fa0c 	bl	20e0 <pinetime_boot_display_image>
    console_printf("Check button: %d\n", hal_gpio_read(PUSH_BUTTON_IN));
    1cc8:	200d      	movs	r0, #13
    1cca:	f7ff f859 	bl	d80 <hal_gpio_read>
    1cce:	4601      	mov	r1, r0
    1cd0:	4815      	ldr	r0, [pc, #84]	; (1d28 <pinetime_boot_init+0x88>)
    1cd2:	f000 faa7 	bl	2224 <console_printf>
    console_flush();
    1cd6:	f000 fac9 	bl	226c <console_flush>
    console_printf("Waiting 5 seconds for button...\n");
    1cda:	4814      	ldr	r0, [pc, #80]	; (1d2c <pinetime_boot_init+0x8c>)
    1cdc:	f000 faa2 	bl	2224 <console_printf>
    console_flush();
    1ce0:	f000 fac4 	bl	226c <console_flush>
    for (int i = 0; i < 64 * 5; i++) {
    1ce4:	2500      	movs	r5, #0
    uint8_t button_samples = 0;
    1ce6:	462c      	mov	r4, r5
    for (int i = 0; i < 64 * 5; i++) {
    1ce8:	e009      	b.n	1cfe <pinetime_boot_init+0x5e>
        for (int delay = 0; delay < 100000; delay++);
    1cea:	3301      	adds	r3, #1
    1cec:	4a10      	ldr	r2, [pc, #64]	; (1d30 <pinetime_boot_init+0x90>)
    1cee:	4293      	cmp	r3, r2
    1cf0:	ddfb      	ble.n	1cea <pinetime_boot_init+0x4a>
        button_samples += hal_gpio_read(PUSH_BUTTON_IN);
    1cf2:	200d      	movs	r0, #13
    1cf4:	f7ff f844 	bl	d80 <hal_gpio_read>
    1cf8:	4404      	add	r4, r0
    1cfa:	b2e4      	uxtb	r4, r4
    for (int i = 0; i < 64 * 5; i++) {
    1cfc:	3501      	adds	r5, #1
    1cfe:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
    1d02:	da01      	bge.n	1d08 <pinetime_boot_init+0x68>
        for (int delay = 0; delay < 100000; delay++);
    1d04:	2300      	movs	r3, #0
    1d06:	e7f1      	b.n	1cec <pinetime_boot_init+0x4c>
    if (button_samples > 1 /* TODO: this needs to be set higher to avoid accidental rollbacks */) {
    1d08:	2c01      	cmp	r4, #1
    1d0a:	d800      	bhi.n	1d0e <pinetime_boot_init+0x6e>
}
    1d0c:	bd38      	pop	{r3, r4, r5, pc}
        console_printf("Flashing and resetting...\n");
    1d0e:	4809      	ldr	r0, [pc, #36]	; (1d34 <pinetime_boot_init+0x94>)
    1d10:	f000 fa88 	bl	2224 <console_printf>
        console_flush();
    1d14:	f000 faaa 	bl	226c <console_flush>
        boot_set_pending(0);
    1d18:	2000      	movs	r0, #0
    1d1a:	f000 fd1f 	bl	275c <boot_set_pending>
        hal_system_reset();
    1d1e:	f7fe fa29 	bl	174 <hal_system_reset>
    1d22:	bf00      	nop
    1d24:	000051b0 	.word	0x000051b0
    1d28:	000051c8 	.word	0x000051c8
    1d2c:	000051dc 	.word	0x000051dc
    1d30:	0001869f 	.word	0x0001869f
    1d34:	00005200 	.word	0x00005200

00001d38 <setup_watchdog>:
  NRF_WDT->CONFIG &= ~(WDT_CONFIG_SLEEP_Msk << WDT_CONFIG_SLEEP_Pos);
    1d38:	4b0f      	ldr	r3, [pc, #60]	; (1d78 <setup_watchdog+0x40>)
    1d3a:	f8d3 250c 	ldr.w	r2, [r3, #1292]	; 0x50c
    1d3e:	f022 0201 	bic.w	r2, r2, #1
    1d42:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
  NRF_WDT->CONFIG |= (WDT_CONFIG_HALT_Run << WDT_CONFIG_SLEEP_Pos);
    1d46:	f8d3 250c 	ldr.w	r2, [r3, #1292]	; 0x50c
    1d4a:	f042 0201 	orr.w	r2, r2, #1
    1d4e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
  NRF_WDT->CONFIG &= ~(WDT_CONFIG_HALT_Msk << WDT_CONFIG_HALT_Pos);
    1d52:	f8d3 250c 	ldr.w	r2, [r3, #1292]	; 0x50c
    1d56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    1d5a:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
  NRF_WDT->CONFIG |= (WDT_CONFIG_HALT_Pause << WDT_CONFIG_HALT_Pos);
    1d5e:	f8d3 250c 	ldr.w	r2, [r3, #1292]	; 0x50c
    1d62:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
  NRF_WDT->CRV = crv;
    1d66:	4a05      	ldr	r2, [pc, #20]	; (1d7c <setup_watchdog+0x44>)
    1d68:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
  NRF_WDT->RREN = (WDT_RREN_RR0_Enabled << WDT_RREN_RR0_Pos);
    1d6c:	2201      	movs	r2, #1
    1d6e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  NRF_WDT->TASKS_START = 1;
    1d72:	601a      	str	r2, [r3, #0]
}
    1d74:	4770      	bx	lr
    1d76:	bf00      	nop
    1d78:	40010000 	.word	0x40010000
    1d7c:	00037fff 	.word	0x00037fff

00001d80 <boot_custom_start>:
) {
    1d80:	b570      	push	{r4, r5, r6, lr}
    1d82:	4606      	mov	r6, r0
    1d84:	460d      	mov	r5, r1
    console_printf("Bootloader done\n");
    1d86:	480a      	ldr	r0, [pc, #40]	; (1db0 <boot_custom_start+0x30>)
    1d88:	f000 fa4c 	bl	2224 <console_printf>
    console_flush();
    1d8c:	f000 fa6e 	bl	226c <console_flush>
        rsp->br_image_off +          //  Offset of FLASH_AREA_IMAGE_0 (application image): 0x8000
    1d90:	68ac      	ldr	r4, [r5, #8]
        flash_base +                 //  0
    1d92:	4434      	add	r4, r6
        rsp->br_hdr->ih_hdr_size     //  Size of MCUBoot image header (0x20)
    1d94:	682b      	ldr	r3, [r5, #0]
    1d96:	891b      	ldrh	r3, [r3, #8]
        rsp->br_image_off +          //  Offset of FLASH_AREA_IMAGE_0 (application image): 0x8000
    1d98:	441c      	add	r4, r3
    relocate_vector_table(  //  Relocate the vector table...
    1d9a:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    1d9e:	4620      	mov	r0, r4
    1da0:	f7ff ff56 	bl	1c50 <relocate_vector_table>
    setup_watchdog();
    1da4:	f7ff ffc8 	bl	1d38 <setup_watchdog>
    hal_system_start(vector_table);
    1da8:	4620      	mov	r0, r4
    1daa:	f002 f9fa 	bl	41a2 <hal_system_start>
    1dae:	bf00      	nop
    1db0:	0000519c 	.word	0x0000519c

00001db4 <hard_reset>:
    delay_ms(200);
    return 0;
}

/// Reset the display controller
static int hard_reset(void) {
    1db4:	b508      	push	{r3, lr}
    hal_gpio_write(DISPLAY_RST, 1);
    1db6:	2101      	movs	r1, #1
    1db8:	201a      	movs	r0, #26
    1dba:	f7fe ffd0 	bl	d5e <hal_gpio_write>
    hal_gpio_write(DISPLAY_RST, 0);
    1dbe:	2100      	movs	r1, #0
    1dc0:	201a      	movs	r0, #26
    1dc2:	f7fe ffcc 	bl	d5e <hal_gpio_write>
    hal_gpio_write(DISPLAY_RST, 1);
    1dc6:	2101      	movs	r1, #1
    1dc8:	201a      	movs	r0, #26
    1dca:	f7fe ffc8 	bl	d5e <hal_gpio_write>
    return 0;
}
    1dce:	2000      	movs	r0, #0
    1dd0:	bd08      	pop	{r3, pc}
	...

00001dd4 <delay_ms>:
    hal_gpio_write(DISPLAY_CS, 1);
    return 0;
}

/// Sleep for the specified number of milliseconds
static void delay_ms(uint32_t ms) {
    1dd4:	b510      	push	{r4, lr}
    uint32_t delay_ticks = ms * OS_TICKS_PER_SEC / 1000;
    os_time_delay(delay_ticks);
#else  //  If Task Scheduler is disabled (i.e. MCUBoot)...
    //  os_time_delay() doesn't work in MCUBoot because the scheduler has not started
    uint8_t button_samples = 0;
    for (int i = 0; i < 64; i++) {
    1dd6:	2400      	movs	r4, #0
    1dd8:	e007      	b.n	1dea <delay_ms+0x16>
        for (int delay = 0; delay < 100000; delay++) {}
    1dda:	3301      	adds	r3, #1
    1ddc:	4a05      	ldr	r2, [pc, #20]	; (1df4 <delay_ms+0x20>)
    1dde:	4293      	cmp	r3, r2
    1de0:	ddfb      	ble.n	1dda <delay_ms+0x6>
        button_samples += hal_gpio_read(PUSH_BUTTON_IN);
    1de2:	200d      	movs	r0, #13
    1de4:	f7fe ffcc 	bl	d80 <hal_gpio_read>
    for (int i = 0; i < 64; i++) {
    1de8:	3401      	adds	r4, #1
    1dea:	2c3f      	cmp	r4, #63	; 0x3f
    1dec:	dc01      	bgt.n	1df2 <delay_ms+0x1e>
        for (int delay = 0; delay < 100000; delay++) {}
    1dee:	2300      	movs	r3, #0
    1df0:	e7f4      	b.n	1ddc <delay_ms+0x8>
    }
#endif  //  MYNEWT_VAL(OS_SCHEDULING)
}
    1df2:	bd10      	pop	{r4, pc}
    1df4:	0001869f 	.word	0x0001869f

00001df8 <transmit_spi>:
    if (len == 0) { return 0; }
    1df8:	b909      	cbnz	r1, 1dfe <transmit_spi+0x6>
}
    1dfa:	2000      	movs	r0, #0
    1dfc:	4770      	bx	lr
static int transmit_spi(const uint8_t *data, uint16_t len) {
    1dfe:	b538      	push	{r3, r4, r5, lr}
    1e00:	460d      	mov	r5, r1
    1e02:	4604      	mov	r4, r0
    hal_gpio_write(DISPLAY_CS, 0);
    1e04:	2100      	movs	r1, #0
    1e06:	2019      	movs	r0, #25
    1e08:	f7fe ffa9 	bl	d5e <hal_gpio_write>
    int rc = hal_spi_txrx(DISPLAY_SPI, 
    1e0c:	462b      	mov	r3, r5
    1e0e:	2200      	movs	r2, #0
    1e10:	4621      	mov	r1, r4
    1e12:	4610      	mov	r0, r2
    1e14:	f7ff f9ee 	bl	11f4 <hal_spi_txrx>
    assert(rc == 0);
    1e18:	b928      	cbnz	r0, 1e26 <transmit_spi+0x2e>
    hal_gpio_write(DISPLAY_CS, 1);
    1e1a:	2101      	movs	r1, #1
    1e1c:	2019      	movs	r0, #25
    1e1e:	f7fe ff9e 	bl	d5e <hal_gpio_write>
}
    1e22:	2000      	movs	r0, #0
    1e24:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
    1e26:	2300      	movs	r3, #0
    1e28:	461a      	mov	r2, r3
    1e2a:	4619      	mov	r1, r3
    1e2c:	4618      	mov	r0, r3
    1e2e:	f7ff fc6d 	bl	170c <__assert_func>

00001e32 <write_data>:
static int write_data(const uint8_t *data, uint16_t len) {
    1e32:	b538      	push	{r3, r4, r5, lr}
    1e34:	4604      	mov	r4, r0
    1e36:	460d      	mov	r5, r1
    hal_gpio_write(DISPLAY_DC, 1);
    1e38:	2101      	movs	r1, #1
    1e3a:	2012      	movs	r0, #18
    1e3c:	f7fe ff8f 	bl	d5e <hal_gpio_write>
    transmit_spi(data, len);
    1e40:	4629      	mov	r1, r5
    1e42:	4620      	mov	r0, r4
    1e44:	f7ff ffd8 	bl	1df8 <transmit_spi>
}
    1e48:	2000      	movs	r0, #0
    1e4a:	bd38      	pop	{r3, r4, r5, pc}

00001e4c <write_command>:
static int write_command(uint8_t command, const uint8_t *params, uint16_t len) {
    1e4c:	b570      	push	{r4, r5, r6, lr}
    1e4e:	b082      	sub	sp, #8
    1e50:	460d      	mov	r5, r1
    1e52:	4616      	mov	r6, r2
    1e54:	ac02      	add	r4, sp, #8
    1e56:	f804 0d01 	strb.w	r0, [r4, #-1]!
    hal_gpio_write(DISPLAY_DC, 0);
    1e5a:	2100      	movs	r1, #0
    1e5c:	2012      	movs	r0, #18
    1e5e:	f7fe ff7e 	bl	d5e <hal_gpio_write>
    int rc = transmit_spi(&command, 1);
    1e62:	2101      	movs	r1, #1
    1e64:	4620      	mov	r0, r4
    1e66:	f7ff ffc7 	bl	1df8 <transmit_spi>
    assert(rc == 0);
    1e6a:	b920      	cbnz	r0, 1e76 <write_command+0x2a>
    if (params != NULL && len > 0) {
    1e6c:	b105      	cbz	r5, 1e70 <write_command+0x24>
    1e6e:	b946      	cbnz	r6, 1e82 <write_command+0x36>
}
    1e70:	2000      	movs	r0, #0
    1e72:	b002      	add	sp, #8
    1e74:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == 0);
    1e76:	2300      	movs	r3, #0
    1e78:	461a      	mov	r2, r3
    1e7a:	4619      	mov	r1, r3
    1e7c:	4618      	mov	r0, r3
    1e7e:	f7ff fc45 	bl	170c <__assert_func>
        rc = write_data(params, len);
    1e82:	4631      	mov	r1, r6
    1e84:	4628      	mov	r0, r5
    1e86:	f7ff ffd4 	bl	1e32 <write_data>
        assert(rc == 0);
    1e8a:	2800      	cmp	r0, #0
    1e8c:	d0f0      	beq.n	1e70 <write_command+0x24>
    1e8e:	2300      	movs	r3, #0
    1e90:	461a      	mov	r2, r3
    1e92:	4619      	mov	r1, r3
    1e94:	4618      	mov	r0, r3
    1e96:	f7ff fc39 	bl	170c <__assert_func>
	...

00001e9c <init_display>:
static int init_display(void) {
    1e9c:	b508      	push	{r3, lr}
    rc = hal_gpio_init_out(DISPLAY_RST, 1); assert(rc == 0);
    1e9e:	2101      	movs	r1, #1
    1ea0:	201a      	movs	r0, #26
    1ea2:	f7fe ff40 	bl	d26 <hal_gpio_init_out>
    1ea6:	2800      	cmp	r0, #0
    1ea8:	d16e      	bne.n	1f88 <init_display+0xec>
    rc = hal_gpio_init_out(DISPLAY_CS, 1); assert(rc == 0);
    1eaa:	2101      	movs	r1, #1
    1eac:	2019      	movs	r0, #25
    1eae:	f7fe ff3a 	bl	d26 <hal_gpio_init_out>
    1eb2:	2800      	cmp	r0, #0
    1eb4:	d16e      	bne.n	1f94 <init_display+0xf8>
    rc = hal_gpio_init_out(DISPLAY_DC, 0); assert(rc == 0);
    1eb6:	2100      	movs	r1, #0
    1eb8:	2012      	movs	r0, #18
    1eba:	f7fe ff34 	bl	d26 <hal_gpio_init_out>
    1ebe:	2800      	cmp	r0, #0
    1ec0:	d16e      	bne.n	1fa0 <init_display+0x104>
    rc = hal_gpio_init_out(DISPLAY_HIGH, 0); assert(rc == 0);
    1ec2:	2100      	movs	r1, #0
    1ec4:	2017      	movs	r0, #23
    1ec6:	f7fe ff2e 	bl	d26 <hal_gpio_init_out>
    1eca:	2800      	cmp	r0, #0
    1ecc:	d16e      	bne.n	1fac <init_display+0x110>
    hard_reset();
    1ece:	f7ff ff71 	bl	1db4 <hard_reset>
    write_command(SWRESET, NULL, 0);
    1ed2:	2200      	movs	r2, #0
    1ed4:	4611      	mov	r1, r2
    1ed6:	2001      	movs	r0, #1
    1ed8:	f7ff ffb8 	bl	1e4c <write_command>
    delay_ms(200);
    1edc:	20c8      	movs	r0, #200	; 0xc8
    1ede:	f7ff ff79 	bl	1dd4 <delay_ms>
    write_command(SLPOUT, NULL, 0);
    1ee2:	2200      	movs	r2, #0
    1ee4:	4611      	mov	r1, r2
    1ee6:	2011      	movs	r0, #17
    1ee8:	f7ff ffb0 	bl	1e4c <write_command>
    delay_ms(200);
    1eec:	20c8      	movs	r0, #200	; 0xc8
    1eee:	f7ff ff71 	bl	1dd4 <delay_ms>
    write_command(FRMCTR1, FRMCTR1_PARA, sizeof(FRMCTR1_PARA));
    1ef2:	2203      	movs	r2, #3
    1ef4:	4930      	ldr	r1, [pc, #192]	; (1fb8 <init_display+0x11c>)
    1ef6:	20b1      	movs	r0, #177	; 0xb1
    1ef8:	f7ff ffa8 	bl	1e4c <write_command>
    write_command(FRMCTR2, FRMCTR2_PARA, sizeof(FRMCTR2_PARA));
    1efc:	2203      	movs	r2, #3
    1efe:	492f      	ldr	r1, [pc, #188]	; (1fbc <init_display+0x120>)
    1f00:	20b2      	movs	r0, #178	; 0xb2
    1f02:	f7ff ffa3 	bl	1e4c <write_command>
    write_command(FRMCTR3, FRMCTR3_PARA, sizeof(FRMCTR3_PARA));
    1f06:	2206      	movs	r2, #6
    1f08:	492d      	ldr	r1, [pc, #180]	; (1fc0 <init_display+0x124>)
    1f0a:	20b3      	movs	r0, #179	; 0xb3
    1f0c:	f7ff ff9e 	bl	1e4c <write_command>
    write_command(INVCTR, INVCTR_PARA, sizeof(INVCTR_PARA));
    1f10:	2201      	movs	r2, #1
    1f12:	492c      	ldr	r1, [pc, #176]	; (1fc4 <init_display+0x128>)
    1f14:	20b4      	movs	r0, #180	; 0xb4
    1f16:	f7ff ff99 	bl	1e4c <write_command>
    write_command(PWCTR1, PWCTR1_PARA, sizeof(PWCTR1_PARA));
    1f1a:	2203      	movs	r2, #3
    1f1c:	492a      	ldr	r1, [pc, #168]	; (1fc8 <init_display+0x12c>)
    1f1e:	20c0      	movs	r0, #192	; 0xc0
    1f20:	f7ff ff94 	bl	1e4c <write_command>
    write_command(PWCTR2, PWCTR2_PARA, sizeof(PWCTR2_PARA));
    1f24:	2201      	movs	r2, #1
    1f26:	4929      	ldr	r1, [pc, #164]	; (1fcc <init_display+0x130>)
    1f28:	20c1      	movs	r0, #193	; 0xc1
    1f2a:	f7ff ff8f 	bl	1e4c <write_command>
    write_command(PWCTR3, PWCTR3_PARA, sizeof(PWCTR3_PARA));
    1f2e:	2202      	movs	r2, #2
    1f30:	4927      	ldr	r1, [pc, #156]	; (1fd0 <init_display+0x134>)
    1f32:	20c2      	movs	r0, #194	; 0xc2
    1f34:	f7ff ff8a 	bl	1e4c <write_command>
    write_command(PWCTR4, PWCTR4_PARA, sizeof(PWCTR4_PARA));
    1f38:	2202      	movs	r2, #2
    1f3a:	4926      	ldr	r1, [pc, #152]	; (1fd4 <init_display+0x138>)
    1f3c:	20c3      	movs	r0, #195	; 0xc3
    1f3e:	f7ff ff85 	bl	1e4c <write_command>
    write_command(PWCTR5, PWCTR5_PARA, sizeof(PWCTR5_PARA));
    1f42:	2202      	movs	r2, #2
    1f44:	4924      	ldr	r1, [pc, #144]	; (1fd8 <init_display+0x13c>)
    1f46:	20c4      	movs	r0, #196	; 0xc4
    1f48:	f7ff ff80 	bl	1e4c <write_command>
    write_command(VMCTR1, VMCTR1_PARA, sizeof(VMCTR1_PARA));
    1f4c:	2201      	movs	r2, #1
    1f4e:	4923      	ldr	r1, [pc, #140]	; (1fdc <init_display+0x140>)
    1f50:	20c5      	movs	r0, #197	; 0xc5
    1f52:	f7ff ff7b 	bl	1e4c <write_command>
        write_command(INVON, NULL, 0);
    1f56:	2200      	movs	r2, #0
    1f58:	4611      	mov	r1, r2
    1f5a:	2021      	movs	r0, #33	; 0x21
    1f5c:	f7ff ff76 	bl	1e4c <write_command>
        write_command(MADCTL, MADCTL1_PARA, sizeof(MADCTL1_PARA));
    1f60:	2201      	movs	r2, #1
    1f62:	491f      	ldr	r1, [pc, #124]	; (1fe0 <init_display+0x144>)
    1f64:	2036      	movs	r0, #54	; 0x36
    1f66:	f7ff ff71 	bl	1e4c <write_command>
    write_command(COLMOD, COLMOD_PARA, sizeof(COLMOD_PARA));
    1f6a:	2201      	movs	r2, #1
    1f6c:	491d      	ldr	r1, [pc, #116]	; (1fe4 <init_display+0x148>)
    1f6e:	203a      	movs	r0, #58	; 0x3a
    1f70:	f7ff ff6c 	bl	1e4c <write_command>
    write_command(DISPON, NULL, 0);
    1f74:	2200      	movs	r2, #0
    1f76:	4611      	mov	r1, r2
    1f78:	2029      	movs	r0, #41	; 0x29
    1f7a:	f7ff ff67 	bl	1e4c <write_command>
    delay_ms(200);
    1f7e:	20c8      	movs	r0, #200	; 0xc8
    1f80:	f7ff ff28 	bl	1dd4 <delay_ms>
}
    1f84:	2000      	movs	r0, #0
    1f86:	bd08      	pop	{r3, pc}
    rc = hal_gpio_init_out(DISPLAY_RST, 1); assert(rc == 0);
    1f88:	2300      	movs	r3, #0
    1f8a:	461a      	mov	r2, r3
    1f8c:	4619      	mov	r1, r3
    1f8e:	4618      	mov	r0, r3
    1f90:	f7ff fbbc 	bl	170c <__assert_func>
    rc = hal_gpio_init_out(DISPLAY_CS, 1); assert(rc == 0);
    1f94:	2300      	movs	r3, #0
    1f96:	461a      	mov	r2, r3
    1f98:	4619      	mov	r1, r3
    1f9a:	4618      	mov	r0, r3
    1f9c:	f7ff fbb6 	bl	170c <__assert_func>
    rc = hal_gpio_init_out(DISPLAY_DC, 0); assert(rc == 0);
    1fa0:	2300      	movs	r3, #0
    1fa2:	461a      	mov	r2, r3
    1fa4:	4619      	mov	r1, r3
    1fa6:	4618      	mov	r0, r3
    1fa8:	f7ff fbb0 	bl	170c <__assert_func>
    rc = hal_gpio_init_out(DISPLAY_HIGH, 0); assert(rc == 0);
    1fac:	2300      	movs	r3, #0
    1fae:	461a      	mov	r2, r3
    1fb0:	4619      	mov	r1, r3
    1fb2:	4618      	mov	r0, r3
    1fb4:	f7ff fbaa 	bl	170c <__assert_func>
    1fb8:	00005220 	.word	0x00005220
    1fbc:	00005224 	.word	0x00005224
    1fc0:	00005228 	.word	0x00005228
    1fc4:	00005230 	.word	0x00005230
    1fc8:	00005238 	.word	0x00005238
    1fcc:	0000523c 	.word	0x0000523c
    1fd0:	00005240 	.word	0x00005240
    1fd4:	00005244 	.word	0x00005244
    1fd8:	00005248 	.word	0x00005248
    1fdc:	0000524c 	.word	0x0000524c
    1fe0:	00005234 	.word	0x00005234
    1fe4:	0000521c 	.word	0x0000521c

00001fe8 <set_orientation>:
static int set_orientation(uint8_t orientation) {
    1fe8:	b500      	push	{lr}
    1fea:	b083      	sub	sp, #12
        uint8_t orientation_para[1] = { orientation };
    1fec:	a902      	add	r1, sp, #8
    1fee:	f801 0d04 	strb.w	r0, [r1, #-4]!
        int rc = write_command(MADCTL, orientation_para, 1);
    1ff2:	2201      	movs	r2, #1
    1ff4:	2036      	movs	r0, #54	; 0x36
    1ff6:	f7ff ff29 	bl	1e4c <write_command>
        assert(rc == 0);
    1ffa:	b918      	cbnz	r0, 2004 <set_orientation+0x1c>
}
    1ffc:	2000      	movs	r0, #0
    1ffe:	b003      	add	sp, #12
    2000:	f85d fb04 	ldr.w	pc, [sp], #4
        assert(rc == 0);
    2004:	2300      	movs	r3, #0
    2006:	461a      	mov	r2, r3
    2008:	4619      	mov	r1, r3
    200a:	4618      	mov	r0, r3
    200c:	f7ff fb7e 	bl	170c <__assert_func>

00002010 <set_window>:
static int set_window(uint8_t left, uint8_t top, uint8_t right, uint8_t bottom) {
    2010:	b5f0      	push	{r4, r5, r6, r7, lr}
    2012:	b083      	sub	sp, #12
    assert(left < COL_COUNT && right < COL_COUNT && top < ROW_COUNT && bottom < ROW_COUNT);
    2014:	28ef      	cmp	r0, #239	; 0xef
    2016:	d839      	bhi.n	208c <set_window+0x7c>
    2018:	4604      	mov	r4, r0
    201a:	460e      	mov	r6, r1
    201c:	4615      	mov	r5, r2
    201e:	461f      	mov	r7, r3
    2020:	2aef      	cmp	r2, #239	; 0xef
    2022:	d833      	bhi.n	208c <set_window+0x7c>
    2024:	29ef      	cmp	r1, #239	; 0xef
    2026:	d831      	bhi.n	208c <set_window+0x7c>
    2028:	2bef      	cmp	r3, #239	; 0xef
    202a:	d82f      	bhi.n	208c <set_window+0x7c>
    assert(left <= right);
    202c:	4290      	cmp	r0, r2
    202e:	d833      	bhi.n	2098 <set_window+0x88>
    assert(top <= bottom);
    2030:	4299      	cmp	r1, r3
    2032:	d837      	bhi.n	20a4 <set_window+0x94>
    int rc = write_command(CASET, NULL, 0); assert(rc == 0);
    2034:	2200      	movs	r2, #0
    2036:	4611      	mov	r1, r2
    2038:	202a      	movs	r0, #42	; 0x2a
    203a:	f7ff ff07 	bl	1e4c <write_command>
    203e:	bbb8      	cbnz	r0, 20b0 <set_window+0xa0>
    uint8_t col_para[4] = { 0x00, left, 0x00, right };
    2040:	2300      	movs	r3, #0
    2042:	f88d 3004 	strb.w	r3, [sp, #4]
    2046:	f88d 4005 	strb.w	r4, [sp, #5]
    204a:	f88d 3006 	strb.w	r3, [sp, #6]
    204e:	f88d 5007 	strb.w	r5, [sp, #7]
    rc = write_data(col_para, 4); assert(rc == 0);
    2052:	2104      	movs	r1, #4
    2054:	eb0d 0001 	add.w	r0, sp, r1
    2058:	f7ff feeb 	bl	1e32 <write_data>
    205c:	bb70      	cbnz	r0, 20bc <set_window+0xac>
    rc = write_command(RASET, NULL, 0); assert(rc == 0);
    205e:	2200      	movs	r2, #0
    2060:	4611      	mov	r1, r2
    2062:	202b      	movs	r0, #43	; 0x2b
    2064:	f7ff fef2 	bl	1e4c <write_command>
    2068:	bb70      	cbnz	r0, 20c8 <set_window+0xb8>
    uint8_t row_para[4] = { 0x00, top, 0x00, bottom };
    206a:	2300      	movs	r3, #0
    206c:	f88d 3000 	strb.w	r3, [sp]
    2070:	f88d 6001 	strb.w	r6, [sp, #1]
    2074:	f88d 3002 	strb.w	r3, [sp, #2]
    2078:	f88d 7003 	strb.w	r7, [sp, #3]
    rc = write_data(row_para, 4); assert(rc == 0);
    207c:	2104      	movs	r1, #4
    207e:	4668      	mov	r0, sp
    2080:	f7ff fed7 	bl	1e32 <write_data>
    2084:	bb30      	cbnz	r0, 20d4 <set_window+0xc4>
}
    2086:	2000      	movs	r0, #0
    2088:	b003      	add	sp, #12
    208a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(left < COL_COUNT && right < COL_COUNT && top < ROW_COUNT && bottom < ROW_COUNT);
    208c:	2300      	movs	r3, #0
    208e:	461a      	mov	r2, r3
    2090:	4619      	mov	r1, r3
    2092:	4618      	mov	r0, r3
    2094:	f7ff fb3a 	bl	170c <__assert_func>
    assert(left <= right);
    2098:	2300      	movs	r3, #0
    209a:	461a      	mov	r2, r3
    209c:	4619      	mov	r1, r3
    209e:	4618      	mov	r0, r3
    20a0:	f7ff fb34 	bl	170c <__assert_func>
    assert(top <= bottom);
    20a4:	2300      	movs	r3, #0
    20a6:	461a      	mov	r2, r3
    20a8:	4619      	mov	r1, r3
    20aa:	4618      	mov	r0, r3
    20ac:	f7ff fb2e 	bl	170c <__assert_func>
    int rc = write_command(CASET, NULL, 0); assert(rc == 0);
    20b0:	2300      	movs	r3, #0
    20b2:	461a      	mov	r2, r3
    20b4:	4619      	mov	r1, r3
    20b6:	4618      	mov	r0, r3
    20b8:	f7ff fb28 	bl	170c <__assert_func>
    rc = write_data(col_para, 4); assert(rc == 0);
    20bc:	2300      	movs	r3, #0
    20be:	461a      	mov	r2, r3
    20c0:	4619      	mov	r1, r3
    20c2:	4618      	mov	r0, r3
    20c4:	f7ff fb22 	bl	170c <__assert_func>
    rc = write_command(RASET, NULL, 0); assert(rc == 0);
    20c8:	2300      	movs	r3, #0
    20ca:	461a      	mov	r2, r3
    20cc:	4619      	mov	r1, r3
    20ce:	4618      	mov	r0, r3
    20d0:	f7ff fb1c 	bl	170c <__assert_func>
    rc = write_data(row_para, 4); assert(rc == 0);
    20d4:	2300      	movs	r3, #0
    20d6:	461a      	mov	r2, r3
    20d8:	4619      	mov	r1, r3
    20da:	4618      	mov	r0, r3
    20dc:	f7ff fb16 	bl	170c <__assert_func>

000020e0 <pinetime_boot_display_image>:
int pinetime_boot_display_image(void) {
    20e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    console_printf("Displaying image...\n"); console_flush();
    20e2:	4835      	ldr	r0, [pc, #212]	; (21b8 <pinetime_boot_display_image+0xd8>)
    20e4:	f000 f89e 	bl	2224 <console_printf>
    20e8:	f000 f8c0 	bl	226c <console_flush>
    int rc = init_display();  assert(rc == 0);
    20ec:	f7ff fed6 	bl	1e9c <init_display>
    20f0:	b928      	cbnz	r0, 20fe <pinetime_boot_display_image+0x1e>
    rc = set_orientation(Landscape);  assert(rc == 0);
    20f2:	2060      	movs	r0, #96	; 0x60
    20f4:	f7ff ff78 	bl	1fe8 <set_orientation>
    20f8:	b938      	cbnz	r0, 210a <pinetime_boot_display_image+0x2a>
    for (uint8_t row = 0; row < ROW_COUNT; row++) {
    20fa:	2600      	movs	r6, #0
    20fc:	e051      	b.n	21a2 <pinetime_boot_display_image+0xc2>
    int rc = init_display();  assert(rc == 0);
    20fe:	2300      	movs	r3, #0
    2100:	461a      	mov	r2, r3
    2102:	4619      	mov	r1, r3
    2104:	4618      	mov	r0, r3
    2106:	f7ff fb01 	bl	170c <__assert_func>
    rc = set_orientation(Landscape);  assert(rc == 0);
    210a:	2300      	movs	r3, #0
    210c:	461a      	mov	r2, r3
    210e:	4619      	mov	r1, r3
    2110:	4618      	mov	r0, r3
    2112:	f7ff fafb 	bl	170c <__assert_func>
            uint16_t len = (right - left + 1) * BYTES_PER_PIXEL;
    2116:	1be5      	subs	r5, r4, r7
    2118:	3501      	adds	r5, #1
    211a:	006d      	lsls	r5, r5, #1
    211c:	b2ad      	uxth	r5, r5
            uint32_t offset = ((top * COL_COUNT) + left) * BYTES_PER_PIXEL;
    211e:	ebc6 1306 	rsb	r3, r6, r6, lsl #4
    2122:	0119      	lsls	r1, r3, #4
    2124:	4439      	add	r1, r7
            int rc = hal_flash_read(FLASH_DEVICE, offset, flash_buffer, len); assert(rc == 0);
    2126:	462b      	mov	r3, r5
    2128:	4a24      	ldr	r2, [pc, #144]	; (21bc <pinetime_boot_display_image+0xdc>)
    212a:	0049      	lsls	r1, r1, #1
    212c:	2001      	movs	r0, #1
    212e:	f001 ff22 	bl	3f76 <hal_flash_read>
    2132:	b9e0      	cbnz	r0, 216e <pinetime_boot_display_image+0x8e>
            rc = set_window(left, top, right, bottom); assert(rc == 0);
    2134:	b2e4      	uxtb	r4, r4
    2136:	4633      	mov	r3, r6
    2138:	4622      	mov	r2, r4
    213a:	4631      	mov	r1, r6
    213c:	4638      	mov	r0, r7
    213e:	f7ff ff67 	bl	2010 <set_window>
    2142:	b9d0      	cbnz	r0, 217a <pinetime_boot_display_image+0x9a>
            rc = write_command(RAMWR, NULL, 0); assert(rc == 0);
    2144:	2200      	movs	r2, #0
    2146:	4611      	mov	r1, r2
    2148:	202c      	movs	r0, #44	; 0x2c
    214a:	f7ff fe7f 	bl	1e4c <write_command>
    214e:	b9d0      	cbnz	r0, 2186 <pinetime_boot_display_image+0xa6>
            rc = write_data(flash_buffer, len); assert(rc == 0);
    2150:	4629      	mov	r1, r5
    2152:	481a      	ldr	r0, [pc, #104]	; (21bc <pinetime_boot_display_image+0xdc>)
    2154:	f7ff fe6d 	bl	1e32 <write_data>
    2158:	b9d8      	cbnz	r0, 2192 <pinetime_boot_display_image+0xb2>
            left = right + 1;
    215a:	3401      	adds	r4, #1
    215c:	b2e7      	uxtb	r7, r4
            if (left >= COL_COUNT) { break; }
    215e:	2fef      	cmp	r7, #239	; 0xef
    2160:	d81d      	bhi.n	219e <pinetime_boot_display_image+0xbe>
            uint16_t right = left + batch_columns - 1;
    2162:	f107 047f 	add.w	r4, r7, #127	; 0x7f
            if (right >= COL_COUNT) { right = COL_COUNT - 1; }
    2166:	2cef      	cmp	r4, #239	; 0xef
    2168:	d9d5      	bls.n	2116 <pinetime_boot_display_image+0x36>
    216a:	24ef      	movs	r4, #239	; 0xef
    216c:	e7d3      	b.n	2116 <pinetime_boot_display_image+0x36>
            int rc = hal_flash_read(FLASH_DEVICE, offset, flash_buffer, len); assert(rc == 0);
    216e:	2300      	movs	r3, #0
    2170:	461a      	mov	r2, r3
    2172:	4619      	mov	r1, r3
    2174:	4618      	mov	r0, r3
    2176:	f7ff fac9 	bl	170c <__assert_func>
            rc = set_window(left, top, right, bottom); assert(rc == 0);
    217a:	2300      	movs	r3, #0
    217c:	461a      	mov	r2, r3
    217e:	4619      	mov	r1, r3
    2180:	4618      	mov	r0, r3
    2182:	f7ff fac3 	bl	170c <__assert_func>
            rc = write_command(RAMWR, NULL, 0); assert(rc == 0);
    2186:	2300      	movs	r3, #0
    2188:	461a      	mov	r2, r3
    218a:	4619      	mov	r1, r3
    218c:	4618      	mov	r0, r3
    218e:	f7ff fabd 	bl	170c <__assert_func>
            rc = write_data(flash_buffer, len); assert(rc == 0);
    2192:	2300      	movs	r3, #0
    2194:	461a      	mov	r2, r3
    2196:	4619      	mov	r1, r3
    2198:	4618      	mov	r0, r3
    219a:	f7ff fab7 	bl	170c <__assert_func>
    for (uint8_t row = 0; row < ROW_COUNT; row++) {
    219e:	3601      	adds	r6, #1
    21a0:	b2f6      	uxtb	r6, r6
    21a2:	2eef      	cmp	r6, #239	; 0xef
    21a4:	d801      	bhi.n	21aa <pinetime_boot_display_image+0xca>
        uint8_t left = 0;
    21a6:	2700      	movs	r7, #0
    21a8:	e7d9      	b.n	215e <pinetime_boot_display_image+0x7e>
    console_printf("Image displayed\n"); console_flush();
    21aa:	4805      	ldr	r0, [pc, #20]	; (21c0 <pinetime_boot_display_image+0xe0>)
    21ac:	f000 f83a 	bl	2224 <console_printf>
    21b0:	f000 f85c 	bl	226c <console_flush>
}
    21b4:	2000      	movs	r0, #0
    21b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21b8:	00005250 	.word	0x00005250
    21bc:	20004a90 	.word	0x20004a90
    21c0:	00005268 	.word	0x00005268

000021c4 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
    21c4:	b570      	push	{r4, r5, r6, lr}
    21c6:	4606      	mov	r6, r0
    21c8:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
    21ca:	2400      	movs	r4, #0
    21cc:	42ac      	cmp	r4, r5
    21ce:	da07      	bge.n	21e0 <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
    21d0:	5d30      	ldrb	r0, [r6, r4]
    21d2:	f000 f86d 	bl	22b0 <console_out_nolock>
    21d6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    21da:	d001      	beq.n	21e0 <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
    21dc:	3401      	adds	r4, #1
    21de:	e7f5      	b.n	21cc <console_write+0x8>
    }
}
    21e0:	bd70      	pop	{r4, r5, r6, pc}

000021e2 <console_blocking_mode>:

void console_blocking_mode(void) {
    21e2:	b508      	push	{r3, lr}
    disable_buffer();
    21e4:	f000 f860 	bl	22a8 <disable_buffer>
}
    21e8:	bd08      	pop	{r3, pc}
	...

000021ec <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
    21ec:	b510      	push	{r4, lr}
    21ee:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    os_eventq_init(&avail_queue);
    21f0:	4809      	ldr	r0, [pc, #36]	; (2218 <console_pkg_init+0x2c>)
    21f2:	f7ff fb60 	bl	18b6 <os_eventq_init>
    os_mutex_init(&console_write_lock);
    21f6:	4809      	ldr	r0, [pc, #36]	; (221c <console_pkg_init+0x30>)
    21f8:	f7ff fcd3 	bl	1ba2 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
    21fc:	f000 f86c 	bl	22d8 <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
    2200:	b138      	cbz	r0, 2212 <console_pkg_init+0x26>
    2202:	2000      	movs	r0, #0
    2204:	9000      	str	r0, [sp, #0]
    2206:	4b06      	ldr	r3, [pc, #24]	; (2220 <console_pkg_init+0x34>)
    2208:	681c      	ldr	r4, [r3, #0]
    220a:	4603      	mov	r3, r0
    220c:	4602      	mov	r2, r0
    220e:	4601      	mov	r1, r0
    2210:	47a0      	blx	r4
}
    2212:	b002      	add	sp, #8
    2214:	bd10      	pop	{r4, pc}
    2216:	bf00      	nop
    2218:	20004b90 	.word	0x20004b90
    221c:	20004ba0 	.word	0x20004ba0
    2220:	2000014c 	.word	0x2000014c

00002224 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
    2224:	b40f      	push	{r0, r1, r2, r3}
    2226:	b510      	push	{r4, lr}
    2228:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
    222a:	f000 f857 	bl	22dc <console_get_ticks>
    222e:	b160      	cbz	r0, 224a <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
    2230:	4b0c      	ldr	r3, [pc, #48]	; (2264 <console_printf+0x40>)
    2232:	681b      	ldr	r3, [r3, #0]
    2234:	b10b      	cbz	r3, 223a <console_printf+0x16>
    num_chars = 0;
    2236:	2400      	movs	r4, #0
    2238:	e008      	b.n	224c <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
    223a:	f7ff fc1f 	bl	1a7c <os_time_get>
    223e:	4601      	mov	r1, r0
    2240:	4809      	ldr	r0, [pc, #36]	; (2268 <console_printf+0x44>)
    2242:	f002 fa99 	bl	4778 <printf>
    2246:	4604      	mov	r4, r0
    2248:	e000      	b.n	224c <console_printf+0x28>
    num_chars = 0;
    224a:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
    224c:	a905      	add	r1, sp, #20
    224e:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
    2250:	9804      	ldr	r0, [sp, #16]
    2252:	f002 faa3 	bl	479c <vprintf>
    va_end(args);

    return num_chars;
}
    2256:	4420      	add	r0, r4
    2258:	b002      	add	sp, #8
    225a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    225e:	b004      	add	sp, #16
    2260:	4770      	bx	lr
    2262:	bf00      	nop
    2264:	20006414 	.word	0x20006414
    2268:	0000527c 	.word	0x0000527c

0000226c <console_flush>:
#endif  //  DISABLE_SEMIHOSTING
}

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
    226c:	b508      	push	{r3, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
    226e:	4b0b      	ldr	r3, [pc, #44]	; (229c <console_flush+0x30>)
    2270:	781b      	ldrb	r3, [r3, #0]
    2272:	b18b      	cbz	r3, 2298 <console_flush+0x2c>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
    2274:	4b0a      	ldr	r3, [pc, #40]	; (22a0 <console_flush+0x34>)
    2276:	6818      	ldr	r0, [r3, #0]
    2278:	b170      	cbz	r0, 2298 <console_flush+0x2c>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
    227a:	4b0a      	ldr	r3, [pc, #40]	; (22a4 <console_flush+0x38>)
    227c:	685b      	ldr	r3, [r3, #4]
    227e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
    2282:	b94b      	cbnz	r3, 2298 <console_flush+0x2c>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
    2284:	4b06      	ldr	r3, [pc, #24]	; (22a0 <console_flush+0x34>)
    2286:	2200      	movs	r2, #0
    2288:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
    228a:	4603      	mov	r3, r0
    while (m) {  //  For each mbuf in the chain...
    228c:	e000      	b.n	2290 <console_flush+0x24>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
    228e:	68db      	ldr	r3, [r3, #12]
    while (m) {  //  For each mbuf in the chain...
    2290:	2b00      	cmp	r3, #0
    2292:	d1fc      	bne.n	228e <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
    2294:	f7ff fc73 	bl	1b7e <os_mbuf_free_chain>
}
    2298:	bd08      	pop	{r3, pc}
    229a:	bf00      	nop
    229c:	20000148 	.word	0x20000148
    22a0:	20004bac 	.word	0x20004bac
    22a4:	e000ed00 	.word	0xe000ed00

000022a8 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
    22a8:	b508      	push	{r3, lr}
    22aa:	f7ff ffdf 	bl	226c <console_flush>
    22ae:	bd08      	pop	{r3, pc}

000022b0 <console_out_nolock>:
    console_buffer(&c, 1);  //  Append the char to the output buffer.
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}

int console_out_nolock(int character) {
    char c = (char)character;
    22b0:	b2c2      	uxtb	r2, r0
    if (g_silence_console) { return c; }
    22b2:	4b07      	ldr	r3, [pc, #28]	; (22d0 <console_out_nolock+0x20>)
    22b4:	781b      	ldrb	r3, [r3, #0]
    22b6:	b92b      	cbnz	r3, 22c4 <console_out_nolock+0x14>
    if ('\n' == c) {
    22b8:	2a0a      	cmp	r2, #10
    22ba:	d005      	beq.n	22c8 <console_out_nolock+0x18>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
    22bc:	4b05      	ldr	r3, [pc, #20]	; (22d4 <console_out_nolock+0x24>)
    22be:	2201      	movs	r2, #1
    22c0:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
    return character;
}
    22c2:	4770      	bx	lr
    22c4:	4610      	mov	r0, r2
    if (g_silence_console) { return c; }
    22c6:	4770      	bx	lr
        console_is_midline = 0;
    22c8:	4b02      	ldr	r3, [pc, #8]	; (22d4 <console_out_nolock+0x24>)
    22ca:	2200      	movs	r2, #0
    22cc:	601a      	str	r2, [r3, #0]
    22ce:	4770      	bx	lr
    22d0:	20006419 	.word	0x20006419
    22d4:	20006414 	.word	0x20006414

000022d8 <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
    22d8:	2000      	movs	r0, #0
    22da:	4770      	bx	lr

000022dc <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
    22dc:	4b01      	ldr	r3, [pc, #4]	; (22e4 <console_get_ticks+0x8>)
    22de:	7818      	ldrb	r0, [r3, #0]
    22e0:	4770      	bx	lr
    22e2:	bf00      	nop
    22e4:	20004bb0 	.word	0x20004bb0

000022e8 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
    22e8:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
    22ea:	f7ff fa0f 	bl	170c <__assert_func>
	...

000022f0 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
    22f0:	4b01      	ldr	r3, [pc, #4]	; (22f8 <sysinit_start+0x8>)
    22f2:	2201      	movs	r2, #1
    22f4:	701a      	strb	r2, [r3, #0]
}
    22f6:	4770      	bx	lr
    22f8:	2000641a 	.word	0x2000641a

000022fc <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
    22fc:	4b01      	ldr	r3, [pc, #4]	; (2304 <sysinit_end+0x8>)
    22fe:	2200      	movs	r2, #0
    2300:	701a      	strb	r2, [r3, #0]
}
    2302:	4770      	bx	lr
    2304:	2000641a 	.word	0x2000641a

00002308 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
    2308:	b570      	push	{r4, r5, r6, lr}
    230a:	b082      	sub	sp, #8
    230c:	460c      	mov	r4, r1
    230e:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
    2310:	b29d      	uxth	r5, r3
    2312:	9b07      	ldr	r3, [sp, #28]
    2314:	9300      	str	r3, [sp, #0]
    2316:	4603      	mov	r3, r0
    2318:	9a06      	ldr	r2, [sp, #24]
    231a:	4629      	mov	r1, r5
    231c:	4620      	mov	r0, r4
    231e:	f7ff fb0f 	bl	1940 <os_mempool_init>
    if (rc != 0) {
    2322:	b108      	cbz	r0, 2328 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
    2324:	b002      	add	sp, #8
    2326:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
    2328:	462b      	mov	r3, r5
    232a:	9a06      	ldr	r2, [sp, #24]
    232c:	b292      	uxth	r2, r2
    232e:	4621      	mov	r1, r4
    2330:	4630      	mov	r0, r6
    2332:	f7ff fc15 	bl	1b60 <os_mbuf_pool_init>
    2336:	e7f5      	b.n	2324 <mem_init_mbuf_pool+0x1c>

00002338 <sysinit_app>:
void modlog_init(void);
void pinetime_boot_init(void);

void
sysinit_app(void)
{
    2338:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
    233a:	f7ff faab 	bl	1894 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
    233e:	f002 fb1b 	bl	4978 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
    2342:	f7ff ff53 	bl	21ec <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
    2346:	f002 fc53 	bl	4bf0 <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
    234a:	f002 fb43 	bl	49d4 <modlog_init>

    /*** Stage 900 */
    /* 900.0: pinetime_boot_init (libs/pinetime_boot) */
    pinetime_boot_init();
    234e:	f7ff fca7 	bl	1ca0 <pinetime_boot_init>
}
    2352:	bd08      	pop	{r3, pc}

00002354 <boot_flag_decode>:
}

static int
boot_flag_decode(uint8_t flag)
{
    if (flag != BOOT_FLAG_SET) {
    2354:	2801      	cmp	r0, #1
    2356:	d101      	bne.n	235c <boot_flag_decode+0x8>
        return BOOT_FLAG_BAD;
    }
    return BOOT_FLAG_SET;
    2358:	2001      	movs	r0, #1
}
    235a:	4770      	bx	lr
        return BOOT_FLAG_BAD;
    235c:	2002      	movs	r0, #2
    235e:	4770      	bx	lr

00002360 <boot_magic_decode>:
{
    2360:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    2362:	2210      	movs	r2, #16
    2364:	4903      	ldr	r1, [pc, #12]	; (2374 <boot_magic_decode+0x14>)
    2366:	f7ff fc26 	bl	1bb6 <memcmp>
    236a:	b908      	cbnz	r0, 2370 <boot_magic_decode+0x10>
        return BOOT_MAGIC_GOOD;
    236c:	2001      	movs	r0, #1
}
    236e:	bd08      	pop	{r3, pc}
    return BOOT_MAGIC_BAD;
    2370:	2002      	movs	r0, #2
    2372:	e7fc      	b.n	236e <boot_magic_decode+0xe>
    2374:	00005288 	.word	0x00005288

00002378 <boot_find_status>:
 *
 * @returns 0 on success, -1 on errors
 */
static int
boot_find_status(int image_index, const struct flash_area **fap)
{
    2378:	b530      	push	{r4, r5, lr}
    237a:	b087      	sub	sp, #28
    237c:	460d      	mov	r5, r1
    uint32_t magic[BOOT_MAGIC_ARR_SZ];
    uint32_t off;
    uint8_t areas[2] = {
    237e:	4b14      	ldr	r3, [pc, #80]	; (23d0 <boot_find_status+0x58>)
    2380:	881b      	ldrh	r3, [r3, #0]
    2382:	f8ad 3004 	strh.w	r3, [sp, #4]
     * Both "slots" can end up being temporary storage for a swap and it
     * is assumed that if magic is valid then other metadata is too,
     * because magic is always written in the last step.
     */

    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
    2386:	2400      	movs	r4, #0
    2388:	e000      	b.n	238c <boot_find_status+0x14>
    238a:	3401      	adds	r4, #1
    238c:	2c01      	cmp	r4, #1
    238e:	d81a      	bhi.n	23c6 <boot_find_status+0x4e>
        rc = flash_area_open(areas[i], fap);
    2390:	4629      	mov	r1, r5
    2392:	ab06      	add	r3, sp, #24
    2394:	4423      	add	r3, r4
    2396:	f813 0c14 	ldrb.w	r0, [r3, #-20]
    239a:	f002 fa45 	bl	4828 <flash_area_open>
        if (rc != 0) {
    239e:	4603      	mov	r3, r0
    23a0:	b998      	cbnz	r0, 23ca <boot_find_status+0x52>
            return rc;
        }

        off = boot_magic_off(*fap);
    23a2:	6828      	ldr	r0, [r5, #0]
    return fap->fa_size - BOOT_MAGIC_SZ;
    23a4:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
    23a6:	2310      	movs	r3, #16
    23a8:	aa02      	add	r2, sp, #8
    23aa:	3910      	subs	r1, #16
    23ac:	f002 fa9a 	bl	48e4 <flash_area_read>
        if (rc != 0) {
    23b0:	4603      	mov	r3, r0
    23b2:	b950      	cbnz	r0, 23ca <boot_find_status+0x52>
            flash_area_close(*fap);
            return rc;
        }

        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    23b4:	2210      	movs	r2, #16
    23b6:	4907      	ldr	r1, [pc, #28]	; (23d4 <boot_find_status+0x5c>)
    23b8:	a802      	add	r0, sp, #8
    23ba:	f7ff fbfc 	bl	1bb6 <memcmp>
    23be:	4603      	mov	r3, r0
    23c0:	2800      	cmp	r0, #0
    23c2:	d1e2      	bne.n	238a <boot_find_status+0x12>
    23c4:	e001      	b.n	23ca <boot_find_status+0x52>

        flash_area_close(*fap);
    }

    /* If we got here, no magic was found */
    return -1;
    23c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
    23ca:	4618      	mov	r0, r3
    23cc:	b007      	add	sp, #28
    23ce:	bd30      	pop	{r4, r5, pc}
    23d0:	00005284 	.word	0x00005284
    23d4:	00005288 	.word	0x00005288

000023d8 <boot_write_trailer>:
 * @returns 0 on success, != 0 on error.
 */
static int
boot_write_trailer(const struct flash_area *fap, uint32_t off,
        const uint8_t *inbuf, uint8_t inlen)
{
    23d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    23dc:	b083      	sub	sp, #12
    23de:	4606      	mov	r6, r0
    23e0:	460f      	mov	r7, r1
    23e2:	4690      	mov	r8, r2
    23e4:	461c      	mov	r4, r3
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
    23e6:	f002 fab6 	bl	4956 <flash_area_align>
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
    23ea:	2c08      	cmp	r4, #8
    23ec:	d823      	bhi.n	2436 <boot_write_trailer+0x5e>
    23ee:	4605      	mov	r5, r0
    23f0:	2808      	cmp	r0, #8
    23f2:	d823      	bhi.n	243c <boot_write_trailer+0x64>
        return -1;
    }
    erased_val = flash_area_erased_val(fap);
    23f4:	4630      	mov	r0, r6
    23f6:	f002 fab3 	bl	4960 <flash_area_erased_val>
    23fa:	4681      	mov	r9, r0
    if (align < inlen) {
    23fc:	42a5      	cmp	r5, r4
    23fe:	d200      	bcs.n	2402 <boot_write_trailer+0x2a>
        align = inlen;
    2400:	4625      	mov	r5, r4
    }
    memcpy(buf, inbuf, inlen);
    2402:	4622      	mov	r2, r4
    2404:	4641      	mov	r1, r8
    2406:	4668      	mov	r0, sp
    2408:	f7ff fbf9 	bl	1bfe <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    240c:	1b2a      	subs	r2, r5, r4
    240e:	fa5f f189 	uxtb.w	r1, r9
    2412:	eb0d 0004 	add.w	r0, sp, r4
    2416:	f7ff fbff 	bl	1c18 <memset>

    rc = flash_area_write(fap, off, buf, align);
    241a:	462b      	mov	r3, r5
    241c:	466a      	mov	r2, sp
    241e:	4639      	mov	r1, r7
    2420:	4630      	mov	r0, r6
    2422:	f002 fa72 	bl	490a <flash_area_write>
    if (rc != 0) {
    2426:	4603      	mov	r3, r0
    2428:	b918      	cbnz	r0, 2432 <boot_write_trailer+0x5a>
        return BOOT_EFLASH;
    }

    return 0;
}
    242a:	4618      	mov	r0, r3
    242c:	b003      	add	sp, #12
    242e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return BOOT_EFLASH;
    2432:	2301      	movs	r3, #1
    2434:	e7f9      	b.n	242a <boot_write_trailer+0x52>
        return -1;
    2436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    243a:	e7f6      	b.n	242a <boot_write_trailer+0x52>
    243c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2440:	e7f3      	b.n	242a <boot_write_trailer+0x52>

00002442 <boot_write_trailer_flag>:

static int
boot_write_trailer_flag(const struct flash_area *fap, uint32_t off,
        uint8_t flag_val)
{
    2442:	b510      	push	{r4, lr}
    2444:	b082      	sub	sp, #8
    const uint8_t buf[1] = { flag_val };
    2446:	ac02      	add	r4, sp, #8
    2448:	f804 2d04 	strb.w	r2, [r4, #-4]!
    return boot_write_trailer(fap, off, buf, 1);
    244c:	2301      	movs	r3, #1
    244e:	4622      	mov	r2, r4
    2450:	f7ff ffc2 	bl	23d8 <boot_write_trailer>
}
    2454:	b002      	add	sp, #8
    2456:	bd10      	pop	{r4, pc}

00002458 <boot_magic_compatible_check>:
    switch (tbl_val) {
    2458:	2804      	cmp	r0, #4
    245a:	d00b      	beq.n	2474 <boot_magic_compatible_check+0x1c>
    245c:	2805      	cmp	r0, #5
    245e:	d104      	bne.n	246a <boot_magic_compatible_check+0x12>
        return val != BOOT_MAGIC_GOOD;
    2460:	f111 30ff 	adds.w	r0, r1, #4294967295	; 0xffffffff
    2464:	bf18      	it	ne
    2466:	2001      	movne	r0, #1
    2468:	4770      	bx	lr
        return tbl_val == val;
    246a:	4288      	cmp	r0, r1
    246c:	bf14      	ite	ne
    246e:	2000      	movne	r0, #0
    2470:	2001      	moveq	r0, #1
    2472:	4770      	bx	lr
        return 1;
    2474:	2001      	movs	r0, #1
}
    2476:	4770      	bx	lr

00002478 <boot_status_sz>:
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
    2478:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    247c:	01d8      	lsls	r0, r3, #7
}
    247e:	4770      	bx	lr

00002480 <boot_trailer_sz>:
{
    2480:	b508      	push	{r3, lr}
           boot_status_sz(min_write_sz)           +
    2482:	f7ff fff9 	bl	2478 <boot_status_sz>
}
    2486:	3030      	adds	r0, #48	; 0x30
    2488:	bd08      	pop	{r3, pc}

0000248a <boot_status_entries>:
    if (fap->fa_id == FLASH_AREA_IMAGE_SCRATCH) {
    248a:	780b      	ldrb	r3, [r1, #0]
    248c:	2b03      	cmp	r3, #3
    248e:	d006      	beq.n	249e <boot_status_entries+0x14>
    if (fap->fa_id == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    2490:	3b01      	subs	r3, #1
    2492:	b2db      	uxtb	r3, r3
    2494:	2b01      	cmp	r3, #1
    2496:	d804      	bhi.n	24a2 <boot_status_entries+0x18>
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    2498:	f44f 70c0 	mov.w	r0, #384	; 0x180
    249c:	4770      	bx	lr
        return BOOT_STATUS_STATE_COUNT;
    249e:	2003      	movs	r0, #3
    24a0:	4770      	bx	lr
    return -1;
    24a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    24a6:	4770      	bx	lr

000024a8 <boot_status_off>:
{
    24a8:	b510      	push	{r4, lr}
    24aa:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    24ac:	f002 fa53 	bl	4956 <flash_area_align>
    off_from_end = boot_trailer_sz(elem_sz);
    24b0:	f7ff ffe6 	bl	2480 <boot_trailer_sz>
    assert(off_from_end <= fap->fa_size);
    24b4:	68a3      	ldr	r3, [r4, #8]
    24b6:	4283      	cmp	r3, r0
    24b8:	d301      	bcc.n	24be <boot_status_off+0x16>
}
    24ba:	1a18      	subs	r0, r3, r0
    24bc:	bd10      	pop	{r4, pc}
    assert(off_from_end <= fap->fa_size);
    24be:	2300      	movs	r3, #0
    24c0:	461a      	mov	r2, r3
    24c2:	4619      	mov	r1, r3
    24c4:	4618      	mov	r0, r3
    24c6:	f7ff f921 	bl	170c <__assert_func>

000024ca <boot_swap_info_off>:
    return fap->fa_size - BOOT_MAGIC_SZ;
    24ca:	6880      	ldr	r0, [r0, #8]
}
    24cc:	3828      	subs	r0, #40	; 0x28
    24ce:	4770      	bx	lr

000024d0 <boot_read_swap_state>:
{
    24d0:	b530      	push	{r4, r5, lr}
    24d2:	b087      	sub	sp, #28
    24d4:	4604      	mov	r4, r0
    24d6:	460d      	mov	r5, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
    24d8:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
    24da:	2310      	movs	r3, #16
    24dc:	aa02      	add	r2, sp, #8
    24de:	3910      	subs	r1, #16
    24e0:	f002 fa43 	bl	496a <flash_area_read_is_empty>
    if (rc < 0) {
    24e4:	2800      	cmp	r0, #0
    24e6:	db4a      	blt.n	257e <boot_read_swap_state+0xae>
    if (rc == 1) {
    24e8:	2801      	cmp	r0, #1
    24ea:	d03e      	beq.n	256a <boot_read_swap_state+0x9a>
        state->magic = boot_magic_decode(magic);
    24ec:	a802      	add	r0, sp, #8
    24ee:	f7ff ff37 	bl	2360 <boot_magic_decode>
    24f2:	7028      	strb	r0, [r5, #0]
    off = boot_swap_info_off(fap);
    24f4:	4620      	mov	r0, r4
    24f6:	f7ff ffe8 	bl	24ca <boot_swap_info_off>
    rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    24fa:	2301      	movs	r3, #1
    24fc:	f10d 0207 	add.w	r2, sp, #7
    2500:	4601      	mov	r1, r0
    2502:	4620      	mov	r0, r4
    2504:	f002 fa31 	bl	496a <flash_area_read_is_empty>
    if (rc < 0) {
    2508:	2800      	cmp	r0, #0
    250a:	db3b      	blt.n	2584 <boot_read_swap_state+0xb4>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    250c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2510:	f003 020f 	and.w	r2, r3, #15
    2514:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    2516:	091b      	lsrs	r3, r3, #4
    2518:	712b      	strb	r3, [r5, #4]
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
    251a:	2801      	cmp	r0, #1
    251c:	d001      	beq.n	2522 <boot_read_swap_state+0x52>
    251e:	2a04      	cmp	r2, #4
    2520:	d903      	bls.n	252a <boot_read_swap_state+0x5a>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    2522:	2301      	movs	r3, #1
    2524:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
    2526:	2300      	movs	r3, #0
    2528:	712b      	strb	r3, [r5, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
    252a:	68a1      	ldr	r1, [r4, #8]
    rc = flash_area_read_is_empty(fap, off, &state->copy_done,
    252c:	2301      	movs	r3, #1
    252e:	1caa      	adds	r2, r5, #2
    2530:	3920      	subs	r1, #32
    2532:	4620      	mov	r0, r4
    2534:	f002 fa19 	bl	496a <flash_area_read_is_empty>
    if (rc < 0) {
    2538:	2800      	cmp	r0, #0
    253a:	db25      	blt.n	2588 <boot_read_swap_state+0xb8>
    if (rc == 1) {
    253c:	2801      	cmp	r0, #1
    253e:	d017      	beq.n	2570 <boot_read_swap_state+0xa0>
        state->copy_done = boot_flag_decode(state->copy_done);
    2540:	78a8      	ldrb	r0, [r5, #2]
    2542:	f7ff ff07 	bl	2354 <boot_flag_decode>
    2546:	70a8      	strb	r0, [r5, #2]
    return fap->fa_size - BOOT_MAGIC_SZ;
    2548:	68a1      	ldr	r1, [r4, #8]
    rc = flash_area_read_is_empty(fap, off, &state->image_ok,
    254a:	2301      	movs	r3, #1
    254c:	1cea      	adds	r2, r5, #3
    254e:	3918      	subs	r1, #24
    2550:	4620      	mov	r0, r4
    2552:	f002 fa0a 	bl	496a <flash_area_read_is_empty>
    if (rc < 0) {
    2556:	2800      	cmp	r0, #0
    2558:	db18      	blt.n	258c <boot_read_swap_state+0xbc>
    if (rc == 1) {
    255a:	2801      	cmp	r0, #1
    255c:	d00b      	beq.n	2576 <boot_read_swap_state+0xa6>
        state->image_ok = boot_flag_decode(state->image_ok);
    255e:	78e8      	ldrb	r0, [r5, #3]
    2560:	f7ff fef8 	bl	2354 <boot_flag_decode>
    2564:	70e8      	strb	r0, [r5, #3]
    return 0;
    2566:	2000      	movs	r0, #0
    2568:	e00a      	b.n	2580 <boot_read_swap_state+0xb0>
        state->magic = BOOT_MAGIC_UNSET;
    256a:	2303      	movs	r3, #3
    256c:	702b      	strb	r3, [r5, #0]
    256e:	e7c1      	b.n	24f4 <boot_read_swap_state+0x24>
        state->copy_done = BOOT_FLAG_UNSET;
    2570:	2303      	movs	r3, #3
    2572:	70ab      	strb	r3, [r5, #2]
    2574:	e7e8      	b.n	2548 <boot_read_swap_state+0x78>
        state->image_ok = BOOT_FLAG_UNSET;
    2576:	2303      	movs	r3, #3
    2578:	70eb      	strb	r3, [r5, #3]
    return 0;
    257a:	2000      	movs	r0, #0
    257c:	e000      	b.n	2580 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    257e:	2001      	movs	r0, #1
}
    2580:	b007      	add	sp, #28
    2582:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
    2584:	2001      	movs	r0, #1
    2586:	e7fb      	b.n	2580 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    2588:	2001      	movs	r0, #1
    258a:	e7f9      	b.n	2580 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    258c:	2001      	movs	r0, #1
    258e:	e7f7      	b.n	2580 <boot_read_swap_state+0xb0>

00002590 <boot_read_swap_state_by_id>:
{
    2590:	b510      	push	{r4, lr}
    2592:	b082      	sub	sp, #8
    2594:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    2596:	a901      	add	r1, sp, #4
    2598:	b2c0      	uxtb	r0, r0
    259a:	f002 f945 	bl	4828 <flash_area_open>
    if (rc != 0) {
    259e:	b110      	cbz	r0, 25a6 <boot_read_swap_state_by_id+0x16>
        return BOOT_EFLASH;
    25a0:	2001      	movs	r0, #1
}
    25a2:	b002      	add	sp, #8
    25a4:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
    25a6:	4621      	mov	r1, r4
    25a8:	9801      	ldr	r0, [sp, #4]
    25aa:	f7ff ff91 	bl	24d0 <boot_read_swap_state>
    return rc;
    25ae:	e7f8      	b.n	25a2 <boot_read_swap_state_by_id+0x12>

000025b0 <boot_read_swap_size>:
{
    25b0:	b530      	push	{r4, r5, lr}
    25b2:	b083      	sub	sp, #12
    25b4:	460c      	mov	r4, r1
    rc = boot_find_status(image_index, &fap);
    25b6:	a901      	add	r1, sp, #4
    25b8:	f7ff fede 	bl	2378 <boot_find_status>
    if (rc == 0) {
    25bc:	4603      	mov	r3, r0
    25be:	b110      	cbz	r0, 25c6 <boot_read_swap_size+0x16>
}
    25c0:	4618      	mov	r0, r3
    25c2:	b003      	add	sp, #12
    25c4:	bd30      	pop	{r4, r5, pc}
        off = boot_swap_size_off(fap);
    25c6:	9d01      	ldr	r5, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    25c8:	4628      	mov	r0, r5
    25ca:	f7ff ff7e 	bl	24ca <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
    25ce:	2304      	movs	r3, #4
    25d0:	4622      	mov	r2, r4
    25d2:	f1a0 0108 	sub.w	r1, r0, #8
    25d6:	4628      	mov	r0, r5
    25d8:	f002 f984 	bl	48e4 <flash_area_read>
    25dc:	4603      	mov	r3, r0
    return rc;
    25de:	e7ef      	b.n	25c0 <boot_read_swap_size+0x10>

000025e0 <boot_write_magic>:
{
    25e0:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    25e2:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    25e4:	2310      	movs	r3, #16
    25e6:	4a05      	ldr	r2, [pc, #20]	; (25fc <boot_write_magic+0x1c>)
    25e8:	3910      	subs	r1, #16
    25ea:	f002 f98e 	bl	490a <flash_area_write>
    if (rc != 0) {
    25ee:	4603      	mov	r3, r0
    25f0:	b908      	cbnz	r0, 25f6 <boot_write_magic+0x16>
}
    25f2:	4618      	mov	r0, r3
    25f4:	bd08      	pop	{r3, pc}
        return BOOT_EFLASH;
    25f6:	2301      	movs	r3, #1
    25f8:	e7fb      	b.n	25f2 <boot_write_magic+0x12>
    25fa:	bf00      	nop
    25fc:	00005288 	.word	0x00005288

00002600 <boot_write_copy_done>:

int
boot_write_copy_done(const struct flash_area *fap)
{
    2600:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    2602:	6881      	ldr	r1, [r0, #8]

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    2604:	2201      	movs	r2, #1
    2606:	3920      	subs	r1, #32
    2608:	f7ff ff1b 	bl	2442 <boot_write_trailer_flag>
}
    260c:	bd08      	pop	{r3, pc}

0000260e <boot_write_image_ok>:

int
boot_write_image_ok(const struct flash_area *fap)
{
    260e:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    2610:	6881      	ldr	r1, [r0, #8]

    off = boot_image_ok_off(fap);
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    2612:	2201      	movs	r2, #1
    2614:	3918      	subs	r1, #24
    2616:	f7ff ff14 	bl	2442 <boot_write_trailer_flag>
}
    261a:	bd08      	pop	{r3, pc}

0000261c <boot_write_swap_info>:
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_info(const struct flash_area *fap, uint8_t swap_type,
                     uint8_t image_num)
{
    261c:	b530      	push	{r4, r5, lr}
    261e:	b083      	sub	sp, #12
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    2620:	2a0e      	cmp	r2, #14
    2622:	d811      	bhi.n	2648 <boot_write_swap_info+0x2c>
    2624:	4605      	mov	r5, r0
    2626:	290e      	cmp	r1, #14
    2628:	d814      	bhi.n	2654 <boot_write_swap_info+0x38>
    262a:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    262e:	ac02      	add	r4, sp, #8
    2630:	f804 1d01 	strb.w	r1, [r4, #-1]!
    off = boot_swap_info_off(fap);
    2634:	f7ff ff49 	bl	24ca <boot_swap_info_off>
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off), swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    2638:	2301      	movs	r3, #1
    263a:	4622      	mov	r2, r4
    263c:	4601      	mov	r1, r0
    263e:	4628      	mov	r0, r5
    2640:	f7ff feca 	bl	23d8 <boot_write_trailer>
}
    2644:	b003      	add	sp, #12
    2646:	bd30      	pop	{r4, r5, pc}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    2648:	2300      	movs	r3, #0
    264a:	461a      	mov	r2, r3
    264c:	4619      	mov	r1, r3
    264e:	4618      	mov	r0, r3
    2650:	f7ff f85c 	bl	170c <__assert_func>
    2654:	2300      	movs	r3, #0
    2656:	461a      	mov	r2, r3
    2658:	4619      	mov	r1, r3
    265a:	4618      	mov	r0, r3
    265c:	f7ff f856 	bl	170c <__assert_func>

00002660 <boot_write_swap_size>:

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    2660:	b530      	push	{r4, r5, lr}
    2662:	b083      	sub	sp, #12
    2664:	4605      	mov	r5, r0
    2666:	ac02      	add	r4, sp, #8
    2668:	f844 1d04 	str.w	r1, [r4, #-4]!
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    266c:	f7ff ff2d 	bl	24ca <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)fap->fa_off + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    2670:	2304      	movs	r3, #4
    2672:	4622      	mov	r2, r4
    2674:	f1a0 0108 	sub.w	r1, r0, #8
    2678:	4628      	mov	r0, r5
    267a:	f7ff fead 	bl	23d8 <boot_write_trailer>
}
    267e:	b003      	add	sp, #12
    2680:	bd30      	pop	{r4, r5, pc}
	...

00002684 <boot_swap_type_multi>:
}
#endif

int
boot_swap_type_multi(int image_index)
{
    2684:	b530      	push	{r4, r5, lr}
    2686:	b085      	sub	sp, #20
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    2688:	a902      	add	r1, sp, #8
    268a:	2001      	movs	r0, #1
    268c:	f7ff ff80 	bl	2590 <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
    2690:	2800      	cmp	r0, #0
    2692:	d150      	bne.n	2736 <boot_swap_type_multi+0xb2>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    2694:	4669      	mov	r1, sp
    2696:	2002      	movs	r0, #2
    2698:	f7ff ff7a 	bl	2590 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
    269c:	2800      	cmp	r0, #0
    269e:	d14d      	bne.n	273c <boot_swap_type_multi+0xb8>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    26a0:	2400      	movs	r4, #0
    26a2:	e007      	b.n	26b4 <boot_swap_type_multi+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    26a4:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    26a6:	2b04      	cmp	r3, #4
    26a8:	d028      	beq.n	26fc <boot_swap_type_multi+0x78>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    26aa:	f89d 200a 	ldrb.w	r2, [sp, #10]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    26ae:	4293      	cmp	r3, r2
    26b0:	d024      	beq.n	26fc <boot_swap_type_multi+0x78>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    26b2:	3401      	adds	r4, #1
    26b4:	2c02      	cmp	r4, #2
    26b6:	d839      	bhi.n	272c <boot_swap_type_multi+0xa8>
        table = boot_swap_tables + i;
    26b8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    26bc:	0053      	lsls	r3, r2, #1
    26be:	4a20      	ldr	r2, [pc, #128]	; (2740 <boot_swap_type_multi+0xbc>)
    26c0:	18d5      	adds	r5, r2, r3
        if (boot_magic_compatible_check(table->magic_primary_slot,
    26c2:	f89d 1008 	ldrb.w	r1, [sp, #8]
    26c6:	5cd0      	ldrb	r0, [r2, r3]
    26c8:	f7ff fec6 	bl	2458 <boot_magic_compatible_check>
    26cc:	2800      	cmp	r0, #0
    26ce:	d0f0      	beq.n	26b2 <boot_swap_type_multi+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
    26d0:	f89d 1000 	ldrb.w	r1, [sp]
    26d4:	7868      	ldrb	r0, [r5, #1]
    26d6:	f7ff febf 	bl	2458 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    26da:	2800      	cmp	r0, #0
    26dc:	d0e9      	beq.n	26b2 <boot_swap_type_multi+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    26de:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
    26e0:	2b04      	cmp	r3, #4
    26e2:	d003      	beq.n	26ec <boot_swap_type_multi+0x68>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    26e4:	f89d 200b 	ldrb.w	r2, [sp, #11]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    26e8:	4293      	cmp	r3, r2
    26ea:	d1e2      	bne.n	26b2 <boot_swap_type_multi+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    26ec:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    26ee:	2b04      	cmp	r3, #4
    26f0:	d0d8      	beq.n	26a4 <boot_swap_type_multi+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    26f2:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    26f6:	4293      	cmp	r3, r2
    26f8:	d1db      	bne.n	26b2 <boot_swap_type_multi+0x2e>
    26fa:	e7d3      	b.n	26a4 <boot_swap_type_multi+0x20>
            BOOT_LOG_INF("Swap type: %s",
    26fc:	796b      	ldrb	r3, [r5, #5]
    26fe:	2b02      	cmp	r3, #2
    2700:	d007      	beq.n	2712 <boot_swap_type_multi+0x8e>
    2702:	2b03      	cmp	r3, #3
    2704:	d010      	beq.n	2728 <boot_swap_type_multi+0xa4>
    2706:	2b04      	cmp	r3, #4
    2708:	d001      	beq.n	270e <boot_swap_type_multi+0x8a>
    270a:	490e      	ldr	r1, [pc, #56]	; (2744 <boot_swap_type_multi+0xc0>)
    270c:	e002      	b.n	2714 <boot_swap_type_multi+0x90>
    270e:	490e      	ldr	r1, [pc, #56]	; (2748 <boot_swap_type_multi+0xc4>)
    2710:	e000      	b.n	2714 <boot_swap_type_multi+0x90>
    2712:	490e      	ldr	r1, [pc, #56]	; (274c <boot_swap_type_multi+0xc8>)
    2714:	480e      	ldr	r0, [pc, #56]	; (2750 <boot_swap_type_multi+0xcc>)
    2716:	f002 f82f 	bl	4778 <printf>
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    271a:	7968      	ldrb	r0, [r5, #5]
                    table->swap_type != BOOT_SWAP_TYPE_PERM &&
    271c:	1e83      	subs	r3, r0, #2
    271e:	b2db      	uxtb	r3, r3
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    2720:	2b02      	cmp	r3, #2
    2722:	d909      	bls.n	2738 <boot_swap_type_multi+0xb4>
                    table->swap_type != BOOT_SWAP_TYPE_REVERT) {
                return BOOT_SWAP_TYPE_PANIC;
    2724:	20ff      	movs	r0, #255	; 0xff
    2726:	e007      	b.n	2738 <boot_swap_type_multi+0xb4>
            BOOT_LOG_INF("Swap type: %s",
    2728:	490a      	ldr	r1, [pc, #40]	; (2754 <boot_swap_type_multi+0xd0>)
    272a:	e7f3      	b.n	2714 <boot_swap_type_multi+0x90>
            }
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    272c:	480a      	ldr	r0, [pc, #40]	; (2758 <boot_swap_type_multi+0xd4>)
    272e:	f001 fd4d 	bl	41cc <puts>
    return BOOT_SWAP_TYPE_NONE;
    2732:	2001      	movs	r0, #1
    2734:	e000      	b.n	2738 <boot_swap_type_multi+0xb4>
        return BOOT_SWAP_TYPE_PANIC;
    2736:	20ff      	movs	r0, #255	; 0xff
}
    2738:	b005      	add	sp, #20
    273a:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
    273c:	20ff      	movs	r0, #255	; 0xff
    273e:	e7fb      	b.n	2738 <boot_swap_type_multi+0xb4>
    2740:	00005298 	.word	0x00005298
    2744:	000052bc 	.word	0x000052bc
    2748:	000052d0 	.word	0x000052d0
    274c:	000052b4 	.word	0x000052b4
    2750:	000052d8 	.word	0x000052d8
    2754:	000052ac 	.word	0x000052ac
    2758:	000052f0 	.word	0x000052f0

0000275c <boot_set_pending>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending(int permanent)
{
    275c:	b510      	push	{r4, lr}
    275e:	b084      	sub	sp, #16
    2760:	4604      	mov	r4, r0
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(0),
    2762:	a901      	add	r1, sp, #4
    2764:	2002      	movs	r0, #2
    2766:	f7ff ff13 	bl	2590 <boot_read_swap_state_by_id>
                                    &state_secondary_slot);
    if (rc != 0) {
    276a:	4603      	mov	r3, r0
    276c:	bb88      	cbnz	r0, 27d2 <boot_set_pending+0x76>
        return rc;
    }

    switch (state_secondary_slot.magic) {
    276e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    2772:	2a02      	cmp	r2, #2
    2774:	d027      	beq.n	27c6 <boot_set_pending+0x6a>
    2776:	2a03      	cmp	r2, #3
    2778:	d007      	beq.n	278a <boot_set_pending+0x2e>
    277a:	2a01      	cmp	r2, #1
    277c:	d029      	beq.n	27d2 <boot_set_pending+0x76>
        flash_area_erase(fap, 0, fap->fa_size);
        flash_area_close(fap);
        return BOOT_EBADIMAGE;

    default:
        assert(0);
    277e:	2300      	movs	r3, #0
    2780:	461a      	mov	r2, r3
    2782:	4619      	mov	r1, r3
    2784:	4618      	mov	r0, r3
    2786:	f7fe ffc1 	bl	170c <__assert_func>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(0), &fap);
    278a:	a903      	add	r1, sp, #12
    278c:	2002      	movs	r0, #2
    278e:	f002 f84b 	bl	4828 <flash_area_open>
        if (rc != 0) {
    2792:	b148      	cbz	r0, 27a8 <boot_set_pending+0x4c>
            rc = BOOT_EFLASH;
    2794:	2301      	movs	r3, #1
        if (rc == 0) {
    2796:	b9e3      	cbnz	r3, 27d2 <boot_set_pending+0x76>
            if (permanent) {
    2798:	b99c      	cbnz	r4, 27c2 <boot_set_pending+0x66>
                swap_type = BOOT_SWAP_TYPE_TEST;
    279a:	2102      	movs	r1, #2
            rc = boot_write_swap_info(fap, swap_type, 0);
    279c:	2200      	movs	r2, #0
    279e:	9803      	ldr	r0, [sp, #12]
    27a0:	f7ff ff3c 	bl	261c <boot_write_swap_info>
    27a4:	4603      	mov	r3, r0
    27a6:	e014      	b.n	27d2 <boot_set_pending+0x76>
            rc = boot_write_magic(fap);
    27a8:	9803      	ldr	r0, [sp, #12]
    27aa:	f7ff ff19 	bl	25e0 <boot_write_magic>
        if (rc == 0 && permanent) {
    27ae:	4603      	mov	r3, r0
    27b0:	2800      	cmp	r0, #0
    27b2:	d1f0      	bne.n	2796 <boot_set_pending+0x3a>
    27b4:	2c00      	cmp	r4, #0
    27b6:	d0ee      	beq.n	2796 <boot_set_pending+0x3a>
            rc = boot_write_image_ok(fap);
    27b8:	9803      	ldr	r0, [sp, #12]
    27ba:	f7ff ff28 	bl	260e <boot_write_image_ok>
    27be:	4603      	mov	r3, r0
    27c0:	e7e9      	b.n	2796 <boot_set_pending+0x3a>
                swap_type = BOOT_SWAP_TYPE_PERM;
    27c2:	2103      	movs	r1, #3
    27c4:	e7ea      	b.n	279c <boot_set_pending+0x40>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(0), &fap);
    27c6:	a903      	add	r1, sp, #12
    27c8:	2002      	movs	r0, #2
    27ca:	f002 f82d 	bl	4828 <flash_area_open>
        if (rc != 0) {
    27ce:	b118      	cbz	r0, 27d8 <boot_set_pending+0x7c>
            return BOOT_EFLASH;
    27d0:	2301      	movs	r3, #1
        return BOOT_EBADIMAGE;
    }
}
    27d2:	4618      	mov	r0, r3
    27d4:	b004      	add	sp, #16
    27d6:	bd10      	pop	{r4, pc}
        flash_area_erase(fap, 0, fap->fa_size);
    27d8:	9803      	ldr	r0, [sp, #12]
    27da:	6882      	ldr	r2, [r0, #8]
    27dc:	2100      	movs	r1, #0
    27de:	f002 f8a7 	bl	4930 <flash_area_erase>
        return BOOT_EBADIMAGE;
    27e2:	2303      	movs	r3, #3
    27e4:	e7f5      	b.n	27d2 <boot_set_pending+0x76>
	...

000027e8 <boot_is_header_valid>:
static bool
boot_is_header_valid(const struct image_header *hdr, const struct flash_area *fap)
{
    uint32_t size;

    if (hdr->ih_magic != IMAGE_MAGIC) {
    27e8:	6802      	ldr	r2, [r0, #0]
    27ea:	4b0e      	ldr	r3, [pc, #56]	; (2824 <boot_is_header_valid+0x3c>)
    27ec:	429a      	cmp	r2, r3
    27ee:	d001      	beq.n	27f4 <boot_is_header_valid+0xc>
        return false;
    27f0:	2000      	movs	r0, #0
    27f2:	4770      	bx	lr
    }

    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    27f4:	68c2      	ldr	r2, [r0, #12]
    27f6:	8903      	ldrh	r3, [r0, #8]
{
    /*
     * "a + b <= UINT32_MAX", subtract 'b' from both sides to avoid
     * the overflow.
     */
    if (a > UINT32_MAX - b) {
    27f8:	43d8      	mvns	r0, r3
    27fa:	4282      	cmp	r2, r0
    27fc:	d80a      	bhi.n	2814 <boot_is_header_valid+0x2c>
{
    27fe:	b410      	push	{r4}
        return false;
    } else {
        *dest = a + b;
    2800:	18d4      	adds	r4, r2, r3
        return true;
    2802:	2001      	movs	r0, #1
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    2804:	b110      	cbz	r0, 280c <boot_is_header_valid+0x24>
        return false;
    }

    if (size >= fap->fa_size) {
    2806:	688b      	ldr	r3, [r1, #8]
    2808:	42a3      	cmp	r3, r4
    280a:	d901      	bls.n	2810 <boot_is_header_valid+0x28>
        return false;
    }

    return true;
}
    280c:	bc10      	pop	{r4}
    280e:	4770      	bx	lr
        return false;
    2810:	2000      	movs	r0, #0
    2812:	e7fb      	b.n	280c <boot_is_header_valid+0x24>
        return false;
    2814:	2000      	movs	r0, #0
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    2816:	b110      	cbz	r0, 281e <boot_is_header_valid+0x36>
    if (size >= fap->fa_size) {
    2818:	688b      	ldr	r3, [r1, #8]
    281a:	42a3      	cmp	r3, r4
    281c:	d900      	bls.n	2820 <boot_is_header_valid+0x38>
}
    281e:	4770      	bx	lr
        return false;
    2820:	2000      	movs	r0, #0
    2822:	e7fc      	b.n	281e <boot_is_header_valid+0x36>
    2824:	96f3b83d 	.word	0x96f3b83d

00002828 <boot_write_sz>:
{
    2828:	b538      	push	{r3, r4, r5, lr}
    282a:	4604      	mov	r4, r0
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    282c:	6a00      	ldr	r0, [r0, #32]
    282e:	f002 f892 	bl	4956 <flash_area_align>
    2832:	4605      	mov	r5, r0
    align = flash_area_align(BOOT_SCRATCH_AREA(state));
    2834:	6da0      	ldr	r0, [r4, #88]	; 0x58
    2836:	f002 f88e 	bl	4956 <flash_area_align>
    if (align > elem_sz) {
    283a:	4285      	cmp	r5, r0
    283c:	d200      	bcs.n	2840 <boot_write_sz+0x18>
}
    283e:	bd38      	pop	{r3, r4, r5, pc}
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    2840:	4628      	mov	r0, r5
    return elem_sz;
    2842:	e7fc      	b.n	283e <boot_write_sz+0x16>

00002844 <boot_read_image_size>:
{
    2844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2848:	b082      	sub	sp, #8
    284a:	4680      	mov	r8, r0
    284c:	460d      	mov	r5, r1
    284e:	4617      	mov	r7, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    2850:	2000      	movs	r0, #0
    2852:	f001 f985 	bl	3b60 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    2856:	a901      	add	r1, sp, #4
    2858:	b2c0      	uxtb	r0, r0
    285a:	f001 ffe5 	bl	4828 <flash_area_open>
    if (rc != 0) {
    285e:	b120      	cbz	r0, 286a <boot_read_image_size+0x26>
        rc = BOOT_EFLASH;
    2860:	2401      	movs	r4, #1
}
    2862:	4620      	mov	r0, r4
    2864:	b002      	add	sp, #8
    2866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    286a:	232c      	movs	r3, #44	; 0x2c
    286c:	fb03 8305 	mla	r3, r3, r5, r8
    2870:	891e      	ldrh	r6, [r3, #8]
    2872:	68db      	ldr	r3, [r3, #12]
    2874:	441e      	add	r6, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    2876:	2304      	movs	r3, #4
    2878:	466a      	mov	r2, sp
    287a:	4631      	mov	r1, r6
    287c:	9801      	ldr	r0, [sp, #4]
    287e:	f002 f831 	bl	48e4 <flash_area_read>
    2882:	4604      	mov	r4, r0
    2884:	bb30      	cbnz	r0, 28d4 <boot_read_image_size+0x90>
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    2886:	232c      	movs	r3, #44	; 0x2c
    2888:	fb03 8505 	mla	r5, r3, r5, r8
    288c:	896d      	ldrh	r5, [r5, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    288e:	f8bd 2000 	ldrh.w	r2, [sp]
    2892:	f646 1308 	movw	r3, #26888	; 0x6908
    2896:	429a      	cmp	r2, r3
    2898:	d00c      	beq.n	28b4 <boot_read_image_size+0x70>
    } else if (protect_tlv_size != 0) {
    289a:	b9ed      	cbnz	r5, 28d8 <boot_read_image_size+0x94>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    289c:	f8bd 2000 	ldrh.w	r2, [sp]
    28a0:	f646 1307 	movw	r3, #26887	; 0x6907
    28a4:	429a      	cmp	r2, r3
    28a6:	d119      	bne.n	28dc <boot_read_image_size+0x98>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    28a8:	442e      	add	r6, r5
    28aa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    28ae:	441e      	add	r6, r3
    28b0:	603e      	str	r6, [r7, #0]
    28b2:	e7d6      	b.n	2862 <boot_read_image_size+0x1e>
        if (protect_tlv_size != info.it_tlv_tot) {
    28b4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    28b8:	428d      	cmp	r5, r1
    28ba:	d001      	beq.n	28c0 <boot_read_image_size+0x7c>
            rc = BOOT_EBADIMAGE;
    28bc:	2403      	movs	r4, #3
    28be:	e7d0      	b.n	2862 <boot_read_image_size+0x1e>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    28c0:	2304      	movs	r3, #4
    28c2:	466a      	mov	r2, sp
    28c4:	4431      	add	r1, r6
    28c6:	9801      	ldr	r0, [sp, #4]
    28c8:	f002 f80c 	bl	48e4 <flash_area_read>
    28cc:	2800      	cmp	r0, #0
    28ce:	d0e5      	beq.n	289c <boot_read_image_size+0x58>
            rc = BOOT_EFLASH;
    28d0:	2401      	movs	r4, #1
    28d2:	e7c6      	b.n	2862 <boot_read_image_size+0x1e>
        rc = BOOT_EFLASH;
    28d4:	2401      	movs	r4, #1
    28d6:	e7c4      	b.n	2862 <boot_read_image_size+0x1e>
        rc = BOOT_EBADIMAGE;
    28d8:	2403      	movs	r4, #3
    28da:	e7c2      	b.n	2862 <boot_read_image_size+0x1e>
        rc = BOOT_EBADIMAGE;
    28dc:	2403      	movs	r4, #3
    return rc;
    28de:	e7c0      	b.n	2862 <boot_read_image_size+0x1e>

000028e0 <boot_check_header_erased>:
    return true;
}

static int
boot_check_header_erased(struct boot_loader_state *state, int slot)
{
    28e0:	b570      	push	{r4, r5, r6, lr}
    28e2:	b082      	sub	sp, #8
    28e4:	4606      	mov	r6, r0
    28e6:	460c      	mov	r4, r1
    struct image_header *hdr;
    uint8_t erased_val;
    int area_id;
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    28e8:	2000      	movs	r0, #0
    28ea:	f001 f939 	bl	3b60 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    28ee:	a901      	add	r1, sp, #4
    28f0:	b2c0      	uxtb	r0, r0
    28f2:	f001 ff99 	bl	4828 <flash_area_open>
    if (rc != 0) {
    28f6:	b9d0      	cbnz	r0, 292e <boot_check_header_erased+0x4e>
    28f8:	4605      	mov	r5, r0
        return -1;
    }

    erased_val = flash_area_erased_val(fap);
    28fa:	9801      	ldr	r0, [sp, #4]
    28fc:	f002 f830 	bl	4960 <flash_area_erased_val>
    2900:	b2c0      	uxtb	r0, r0
    flash_area_close(fap);

    hdr = boot_img_hdr(state, slot);
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    2902:	212c      	movs	r1, #44	; 0x2c
    2904:	fb01 6104 	mla	r1, r1, r4, r6
    for (i = 0; i < len; i++) {
    2908:	2300      	movs	r3, #0
    290a:	2b03      	cmp	r3, #3
    290c:	d805      	bhi.n	291a <boot_check_header_erased+0x3a>
        if (val != p[i]) {
    290e:	5cca      	ldrb	r2, [r1, r3]
    2910:	4290      	cmp	r0, r2
    2912:	d107      	bne.n	2924 <boot_check_header_erased+0x44>
    for (i = 0; i < len; i++) {
    2914:	3301      	adds	r3, #1
    2916:	b2db      	uxtb	r3, r3
    2918:	e7f7      	b.n	290a <boot_check_header_erased+0x2a>
    return true;
    291a:	2301      	movs	r3, #1
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    291c:	b123      	cbz	r3, 2928 <boot_check_header_erased+0x48>
        return -1;
    }

    return 0;
}
    291e:	4628      	mov	r0, r5
    2920:	b002      	add	sp, #8
    2922:	bd70      	pop	{r4, r5, r6, pc}
            return false;
    2924:	2300      	movs	r3, #0
    2926:	e7f9      	b.n	291c <boot_check_header_erased+0x3c>
        return -1;
    2928:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    292c:	e7f7      	b.n	291e <boot_check_header_erased+0x3e>
        return -1;
    292e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    2932:	e7f4      	b.n	291e <boot_check_header_erased+0x3e>

00002934 <boot_initialize_area>:
{
    2934:	b510      	push	{r4, lr}
    2936:	b082      	sub	sp, #8
    2938:	4604      	mov	r4, r0
    293a:	4608      	mov	r0, r1
    int num_sectors = BOOT_MAX_IMG_SECTORS;
    293c:	2380      	movs	r3, #128	; 0x80
    293e:	9301      	str	r3, [sp, #4]
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    2940:	2901      	cmp	r1, #1
    2942:	d006      	beq.n	2952 <boot_initialize_area+0x1e>
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    2944:	2902      	cmp	r1, #2
    2946:	d00b      	beq.n	2960 <boot_initialize_area+0x2c>
    } else if (flash_area == FLASH_AREA_IMAGE_SCRATCH) {
    2948:	2903      	cmp	r1, #3
    294a:	d010      	beq.n	296e <boot_initialize_area+0x3a>
        return BOOT_EFLASH;
    294c:	2001      	movs	r0, #1
}
    294e:	b002      	add	sp, #8
    2950:	bd10      	pop	{r4, pc}
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    2952:	6a62      	ldr	r2, [r4, #36]	; 0x24
    2954:	a901      	add	r1, sp, #4
    2956:	f001 ff87 	bl	4868 <flash_area_to_sectors>
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors = (size_t)num_sectors;
    295a:	9b01      	ldr	r3, [sp, #4]
    295c:	62a3      	str	r3, [r4, #40]	; 0x28
    295e:	e7f6      	b.n	294e <boot_initialize_area+0x1a>
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    2960:	6d22      	ldr	r2, [r4, #80]	; 0x50
    2962:	a901      	add	r1, sp, #4
    2964:	f001 ff80 	bl	4868 <flash_area_to_sectors>
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors = (size_t)num_sectors;
    2968:	9b01      	ldr	r3, [sp, #4]
    296a:	6563      	str	r3, [r4, #84]	; 0x54
    296c:	e7ef      	b.n	294e <boot_initialize_area+0x1a>
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    296e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    2970:	a901      	add	r1, sp, #4
    2972:	f001 ff79 	bl	4868 <flash_area_to_sectors>
        state->scratch.num_sectors = (size_t)num_sectors;
    2976:	9b01      	ldr	r3, [sp, #4]
    2978:	6623      	str	r3, [r4, #96]	; 0x60
    297a:	e7e8      	b.n	294e <boot_initialize_area+0x1a>

0000297c <boot_read_sectors>:
{
    297c:	b538      	push	{r3, r4, r5, lr}
    297e:	4605      	mov	r5, r0
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    2980:	2101      	movs	r1, #1
    2982:	f7ff ffd7 	bl	2934 <boot_initialize_area>
    if (rc != 0) {
    2986:	b110      	cbz	r0, 298e <boot_read_sectors+0x12>
        return BOOT_EFLASH;
    2988:	2401      	movs	r4, #1
}
    298a:	4620      	mov	r0, r4
    298c:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    298e:	2102      	movs	r1, #2
    2990:	4628      	mov	r0, r5
    2992:	f7ff ffcf 	bl	2934 <boot_initialize_area>
    if (rc != 0) {
    2996:	b108      	cbz	r0, 299c <boot_read_sectors+0x20>
        return BOOT_EFLASH;
    2998:	2401      	movs	r4, #1
    299a:	e7f6      	b.n	298a <boot_read_sectors+0xe>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SCRATCH);
    299c:	2103      	movs	r1, #3
    299e:	4628      	mov	r0, r5
    29a0:	f7ff ffc8 	bl	2934 <boot_initialize_area>
    if (rc != 0) {
    29a4:	4604      	mov	r4, r0
    29a6:	b108      	cbz	r0, 29ac <boot_read_sectors+0x30>
        return BOOT_EFLASH;
    29a8:	2401      	movs	r4, #1
    29aa:	e7ee      	b.n	298a <boot_read_sectors+0xe>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    29ac:	4628      	mov	r0, r5
    29ae:	f7ff ff3b 	bl	2828 <boot_write_sz>
    29b2:	66a8      	str	r0, [r5, #104]	; 0x68
    return 0;
    29b4:	e7e9      	b.n	298a <boot_read_sectors+0xe>
	...

000029b8 <boot_image_check>:
{
    29b8:	b500      	push	{lr}
    29ba:	b087      	sub	sp, #28
    if (bootutil_img_validate(BOOT_CURR_ENC(state), image_index, hdr, fap, tmpbuf,
    29bc:	2000      	movs	r0, #0
    29be:	9004      	str	r0, [sp, #16]
    29c0:	9003      	str	r0, [sp, #12]
    29c2:	9002      	str	r0, [sp, #8]
    29c4:	f44f 7380 	mov.w	r3, #256	; 0x100
    29c8:	9301      	str	r3, [sp, #4]
    29ca:	4b07      	ldr	r3, [pc, #28]	; (29e8 <boot_image_check+0x30>)
    29cc:	9300      	str	r3, [sp, #0]
    29ce:	4613      	mov	r3, r2
    29d0:	460a      	mov	r2, r1
    29d2:	4601      	mov	r1, r0
    29d4:	f000 ffa6 	bl	3924 <bootutil_img_validate>
    29d8:	4603      	mov	r3, r0
    29da:	b918      	cbnz	r0, 29e4 <boot_image_check+0x2c>
}
    29dc:	4618      	mov	r0, r3
    29de:	b007      	add	sp, #28
    29e0:	f85d fb04 	ldr.w	pc, [sp], #4
        return BOOT_EBADIMAGE;
    29e4:	2303      	movs	r3, #3
    29e6:	e7f9      	b.n	29dc <boot_image_check+0x24>
    29e8:	20006220 	.word	0x20006220

000029ec <boot_validate_slot>:
 *         -1 on any errors
 */
static int
boot_validate_slot(struct boot_loader_state *state, int slot,
                   struct boot_status *bs)
{
    29ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29f0:	b082      	sub	sp, #8
    29f2:	4605      	mov	r5, r0
    29f4:	460c      	mov	r4, r1
    29f6:	4617      	mov	r7, r2
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    29f8:	2000      	movs	r0, #0
    29fa:	f001 f8b1 	bl	3b60 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    29fe:	a901      	add	r1, sp, #4
    2a00:	b2c0      	uxtb	r0, r0
    2a02:	f001 ff11 	bl	4828 <flash_area_open>
    if (rc != 0) {
    2a06:	bb60      	cbnz	r0, 2a62 <boot_validate_slot+0x76>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
    2a08:	202c      	movs	r0, #44	; 0x2c
    2a0a:	fb00 5604 	mla	r6, r0, r4, r5
        return -1;
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
    2a0e:	4621      	mov	r1, r4
    2a10:	4628      	mov	r0, r5
    2a12:	f7ff ff65 	bl	28e0 <boot_check_header_erased>
    2a16:	b338      	cbz	r0, 2a68 <boot_validate_slot+0x7c>
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
    2a18:	6933      	ldr	r3, [r6, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
    2a1a:	f013 0f10 	tst.w	r3, #16
    2a1e:	d128      	bne.n	2a72 <boot_validate_slot+0x86>
            goto out;
        }
    }
#endif

    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
    2a20:	f8dd 8004 	ldr.w	r8, [sp, #4]
    2a24:	4641      	mov	r1, r8
    2a26:	4630      	mov	r0, r6
    2a28:	f7ff fede 	bl	27e8 <boot_is_header_valid>
    2a2c:	b938      	cbnz	r0, 2a3e <boot_validate_slot+0x52>
        if (slot != BOOT_PRIMARY_SLOT) {
    2a2e:	b984      	cbnz	r4, 2a52 <boot_validate_slot+0x66>
            /* Image in the secondary slot is invalid. Erase the image and
             * continue booting from the primary slot.
             */
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
    2a30:	b9ac      	cbnz	r4, 2a5e <boot_validate_slot+0x72>
    2a32:	4911      	ldr	r1, [pc, #68]	; (2a78 <boot_validate_slot+0x8c>)
    2a34:	4811      	ldr	r0, [pc, #68]	; (2a7c <boot_validate_slot+0x90>)
    2a36:	f001 fe9f 	bl	4778 <printf>
                     (slot == BOOT_PRIMARY_SLOT) ? "primary" : "secondary");
#endif
        rc = 1;
    2a3a:	2301      	movs	r3, #1
        goto out;
    2a3c:	e015      	b.n	2a6a <boot_validate_slot+0x7e>
    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
    2a3e:	463b      	mov	r3, r7
    2a40:	4642      	mov	r2, r8
    2a42:	4631      	mov	r1, r6
    2a44:	4628      	mov	r0, r5
    2a46:	f7ff ffb7 	bl	29b8 <boot_image_check>
    2a4a:	4603      	mov	r3, r0
    2a4c:	2800      	cmp	r0, #0
    2a4e:	d1ee      	bne.n	2a2e <boot_validate_slot+0x42>
    2a50:	e00b      	b.n	2a6a <boot_validate_slot+0x7e>
            flash_area_erase(fap, 0, fap->fa_size);
    2a52:	9801      	ldr	r0, [sp, #4]
    2a54:	6882      	ldr	r2, [r0, #8]
    2a56:	2100      	movs	r1, #0
    2a58:	f001 ff6a 	bl	4930 <flash_area_erase>
    2a5c:	e7e8      	b.n	2a30 <boot_validate_slot+0x44>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
    2a5e:	4908      	ldr	r1, [pc, #32]	; (2a80 <boot_validate_slot+0x94>)
    2a60:	e7e8      	b.n	2a34 <boot_validate_slot+0x48>
        return -1;
    2a62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2a66:	e000      	b.n	2a6a <boot_validate_slot+0x7e>
        rc = 1;
    2a68:	2301      	movs	r3, #1
    rc = 0;

out:
    flash_area_close(fap);
    return rc;
}
    2a6a:	4618      	mov	r0, r3
    2a6c:	b002      	add	sp, #8
    2a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 1;
    2a72:	2301      	movs	r3, #1
    2a74:	e7f9      	b.n	2a6a <boot_validate_slot+0x7e>
    2a76:	bf00      	nop
    2a78:	000053b8 	.word	0x000053b8
    2a7c:	000053cc 	.word	0x000053cc
    2a80:	000053c0 	.word	0x000053c0

00002a84 <boot_validated_swap_type>:
 * @return                      The type of swap to perform (BOOT_SWAP_TYPE...)
 */
static int
boot_validated_swap_type(struct boot_loader_state *state,
                         struct boot_status *bs)
{
    2a84:	b570      	push	{r4, r5, r6, lr}
    2a86:	4605      	mov	r5, r0
    2a88:	460e      	mov	r6, r1
    int swap_type;
    int rc;

    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
    2a8a:	2000      	movs	r0, #0
    2a8c:	f7ff fdfa 	bl	2684 <boot_swap_type_multi>
    2a90:	4604      	mov	r4, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
    2a92:	2802      	cmp	r0, #2
    2a94:	d005      	beq.n	2aa2 <boot_validated_swap_type+0x1e>
    2a96:	2804      	cmp	r0, #4
    2a98:	d003      	beq.n	2aa2 <boot_validated_swap_type+0x1e>
    2a9a:	2803      	cmp	r0, #3
    2a9c:	d001      	beq.n	2aa2 <boot_validated_swap_type+0x1e>
            swap_type = BOOT_SWAP_TYPE_FAIL;
        }
    }

    return swap_type;
}
    2a9e:	4620      	mov	r0, r4
    2aa0:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs);
    2aa2:	4632      	mov	r2, r6
    2aa4:	2101      	movs	r1, #1
    2aa6:	4628      	mov	r0, r5
    2aa8:	f7ff ffa0 	bl	29ec <boot_validate_slot>
        if (rc == 1) {
    2aac:	2801      	cmp	r0, #1
    2aae:	d003      	beq.n	2ab8 <boot_validated_swap_type+0x34>
        } else if (rc != 0) {
    2ab0:	2800      	cmp	r0, #0
    2ab2:	d0f4      	beq.n	2a9e <boot_validated_swap_type+0x1a>
            swap_type = BOOT_SWAP_TYPE_FAIL;
    2ab4:	2405      	movs	r4, #5
    return swap_type;
    2ab6:	e7f2      	b.n	2a9e <boot_validated_swap_type+0x1a>
            swap_type = BOOT_SWAP_TYPE_NONE;
    2ab8:	4604      	mov	r4, r0
    2aba:	e7f0      	b.n	2a9e <boot_validated_swap_type+0x1a>

00002abc <boot_read_image_headers>:
{
    2abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2abe:	4605      	mov	r5, r0
    2ac0:	460f      	mov	r7, r1
    2ac2:	4616      	mov	r6, r2
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    2ac4:	2400      	movs	r4, #0
    2ac6:	2c01      	cmp	r4, #1
    2ac8:	dc10      	bgt.n	2aec <boot_read_image_headers+0x30>
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    2aca:	4633      	mov	r3, r6
    2acc:	222c      	movs	r2, #44	; 0x2c
    2ace:	fb02 5204 	mla	r2, r2, r4, r5
    2ad2:	4621      	mov	r1, r4
    2ad4:	4628      	mov	r0, r5
    2ad6:	f000 fd02 	bl	34de <boot_read_image_header>
        if (rc != 0) {
    2ada:	4603      	mov	r3, r0
    2adc:	b908      	cbnz	r0, 2ae2 <boot_read_image_headers+0x26>
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    2ade:	3401      	adds	r4, #1
    2ae0:	e7f1      	b.n	2ac6 <boot_read_image_headers+0xa>
            if (i > 0 && !require_all) {
    2ae2:	2c00      	cmp	r4, #0
    2ae4:	dd03      	ble.n	2aee <boot_read_image_headers+0x32>
    2ae6:	b917      	cbnz	r7, 2aee <boot_read_image_headers+0x32>
                return 0;
    2ae8:	2300      	movs	r3, #0
    2aea:	e000      	b.n	2aee <boot_read_image_headers+0x32>
    return 0;
    2aec:	2300      	movs	r3, #0
}
    2aee:	4618      	mov	r0, r3
    2af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002af2 <boot_status_reset>:
    bs->use_scratch = 0;
    2af2:	2300      	movs	r3, #0
    2af4:	7183      	strb	r3, [r0, #6]
    bs->swap_size = 0;
    2af6:	6083      	str	r3, [r0, #8]
    bs->source = 0;
    2af8:	60c3      	str	r3, [r0, #12]
    bs->op = BOOT_STATUS_OP_MOVE;
    2afa:	2301      	movs	r3, #1
    2afc:	7143      	strb	r3, [r0, #5]
    bs->idx = BOOT_STATUS_IDX_0;
    2afe:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    2b00:	7103      	strb	r3, [r0, #4]
    bs->swap_type = BOOT_SWAP_TYPE_NONE;
    2b02:	71c3      	strb	r3, [r0, #7]
}
    2b04:	4770      	bx	lr

00002b06 <boot_status_is_reset>:
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    2b06:	7943      	ldrb	r3, [r0, #5]
            bs->idx == BOOT_STATUS_IDX_0 &&
    2b08:	2b01      	cmp	r3, #1
    2b0a:	d001      	beq.n	2b10 <boot_status_is_reset+0xa>
    2b0c:	2000      	movs	r0, #0
    2b0e:	4770      	bx	lr
    2b10:	6803      	ldr	r3, [r0, #0]
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    2b12:	2b01      	cmp	r3, #1
    2b14:	d001      	beq.n	2b1a <boot_status_is_reset+0x14>
            bs->idx == BOOT_STATUS_IDX_0 &&
    2b16:	2000      	movs	r0, #0
    2b18:	4770      	bx	lr
            bs->state == BOOT_STATUS_STATE_0);
    2b1a:	7903      	ldrb	r3, [r0, #4]
            bs->idx == BOOT_STATUS_IDX_0 &&
    2b1c:	2b01      	cmp	r3, #1
    2b1e:	d001      	beq.n	2b24 <boot_status_is_reset+0x1e>
    2b20:	2000      	movs	r0, #0
    2b22:	4770      	bx	lr
    2b24:	2001      	movs	r0, #1
}
    2b26:	4770      	bx	lr

00002b28 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
    2b28:	b530      	push	{r4, r5, lr}
    2b2a:	b083      	sub	sp, #12
    2b2c:	4605      	mov	r5, r0
    2b2e:	460c      	mov	r4, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
    2b30:	2300      	movs	r3, #0
    2b32:	9300      	str	r3, [sp, #0]
    2b34:	9301      	str	r3, [sp, #4]
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
    2b36:	4608      	mov	r0, r1
    2b38:	f7ff ffe5 	bl	2b06 <boot_status_is_reset>
    2b3c:	2800      	cmp	r0, #0
    2b3e:	d030      	beq.n	2ba2 <boot_swap_image+0x7a>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    2b40:	682a      	ldr	r2, [r5, #0]
    2b42:	4b1f      	ldr	r3, [pc, #124]	; (2bc0 <boot_swap_image+0x98>)
    2b44:	429a      	cmp	r2, r3
    2b46:	d012      	beq.n	2b6e <boot_swap_image+0x46>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    2b48:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    2b4a:	4b1d      	ldr	r3, [pc, #116]	; (2bc0 <boot_swap_image+0x98>)
    2b4c:	429a      	cmp	r2, r3
    2b4e:	d01b      	beq.n	2b88 <boot_swap_image+0x60>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
    2b50:	9b01      	ldr	r3, [sp, #4]
    2b52:	9a00      	ldr	r2, [sp, #0]
    2b54:	4293      	cmp	r3, r2
    2b56:	d900      	bls.n	2b5a <boot_swap_image+0x32>
            copy_size = size;
    2b58:	9300      	str	r3, [sp, #0]
        }

        bs->swap_size = copy_size;
    2b5a:	9b00      	ldr	r3, [sp, #0]
    2b5c:	60a3      	str	r3, [r4, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
    2b5e:	9a00      	ldr	r2, [sp, #0]
    2b60:	4621      	mov	r1, r4
    2b62:	4628      	mov	r0, r5
    2b64:	f000 fe60 	bl	3828 <swap_run>
                     boot_status_fails);
    }
#endif

    return 0;
}
    2b68:	2000      	movs	r0, #0
    2b6a:	b003      	add	sp, #12
    2b6c:	bd30      	pop	{r4, r5, pc}
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
    2b6e:	466a      	mov	r2, sp
    2b70:	2100      	movs	r1, #0
    2b72:	4628      	mov	r0, r5
    2b74:	f7ff fe66 	bl	2844 <boot_read_image_size>
            assert(rc == 0);
    2b78:	2800      	cmp	r0, #0
    2b7a:	d0e5      	beq.n	2b48 <boot_swap_image+0x20>
    2b7c:	2300      	movs	r3, #0
    2b7e:	461a      	mov	r2, r3
    2b80:	4619      	mov	r1, r3
    2b82:	4618      	mov	r0, r3
    2b84:	f7fe fdc2 	bl	170c <__assert_func>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
    2b88:	aa01      	add	r2, sp, #4
    2b8a:	2101      	movs	r1, #1
    2b8c:	4628      	mov	r0, r5
    2b8e:	f7ff fe59 	bl	2844 <boot_read_image_size>
            assert(rc == 0);
    2b92:	2800      	cmp	r0, #0
    2b94:	d0dc      	beq.n	2b50 <boot_swap_image+0x28>
    2b96:	2300      	movs	r3, #0
    2b98:	461a      	mov	r2, r3
    2b9a:	4619      	mov	r1, r3
    2b9c:	4618      	mov	r0, r3
    2b9e:	f7fe fdb5 	bl	170c <__assert_func>
        rc = boot_read_swap_size(image_index, &bs->swap_size);
    2ba2:	f104 0108 	add.w	r1, r4, #8
    2ba6:	2000      	movs	r0, #0
    2ba8:	f7ff fd02 	bl	25b0 <boot_read_swap_size>
        assert(rc == 0);
    2bac:	b910      	cbnz	r0, 2bb4 <boot_swap_image+0x8c>
        copy_size = bs->swap_size;
    2bae:	68a3      	ldr	r3, [r4, #8]
    2bb0:	9300      	str	r3, [sp, #0]
    2bb2:	e7d4      	b.n	2b5e <boot_swap_image+0x36>
        assert(rc == 0);
    2bb4:	2300      	movs	r3, #0
    2bb6:	461a      	mov	r2, r3
    2bb8:	4619      	mov	r1, r3
    2bba:	4618      	mov	r0, r3
    2bbc:	f7fe fda6 	bl	170c <__assert_func>
    2bc0:	96f3b83d 	.word	0x96f3b83d

00002bc4 <boot_complete_partial_swap>:
 */
#if !defined(MCUBOOT_OVERWRITE_ONLY)
static int
boot_complete_partial_swap(struct boot_loader_state *state,
        struct boot_status *bs)
{
    2bc4:	b538      	push	{r3, r4, r5, lr}
    2bc6:	4605      	mov	r5, r0
    2bc8:	460c      	mov	r4, r1
    int rc;

    /* Determine the type of swap operation being resumed from the
     * `swap-type` trailer field.
     */
    rc = boot_swap_image(state, bs);
    2bca:	f7ff ffad 	bl	2b28 <boot_swap_image>
    assert(rc == 0);
    2bce:	b9a8      	cbnz	r0, 2bfc <boot_complete_partial_swap+0x38>
    2bd0:	4602      	mov	r2, r0

    BOOT_SWAP_TYPE(state) = bs->swap_type;
    2bd2:	79e3      	ldrb	r3, [r4, #7]
    2bd4:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64

    /* The following states need image_ok be explicitly set after the
     * swap was finished to avoid a new revert.
     */
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
    2bd8:	79e3      	ldrb	r3, [r4, #7]
    2bda:	3b03      	subs	r3, #3
    2bdc:	b2db      	uxtb	r3, r3
    2bde:	2b01      	cmp	r3, #1
    2be0:	d912      	bls.n	2c08 <boot_complete_partial_swap+0x44>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_IS_UPGRADE(bs->swap_type)) {
    2be2:	79e3      	ldrb	r3, [r4, #7]
    2be4:	2b02      	cmp	r3, #2
    2be6:	d019      	beq.n	2c1c <boot_complete_partial_swap+0x58>
    2be8:	2b04      	cmp	r3, #4
    2bea:	d017      	beq.n	2c1c <boot_complete_partial_swap+0x58>
    2bec:	2b03      	cmp	r3, #3
    2bee:	d015      	beq.n	2c1c <boot_complete_partial_swap+0x58>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    2bf0:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    2bf4:	2bff      	cmp	r3, #255	; 0xff
    2bf6:	d01b      	beq.n	2c30 <boot_complete_partial_swap+0x6c>
        /* Loop forever... */
        while (1) {}
    }

    return rc;
}
    2bf8:	4610      	mov	r0, r2
    2bfa:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
    2bfc:	2300      	movs	r3, #0
    2bfe:	461a      	mov	r2, r3
    2c00:	4619      	mov	r1, r3
    2c02:	4618      	mov	r0, r3
    2c04:	f7fe fd82 	bl	170c <__assert_func>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    2c08:	2000      	movs	r0, #0
    2c0a:	f000 fa9b 	bl	3144 <swap_set_image_ok>
        if (rc != 0) {
    2c0e:	4602      	mov	r2, r0
    2c10:	2800      	cmp	r0, #0
    2c12:	d0e6      	beq.n	2be2 <boot_complete_partial_swap+0x1e>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    2c14:	23ff      	movs	r3, #255	; 0xff
    2c16:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
    2c1a:	e7e2      	b.n	2be2 <boot_complete_partial_swap+0x1e>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    2c1c:	2000      	movs	r0, #0
    2c1e:	f000 fa82 	bl	3126 <swap_set_copy_done>
        if (rc != 0) {
    2c22:	4602      	mov	r2, r0
    2c24:	2800      	cmp	r0, #0
    2c26:	d0e3      	beq.n	2bf0 <boot_complete_partial_swap+0x2c>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    2c28:	23ff      	movs	r3, #255	; 0xff
    2c2a:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
    2c2e:	e7df      	b.n	2bf0 <boot_complete_partial_swap+0x2c>
        BOOT_LOG_ERR("panic!");
    2c30:	4804      	ldr	r0, [pc, #16]	; (2c44 <boot_complete_partial_swap+0x80>)
    2c32:	f001 facb 	bl	41cc <puts>
        assert(0);
    2c36:	2300      	movs	r3, #0
    2c38:	461a      	mov	r2, r3
    2c3a:	4619      	mov	r1, r3
    2c3c:	4618      	mov	r0, r3
    2c3e:	f7fe fd65 	bl	170c <__assert_func>
    2c42:	bf00      	nop
    2c44:	00005308 	.word	0x00005308

00002c48 <boot_perform_update>:
{
    2c48:	b538      	push	{r3, r4, r5, lr}
    2c4a:	4605      	mov	r5, r0
        rc = boot_swap_image(state, bs);
    2c4c:	f7ff ff6c 	bl	2b28 <boot_swap_image>
    assert(rc == 0);
    2c50:	b9b0      	cbnz	r0, 2c80 <boot_perform_update+0x38>
    2c52:	4602      	mov	r2, r0
    swap_type = BOOT_SWAP_TYPE(state);
    2c54:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
    2c58:	1ee3      	subs	r3, r4, #3
    2c5a:	b2db      	uxtb	r3, r3
    2c5c:	2b01      	cmp	r3, #1
    2c5e:	d915      	bls.n	2c8c <boot_perform_update+0x44>
    if (BOOT_IS_UPGRADE(swap_type)) {
    2c60:	2c02      	cmp	r4, #2
    2c62:	d003      	beq.n	2c6c <boot_perform_update+0x24>
    2c64:	2c04      	cmp	r4, #4
    2c66:	d001      	beq.n	2c6c <boot_perform_update+0x24>
    2c68:	2c03      	cmp	r4, #3
    2c6a:	d107      	bne.n	2c7c <boot_perform_update+0x34>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    2c6c:	2000      	movs	r0, #0
    2c6e:	f000 fa5a 	bl	3126 <swap_set_copy_done>
        if (rc != 0) {
    2c72:	4602      	mov	r2, r0
    2c74:	b110      	cbz	r0, 2c7c <boot_perform_update+0x34>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    2c76:	23ff      	movs	r3, #255	; 0xff
    2c78:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
    2c7c:	4610      	mov	r0, r2
    2c7e:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
    2c80:	2300      	movs	r3, #0
    2c82:	461a      	mov	r2, r3
    2c84:	4619      	mov	r1, r3
    2c86:	4618      	mov	r0, r3
    2c88:	f7fe fd40 	bl	170c <__assert_func>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    2c8c:	2000      	movs	r0, #0
    2c8e:	f000 fa59 	bl	3144 <swap_set_image_ok>
        if (rc != 0) {
    2c92:	4602      	mov	r2, r0
    2c94:	2800      	cmp	r0, #0
    2c96:	d0e3      	beq.n	2c60 <boot_perform_update+0x18>
            BOOT_SWAP_TYPE(state) = swap_type = BOOT_SWAP_TYPE_PANIC;
    2c98:	24ff      	movs	r4, #255	; 0xff
    2c9a:	f885 4064 	strb.w	r4, [r5, #100]	; 0x64
    2c9e:	e7e1      	b.n	2c64 <boot_perform_update+0x1c>

00002ca0 <boot_prepare_image_for_update>:
 *                              boot status can be written to.
 */
static void
boot_prepare_image_for_update(struct boot_loader_state *state,
                              struct boot_status *bs)
{
    2ca0:	b538      	push	{r3, r4, r5, lr}
    2ca2:	4604      	mov	r4, r0
    2ca4:	460d      	mov	r5, r1
    int rc;

    /* Determine the sector layout of the image slots and scratch area. */
    rc = boot_read_sectors(state);
    2ca6:	f7ff fe69 	bl	297c <boot_read_sectors>
    if (rc != 0) {
    2caa:	b968      	cbnz	r0, 2cc8 <boot_prepare_image_for_update+0x28>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
        return;
    }

    /* Attempt to read an image header from each slot. */
    rc = boot_read_image_headers(state, false, NULL);
    2cac:	2200      	movs	r2, #0
    2cae:	4611      	mov	r1, r2
    2cb0:	4620      	mov	r0, r4
    2cb2:	f7ff ff03 	bl	2abc <boot_read_image_headers>
    if (rc != 0) {
    2cb6:	b978      	cbnz	r0, 2cd8 <boot_prepare_image_for_update+0x38>
    }

    /* If the current image's slots aren't compatible, no swap is possible.
     * Just boot into primary slot.
     */
    if (boot_slots_compatible(state)) {
    2cb8:	4620      	mov	r0, r4
    2cba:	f000 fc97 	bl	35ec <boot_slots_compatible>
    2cbe:	b998      	cbnz	r0, 2ce8 <boot_prepare_image_for_update+0x48>
            }
#endif
        }
    } else {
        /* In that case if slots are not compatible. */
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    2cc0:	2301      	movs	r3, #1
    2cc2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2cc6:	e006      	b.n	2cd6 <boot_prepare_image_for_update+0x36>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
    2cc8:	2180      	movs	r1, #128	; 0x80
    2cca:	482b      	ldr	r0, [pc, #172]	; (2d78 <boot_prepare_image_for_update+0xd8>)
    2ccc:	f001 fd54 	bl	4778 <printf>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    2cd0:	2301      	movs	r3, #1
    2cd2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    }
}
    2cd6:	bd38      	pop	{r3, r4, r5, pc}
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
    2cd8:	2100      	movs	r1, #0
    2cda:	4828      	ldr	r0, [pc, #160]	; (2d7c <boot_prepare_image_for_update+0xdc>)
    2cdc:	f001 fd4c 	bl	4778 <printf>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    2ce0:	2301      	movs	r3, #1
    2ce2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        return;
    2ce6:	e7f6      	b.n	2cd6 <boot_prepare_image_for_update+0x36>
        boot_status_reset(bs);
    2ce8:	4628      	mov	r0, r5
    2cea:	f7ff ff02 	bl	2af2 <boot_status_reset>
        rc = swap_read_status(state, bs);
    2cee:	4629      	mov	r1, r5
    2cf0:	4620      	mov	r0, r4
    2cf2:	f000 f9da 	bl	30aa <swap_read_status>
        if (rc != 0) {
    2cf6:	b980      	cbnz	r0, 2d1a <boot_prepare_image_for_update+0x7a>
        if (!boot_status_is_reset(bs)) {
    2cf8:	4628      	mov	r0, r5
    2cfa:	f7ff ff04 	bl	2b06 <boot_status_is_reset>
    2cfe:	b1a0      	cbz	r0, 2d2a <boot_prepare_image_for_update+0x8a>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
    2d00:	79eb      	ldrb	r3, [r5, #7]
    2d02:	2b01      	cmp	r3, #1
    2d04:	d02c      	beq.n	2d60 <boot_prepare_image_for_update+0xc0>
            } else if (boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs) != 0) {
    2d06:	462a      	mov	r2, r5
    2d08:	2101      	movs	r1, #1
    2d0a:	4620      	mov	r0, r4
    2d0c:	f7ff fe6e 	bl	29ec <boot_validate_slot>
    2d10:	b368      	cbz	r0, 2d6e <boot_prepare_image_for_update+0xce>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
    2d12:	2305      	movs	r3, #5
    2d14:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2d18:	e7dd      	b.n	2cd6 <boot_prepare_image_for_update+0x36>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
    2d1a:	2100      	movs	r1, #0
    2d1c:	4818      	ldr	r0, [pc, #96]	; (2d80 <boot_prepare_image_for_update+0xe0>)
    2d1e:	f001 fd2b 	bl	4778 <printf>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    2d22:	2301      	movs	r3, #1
    2d24:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
            return;
    2d28:	e7d5      	b.n	2cd6 <boot_prepare_image_for_update+0x36>
            rc = boot_complete_partial_swap(state, bs);
    2d2a:	4629      	mov	r1, r5
    2d2c:	4620      	mov	r0, r4
    2d2e:	f7ff ff49 	bl	2bc4 <boot_complete_partial_swap>
            assert(rc == 0);
    2d32:	b948      	cbnz	r0, 2d48 <boot_prepare_image_for_update+0xa8>
            rc = boot_read_image_headers(state, false, bs);
    2d34:	462a      	mov	r2, r5
    2d36:	2100      	movs	r1, #0
    2d38:	4620      	mov	r0, r4
    2d3a:	f7ff febf 	bl	2abc <boot_read_image_headers>
            assert(rc == 0);
    2d3e:	b948      	cbnz	r0, 2d54 <boot_prepare_image_for_update+0xb4>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    2d40:	2301      	movs	r3, #1
    2d42:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2d46:	e7c6      	b.n	2cd6 <boot_prepare_image_for_update+0x36>
            assert(rc == 0);
    2d48:	2300      	movs	r3, #0
    2d4a:	461a      	mov	r2, r3
    2d4c:	4619      	mov	r1, r3
    2d4e:	4618      	mov	r0, r3
    2d50:	f7fe fcdc 	bl	170c <__assert_func>
            assert(rc == 0);
    2d54:	2300      	movs	r3, #0
    2d56:	461a      	mov	r2, r3
    2d58:	4619      	mov	r1, r3
    2d5a:	4618      	mov	r0, r3
    2d5c:	f7fe fcd6 	bl	170c <__assert_func>
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
    2d60:	4629      	mov	r1, r5
    2d62:	4620      	mov	r0, r4
    2d64:	f7ff fe8e 	bl	2a84 <boot_validated_swap_type>
    2d68:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
    2d6c:	e7b3      	b.n	2cd6 <boot_prepare_image_for_update+0x36>
                BOOT_SWAP_TYPE(state) = bs->swap_type;
    2d6e:	79eb      	ldrb	r3, [r5, #7]
    2d70:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2d74:	e7af      	b.n	2cd6 <boot_prepare_image_for_update+0x36>
    2d76:	bf00      	nop
    2d78:	00005318 	.word	0x00005318
    2d7c:	0000535c 	.word	0x0000535c
    2d80:	0000538c 	.word	0x0000538c

00002d84 <boot_write_status>:
{
    2d84:	b570      	push	{r4, r5, r6, lr}
    2d86:	b084      	sub	sp, #16
    2d88:	4606      	mov	r6, r0
    2d8a:	460c      	mov	r4, r1
    if (bs->use_scratch) {
    2d8c:	798b      	ldrb	r3, [r1, #6]
    2d8e:	b143      	cbz	r3, 2da2 <boot_write_status+0x1e>
        area_id = FLASH_AREA_IMAGE_SCRATCH;
    2d90:	2003      	movs	r0, #3
    rc = flash_area_open(area_id, &fap);
    2d92:	a903      	add	r1, sp, #12
    2d94:	f001 fd48 	bl	4828 <flash_area_open>
    if (rc != 0) {
    2d98:	b128      	cbz	r0, 2da6 <boot_write_status+0x22>
        rc = BOOT_EFLASH;
    2d9a:	2301      	movs	r3, #1
}
    2d9c:	4618      	mov	r0, r3
    2d9e:	b004      	add	sp, #16
    2da0:	bd70      	pop	{r4, r5, r6, pc}
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
    2da2:	2001      	movs	r0, #1
    2da4:	e7f5      	b.n	2d92 <boot_write_status+0xe>
    off = boot_status_off(fap) +
    2da6:	9803      	ldr	r0, [sp, #12]
    2da8:	f7ff fb7e 	bl	24a8 <boot_status_off>
    2dac:	4605      	mov	r5, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    2dae:	6eb1      	ldr	r1, [r6, #104]	; 0x68
    2db0:	4620      	mov	r0, r4
    2db2:	f000 fc0d 	bl	35d0 <boot_status_internal_off>
    off = boot_status_off(fap) +
    2db6:	4405      	add	r5, r0
    align = flash_area_align(fap);
    2db8:	9803      	ldr	r0, [sp, #12]
    2dba:	f001 fdcc 	bl	4956 <flash_area_align>
    2dbe:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    2dc0:	9803      	ldr	r0, [sp, #12]
    2dc2:	f001 fdcd 	bl	4960 <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    2dc6:	2208      	movs	r2, #8
    2dc8:	b2c1      	uxtb	r1, r0
    2dca:	a801      	add	r0, sp, #4
    2dcc:	f7fe ff24 	bl	1c18 <memset>
    buf[0] = bs->state;
    2dd0:	7923      	ldrb	r3, [r4, #4]
    2dd2:	f88d 3004 	strb.w	r3, [sp, #4]
    rc = flash_area_write(fap, off, buf, align);
    2dd6:	4633      	mov	r3, r6
    2dd8:	aa01      	add	r2, sp, #4
    2dda:	4629      	mov	r1, r5
    2ddc:	9803      	ldr	r0, [sp, #12]
    2dde:	f001 fd94 	bl	490a <flash_area_write>
    if (rc != 0) {
    2de2:	4603      	mov	r3, r0
    2de4:	2800      	cmp	r0, #0
    2de6:	d0d9      	beq.n	2d9c <boot_write_status+0x18>
        rc = BOOT_EFLASH;
    2de8:	2301      	movs	r3, #1
    2dea:	e7d7      	b.n	2d9c <boot_write_status+0x18>

00002dec <boot_erase_region>:
{
    2dec:	b508      	push	{r3, lr}
    return flash_area_erase(fap, off, sz);
    2dee:	f001 fd9f 	bl	4930 <flash_area_erase>
}
    2df2:	bd08      	pop	{r3, pc}

00002df4 <boot_copy_region>:
{
    2df4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2df8:	4688      	mov	r8, r1
    2dfa:	4692      	mov	sl, r2
    2dfc:	461f      	mov	r7, r3
    2dfe:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    2e02:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bytes_copied = 0;
    2e04:	2500      	movs	r5, #0
    while (bytes_copied < sz) {
    2e06:	e00f      	b.n	2e28 <boot_copy_region+0x34>
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
    2e08:	4623      	mov	r3, r4
    2e0a:	4a0f      	ldr	r2, [pc, #60]	; (2e48 <boot_copy_region+0x54>)
    2e0c:	19e9      	adds	r1, r5, r7
    2e0e:	4640      	mov	r0, r8
    2e10:	f001 fd68 	bl	48e4 <flash_area_read>
        if (rc != 0) {
    2e14:	b9a0      	cbnz	r0, 2e40 <boot_copy_region+0x4c>
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
    2e16:	4623      	mov	r3, r4
    2e18:	4a0b      	ldr	r2, [pc, #44]	; (2e48 <boot_copy_region+0x54>)
    2e1a:	eb05 0109 	add.w	r1, r5, r9
    2e1e:	4650      	mov	r0, sl
    2e20:	f001 fd73 	bl	490a <flash_area_write>
        if (rc != 0) {
    2e24:	b970      	cbnz	r0, 2e44 <boot_copy_region+0x50>
        bytes_copied += chunk_sz;
    2e26:	4425      	add	r5, r4
    while (bytes_copied < sz) {
    2e28:	42b5      	cmp	r5, r6
    2e2a:	d206      	bcs.n	2e3a <boot_copy_region+0x46>
        if (sz - bytes_copied > sizeof buf) {
    2e2c:	1b74      	subs	r4, r6, r5
    2e2e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    2e32:	d9e9      	bls.n	2e08 <boot_copy_region+0x14>
            chunk_sz = sizeof buf;
    2e34:	f44f 6480 	mov.w	r4, #1024	; 0x400
    2e38:	e7e6      	b.n	2e08 <boot_copy_region+0x14>
    return 0;
    2e3a:	2000      	movs	r0, #0
}
    2e3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return BOOT_EFLASH;
    2e40:	2001      	movs	r0, #1
    2e42:	e7fb      	b.n	2e3c <boot_copy_region+0x48>
            return BOOT_EFLASH;
    2e44:	2001      	movs	r0, #1
    2e46:	e7f9      	b.n	2e3c <boot_copy_region+0x48>
    2e48:	20004c20 	.word	0x20004c20

00002e4c <context_boot_go>:

int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
    2e4c:	b570      	push	{r4, r5, r6, lr}
    2e4e:	b084      	sub	sp, #16
    2e50:	4604      	mov	r4, r0
    2e52:	460e      	mov	r6, r1
    TARGET_STATIC boot_sector_t secondary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
#if MCUBOOT_SWAP_USING_SCRATCH
    TARGET_STATIC boot_sector_t scratch_sectors[BOOT_MAX_IMG_SECTORS];
#endif

    memset(state, 0, sizeof(struct boot_loader_state));
    2e54:	226c      	movs	r2, #108	; 0x6c
    2e56:	2100      	movs	r1, #0
    2e58:	f7fe fede 	bl	1c18 <memset>
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
    2e5c:	4b45      	ldr	r3, [pc, #276]	; (2f74 <context_boot_go+0x128>)
    2e5e:	6263      	str	r3, [r4, #36]	; 0x24
            primary_slot_sectors[image_index];
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
    2e60:	4b45      	ldr	r3, [pc, #276]	; (2f78 <context_boot_go+0x12c>)
    2e62:	6523      	str	r3, [r4, #80]	; 0x50
            secondary_slot_sectors[image_index];
#if MCUBOOT_SWAP_USING_SCRATCH
        state->scratch.sectors = scratch_sectors;
    2e64:	4b45      	ldr	r3, [pc, #276]	; (2f7c <context_boot_go+0x130>)
    2e66:	65e3      	str	r3, [r4, #92]	; 0x5c
#endif

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    2e68:	2500      	movs	r5, #0
    2e6a:	2d01      	cmp	r5, #1
    2e6c:	d814      	bhi.n	2e98 <context_boot_go+0x4c>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
    2e6e:	4629      	mov	r1, r5
    2e70:	2000      	movs	r0, #0
    2e72:	f000 fe75 	bl	3b60 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
    2e76:	212c      	movs	r1, #44	; 0x2c
    2e78:	fb01 f105 	mul.w	r1, r1, r5
    2e7c:	3120      	adds	r1, #32
    2e7e:	4421      	add	r1, r4
    2e80:	b2c0      	uxtb	r0, r0
    2e82:	f001 fcd1 	bl	4828 <flash_area_open>
            assert(rc == 0);
    2e86:	b908      	cbnz	r0, 2e8c <context_boot_go+0x40>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    2e88:	3501      	adds	r5, #1
    2e8a:	e7ee      	b.n	2e6a <context_boot_go+0x1e>
            assert(rc == 0);
    2e8c:	2300      	movs	r3, #0
    2e8e:	461a      	mov	r2, r3
    2e90:	4619      	mov	r1, r3
    2e92:	4618      	mov	r0, r3
    2e94:	f7fe fc3a 	bl	170c <__assert_func>
        }
#if MCUBOOT_SWAP_USING_SCRATCH
        rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH,
    2e98:	f104 0158 	add.w	r1, r4, #88	; 0x58
    2e9c:	2003      	movs	r0, #3
    2e9e:	f001 fcc3 	bl	4828 <flash_area_open>
                             &BOOT_SCRATCH_AREA(state));
        assert(rc == 0);
    2ea2:	4605      	mov	r5, r0
    2ea4:	b978      	cbnz	r0, 2ec6 <context_boot_go+0x7a>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);
    2ea6:	4669      	mov	r1, sp
    2ea8:	4620      	mov	r0, r4
    2eaa:	f7ff fef9 	bl	2ca0 <boot_prepare_image_for_update>

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
    2eae:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
        /* Indicate that swap is not aborted */
        boot_status_reset(&bs);
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);
    2eb2:	f88d 3007 	strb.w	r3, [sp, #7]

        switch (BOOT_SWAP_TYPE(state)) {
    2eb6:	3b01      	subs	r3, #1
    2eb8:	2b04      	cmp	r3, #4
    2eba:	d838      	bhi.n	2f2e <context_boot_go+0xe2>
    2ebc:	e8df f003 	tbb	[pc, r3]
    2ec0:	0909090f 	.word	0x0909090f
    2ec4:	2d          	.byte	0x2d
    2ec5:	00          	.byte	0x00
        assert(rc == 0);
    2ec6:	2300      	movs	r3, #0
    2ec8:	461a      	mov	r2, r3
    2eca:	4619      	mov	r1, r3
    2ecc:	4618      	mov	r0, r3
    2ece:	f7fe fc1d 	bl	170c <__assert_func>
            break;

        case BOOT_SWAP_TYPE_TEST:          /* fallthrough */
        case BOOT_SWAP_TYPE_PERM:          /* fallthrough */
        case BOOT_SWAP_TYPE_REVERT:
            rc = boot_perform_update(state, &bs);
    2ed2:	4669      	mov	r1, sp
    2ed4:	4620      	mov	r0, r4
    2ed6:	f7ff feb7 	bl	2c48 <boot_perform_update>
            assert(rc == 0);
    2eda:	4605      	mov	r5, r0
    2edc:	b9b8      	cbnz	r0, 2f0e <context_boot_go+0xc2>

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    2ede:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    2ee2:	2bff      	cmp	r3, #255	; 0xff
    2ee4:	d027      	beq.n	2f36 <context_boot_go+0xea>
    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
    2ee6:	2b01      	cmp	r3, #1
    2ee8:	d12e      	bne.n	2f48 <context_boot_go+0xfc>
#else
        /* Even if we're not re-validating the primary slot, we could be booting
         * onto an empty flash chip. At least do a basic sanity check that
         * the magic number on the image is OK.
         */
        if (BOOT_IMG(state, BOOT_PRIMARY_SLOT).hdr.ih_magic != IMAGE_MAGIC) {
    2eea:	6822      	ldr	r2, [r4, #0]
    2eec:	4b24      	ldr	r3, [pc, #144]	; (2f80 <context_boot_go+0x134>)
    2eee:	429a      	cmp	r2, r3
    2ef0:	d133      	bne.n	2f5a <context_boot_go+0x10e>
    /*
     * Since the boot_status struct stores plaintext encryption keys, reset
     * them here to avoid the possibility of jumping into an image that could
     * easily recover them.
     */
    memset(&bs, 0, sizeof(struct boot_status));
    2ef2:	2300      	movs	r3, #0
    2ef4:	9300      	str	r3, [sp, #0]
    2ef6:	9301      	str	r3, [sp, #4]
    2ef8:	9302      	str	r3, [sp, #8]
    2efa:	9303      	str	r3, [sp, #12]

    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT)->fa_device_id;
    2efc:	6a23      	ldr	r3, [r4, #32]
    2efe:	785b      	ldrb	r3, [r3, #1]
    2f00:	7133      	strb	r3, [r6, #4]
 * Offset of the slot from the beginning of the flash device.
 */
static inline uint32_t
boot_img_slot_off(struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).area->fa_off;
    2f02:	6a23      	ldr	r3, [r4, #32]
    2f04:	685b      	ldr	r3, [r3, #4]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
    2f06:	60b3      	str	r3, [r6, #8]
    rsp->br_hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
    2f08:	6034      	str	r4, [r6, #0]
out:
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
#if MCUBOOT_SWAP_USING_SCRATCH
        flash_area_close(BOOT_SCRATCH_AREA(state));
#endif
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    2f0a:	2300      	movs	r3, #0
    2f0c:	e02d      	b.n	2f6a <context_boot_go+0x11e>
            assert(rc == 0);
    2f0e:	2300      	movs	r3, #0
    2f10:	461a      	mov	r2, r3
    2f12:	4619      	mov	r1, r3
    2f14:	4618      	mov	r0, r3
    2f16:	f7fe fbf9 	bl	170c <__assert_func>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    2f1a:	2000      	movs	r0, #0
    2f1c:	f000 f912 	bl	3144 <swap_set_image_ok>
            if (rc != 0) {
    2f20:	4605      	mov	r5, r0
    2f22:	2800      	cmp	r0, #0
    2f24:	d0db      	beq.n	2ede <context_boot_go+0x92>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    2f26:	23ff      	movs	r3, #255	; 0xff
    2f28:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2f2c:	e7d7      	b.n	2ede <context_boot_go+0x92>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    2f2e:	23ff      	movs	r3, #255	; 0xff
    2f30:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2f34:	e7d3      	b.n	2ede <context_boot_go+0x92>
            BOOT_LOG_ERR("panic!");
    2f36:	4813      	ldr	r0, [pc, #76]	; (2f84 <context_boot_go+0x138>)
    2f38:	f001 f948 	bl	41cc <puts>
            assert(0);
    2f3c:	2300      	movs	r3, #0
    2f3e:	461a      	mov	r2, r3
    2f40:	4619      	mov	r1, r3
    2f42:	4618      	mov	r0, r3
    2f44:	f7fe fbe2 	bl	170c <__assert_func>
            rc = boot_read_image_headers(state, false, &bs);
    2f48:	466a      	mov	r2, sp
    2f4a:	2100      	movs	r1, #0
    2f4c:	4620      	mov	r0, r4
    2f4e:	f7ff fdb5 	bl	2abc <boot_read_image_headers>
            if (rc != 0) {
    2f52:	4605      	mov	r5, r0
    2f54:	2800      	cmp	r0, #0
    2f56:	d1d8      	bne.n	2f0a <context_boot_go+0xbe>
    2f58:	e7c7      	b.n	2eea <context_boot_go+0x9e>
            BOOT_LOG_ERR("bad image magic 0x%lx; Image=%u", (unsigned long)
    2f5a:	2200      	movs	r2, #0
    2f5c:	4621      	mov	r1, r4
    2f5e:	480a      	ldr	r0, [pc, #40]	; (2f88 <context_boot_go+0x13c>)
    2f60:	f001 fc0a 	bl	4778 <printf>
            rc = BOOT_EBADIMAGE;
    2f64:	2503      	movs	r5, #3
            goto out;
    2f66:	e7d0      	b.n	2f0a <context_boot_go+0xbe>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    2f68:	3301      	adds	r3, #1
    2f6a:	2b01      	cmp	r3, #1
    2f6c:	d9fc      	bls.n	2f68 <context_boot_go+0x11c>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
        }
    }
    return rc;
}
    2f6e:	4628      	mov	r0, r5
    2f70:	b004      	add	sp, #16
    2f72:	bd70      	pop	{r4, r5, r6, pc}
    2f74:	20005020 	.word	0x20005020
    2f78:	20005c20 	.word	0x20005c20
    2f7c:	20005620 	.word	0x20005620
    2f80:	96f3b83d 	.word	0x96f3b83d
    2f84:	00005308 	.word	0x00005308
    2f88:	000053f8 	.word	0x000053f8

00002f8c <boot_go>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
boot_go(struct boot_rsp *rsp)
{
    2f8c:	b508      	push	{r3, lr}
    return context_boot_go(&boot_data, rsp);
    2f8e:	4601      	mov	r1, r0
    2f90:	4801      	ldr	r0, [pc, #4]	; (2f98 <boot_go+0xc>)
    2f92:	f7ff ff5b 	bl	2e4c <context_boot_go>
}
    2f96:	bd08      	pop	{r3, pc}
    2f98:	20004bb4 	.word	0x20004bb4

00002f9c <swap_erase_trailer_sectors>:
#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)

int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    2f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2fa0:	4606      	mov	r6, r0
    2fa2:	460f      	mov	r7, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", fap->fa_id);

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    2fa4:	2100      	movs	r1, #0
    2fa6:	4608      	mov	r0, r1
    2fa8:	f000 fdda 	bl	3b60 <flash_area_id_from_multi_image_slot>
    2fac:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    2fae:	2101      	movs	r1, #1
    2fb0:	2000      	movs	r0, #0
    2fb2:	f000 fdd5 	bl	3b60 <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (fap->fa_id == fa_id_primary) {
    2fb6:	783b      	ldrb	r3, [r7, #0]
    2fb8:	42a3      	cmp	r3, r4
    2fba:	d029      	beq.n	3010 <swap_erase_trailer_sectors+0x74>
        slot = BOOT_PRIMARY_SLOT;
    } else if (fap->fa_id == fa_id_secondary) {
    2fbc:	4283      	cmp	r3, r0
    2fbe:	d001      	beq.n	2fc4 <swap_erase_trailer_sectors+0x28>
        slot = BOOT_SECONDARY_SLOT;
    } else {
        return BOOT_EFLASH;
    2fc0:	2301      	movs	r3, #1
    2fc2:	e022      	b.n	300a <swap_erase_trailer_sectors+0x6e>
        slot = BOOT_SECONDARY_SLOT;
    2fc4:	2301      	movs	r3, #1
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    2fc6:	4698      	mov	r8, r3
    return BOOT_IMG(state, slot).num_sectors;
    2fc8:	222c      	movs	r2, #44	; 0x2c
    2fca:	fb02 6303 	mla	r3, r2, r3, r6
    2fce:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    2fd0:	3c01      	subs	r4, #1
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    2fd2:	6eb0      	ldr	r0, [r6, #104]	; 0x68
    2fd4:	f7ff fa54 	bl	2480 <boot_trailer_sz>
    2fd8:	4681      	mov	r9, r0
    total_sz = 0;
    2fda:	2500      	movs	r5, #0

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    2fdc:	232c      	movs	r3, #44	; 0x2c
    2fde:	fb03 6308 	mla	r3, r3, r8, r6
    2fe2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2fe4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2fe8:	008b      	lsls	r3, r1, #2
    2fea:	4413      	add	r3, r2
    2fec:	f8d3 a008 	ldr.w	sl, [r3, #8]
 */
static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    2ff0:	6859      	ldr	r1, [r3, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    2ff2:	6853      	ldr	r3, [r2, #4]
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    2ff4:	4652      	mov	r2, sl
    2ff6:	1ac9      	subs	r1, r1, r3
    2ff8:	4638      	mov	r0, r7
    2ffa:	f7ff fef7 	bl	2dec <boot_erase_region>
        assert(rc == 0);
    2ffe:	4603      	mov	r3, r0
    3000:	b940      	cbnz	r0, 3014 <swap_erase_trailer_sectors+0x78>

        sector--;
    3002:	3c01      	subs	r4, #1
        total_sz += sz;
    3004:	4455      	add	r5, sl
    } while (total_sz < trailer_sz);
    3006:	45a9      	cmp	r9, r5
    3008:	d8e8      	bhi.n	2fdc <swap_erase_trailer_sectors+0x40>

    return rc;
}
    300a:	4618      	mov	r0, r3
    300c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        slot = BOOT_PRIMARY_SLOT;
    3010:	2300      	movs	r3, #0
    3012:	e7d8      	b.n	2fc6 <swap_erase_trailer_sectors+0x2a>
        assert(rc == 0);
    3014:	2300      	movs	r3, #0
    3016:	461a      	mov	r2, r3
    3018:	4619      	mov	r1, r3
    301a:	4618      	mov	r0, r3
    301c:	f7fe fb76 	bl	170c <__assert_func>

00003020 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    3020:	b530      	push	{r4, r5, lr}
    3022:	b083      	sub	sp, #12
    3024:	460c      	mov	r4, r1
    3026:	4615      	mov	r5, r2

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", fap->fa_id);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    3028:	4669      	mov	r1, sp
    302a:	2002      	movs	r0, #2
    302c:	f7ff fab0 	bl	2590 <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);
    3030:	b990      	cbnz	r0, 3058 <swap_status_init+0x38>

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    3032:	79e9      	ldrb	r1, [r5, #7]
    3034:	2901      	cmp	r1, #1
    3036:	d115      	bne.n	3064 <swap_status_init+0x44>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    3038:	f89d 3003 	ldrb.w	r3, [sp, #3]
    303c:	2b01      	cmp	r3, #1
    303e:	d01d      	beq.n	307c <swap_status_init+0x5c>
        rc = boot_write_image_ok(fap);
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    3040:	68a9      	ldr	r1, [r5, #8]
    3042:	4620      	mov	r0, r4
    3044:	f7ff fb0c 	bl	2660 <boot_write_swap_size>
    assert(rc == 0);
    3048:	bb18      	cbnz	r0, 3092 <swap_status_init+0x72>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    304a:	4620      	mov	r0, r4
    304c:	f7ff fac8 	bl	25e0 <boot_write_magic>
    assert(rc == 0);
    3050:	bb28      	cbnz	r0, 309e <swap_status_init+0x7e>

    return 0;
}
    3052:	2000      	movs	r0, #0
    3054:	b003      	add	sp, #12
    3056:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
    3058:	2300      	movs	r3, #0
    305a:	461a      	mov	r2, r3
    305c:	4619      	mov	r1, r3
    305e:	4618      	mov	r0, r3
    3060:	f7fe fb54 	bl	170c <__assert_func>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    3064:	2200      	movs	r2, #0
    3066:	4620      	mov	r0, r4
    3068:	f7ff fad8 	bl	261c <boot_write_swap_info>
        assert(rc == 0);
    306c:	2800      	cmp	r0, #0
    306e:	d0e3      	beq.n	3038 <swap_status_init+0x18>
    3070:	2300      	movs	r3, #0
    3072:	461a      	mov	r2, r3
    3074:	4619      	mov	r1, r3
    3076:	4618      	mov	r0, r3
    3078:	f7fe fb48 	bl	170c <__assert_func>
        rc = boot_write_image_ok(fap);
    307c:	4620      	mov	r0, r4
    307e:	f7ff fac6 	bl	260e <boot_write_image_ok>
        assert(rc == 0);
    3082:	2800      	cmp	r0, #0
    3084:	d0dc      	beq.n	3040 <swap_status_init+0x20>
    3086:	2300      	movs	r3, #0
    3088:	461a      	mov	r2, r3
    308a:	4619      	mov	r1, r3
    308c:	4618      	mov	r0, r3
    308e:	f7fe fb3d 	bl	170c <__assert_func>
    assert(rc == 0);
    3092:	2300      	movs	r3, #0
    3094:	461a      	mov	r2, r3
    3096:	4619      	mov	r1, r3
    3098:	4618      	mov	r0, r3
    309a:	f7fe fb37 	bl	170c <__assert_func>
    assert(rc == 0);
    309e:	2300      	movs	r3, #0
    30a0:	461a      	mov	r2, r3
    30a2:	4619      	mov	r1, r3
    30a4:	4618      	mov	r0, r3
    30a6:	f7fe fb31 	bl	170c <__assert_func>

000030aa <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    30aa:	b570      	push	{r4, r5, r6, lr}
    30ac:	b082      	sub	sp, #8
    30ae:	4606      	mov	r6, r0
    30b0:	460d      	mov	r5, r1
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    30b2:	f000 fb1b 	bl	36ec <swap_status_source>
    30b6:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    30b8:	2801      	cmp	r0, #1
    30ba:	d009      	beq.n	30d0 <swap_read_status+0x26>
    30bc:	4604      	mov	r4, r0
    30be:	2802      	cmp	r0, #2
    30c0:	d00f      	beq.n	30e2 <swap_read_status+0x38>
    30c2:	b158      	cbz	r0, 30dc <swap_read_status+0x32>
    case BOOT_STATUS_SOURCE_PRIMARY_SLOT:
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
        break;

    default:
        assert(0);
    30c4:	2300      	movs	r3, #0
    30c6:	461a      	mov	r2, r3
    30c8:	4619      	mov	r1, r3
    30ca:	4618      	mov	r0, r3
    30cc:	f7fe fb1e 	bl	170c <__assert_func>
        area_id = FLASH_AREA_IMAGE_SCRATCH;
    30d0:	2003      	movs	r0, #3
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    30d2:	a901      	add	r1, sp, #4
    30d4:	f001 fba8 	bl	4828 <flash_area_open>
    if (rc != 0) {
    30d8:	b128      	cbz	r0, 30e6 <swap_read_status+0x3c>
        return BOOT_EFLASH;
    30da:	2401      	movs	r4, #1
    }

    flash_area_close(fap);

    return rc;
}
    30dc:	4620      	mov	r0, r4
    30de:	b002      	add	sp, #8
    30e0:	bd70      	pop	{r4, r5, r6, pc}
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
    30e2:	2001      	movs	r0, #1
    30e4:	e7f5      	b.n	30d2 <swap_read_status+0x28>
    rc = swap_read_status_bytes(fap, state, bs);
    30e6:	462a      	mov	r2, r5
    30e8:	4631      	mov	r1, r6
    30ea:	9801      	ldr	r0, [sp, #4]
    30ec:	f000 fa12 	bl	3514 <swap_read_status_bytes>
    if (rc == 0) {
    30f0:	4604      	mov	r4, r0
    30f2:	2800      	cmp	r0, #0
    30f4:	d1f2      	bne.n	30dc <swap_read_status+0x32>
        off = boot_swap_info_off(fap);
    30f6:	9801      	ldr	r0, [sp, #4]
    30f8:	f7ff f9e7 	bl	24ca <boot_swap_info_off>
        rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    30fc:	2301      	movs	r3, #1
    30fe:	f10d 0203 	add.w	r2, sp, #3
    3102:	4601      	mov	r1, r0
    3104:	9801      	ldr	r0, [sp, #4]
    3106:	f001 fc30 	bl	496a <flash_area_read_is_empty>
        if (rc == 1) {
    310a:	2801      	cmp	r0, #1
    310c:	d006      	beq.n	311c <swap_read_status+0x72>
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    310e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3112:	f003 030f 	and.w	r3, r3, #15
    3116:	71eb      	strb	r3, [r5, #7]
    3118:	4604      	mov	r4, r0
    311a:	e7df      	b.n	30dc <swap_read_status+0x32>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    311c:	2301      	movs	r3, #1
    311e:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
    3122:	4620      	mov	r0, r4
    3124:	e7f3      	b.n	310e <swap_read_status+0x64>

00003126 <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    3126:	b500      	push	{lr}
    3128:	b083      	sub	sp, #12
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    312a:	a901      	add	r1, sp, #4
    312c:	2001      	movs	r0, #1
    312e:	f001 fb7b 	bl	4828 <flash_area_open>
            &fap);
    if (rc != 0) {
    3132:	b118      	cbz	r0, 313c <swap_set_copy_done+0x16>
        return BOOT_EFLASH;
    3134:	2001      	movs	r0, #1
    }

    rc = boot_write_copy_done(fap);
    flash_area_close(fap);
    return rc;
}
    3136:	b003      	add	sp, #12
    3138:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = boot_write_copy_done(fap);
    313c:	9801      	ldr	r0, [sp, #4]
    313e:	f7ff fa5f 	bl	2600 <boot_write_copy_done>
    return rc;
    3142:	e7f8      	b.n	3136 <swap_set_copy_done+0x10>

00003144 <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    3144:	b500      	push	{lr}
    3146:	b085      	sub	sp, #20
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    3148:	a903      	add	r1, sp, #12
    314a:	2001      	movs	r0, #1
    314c:	f001 fb6c 	bl	4828 <flash_area_open>
            &fap);
    if (rc != 0) {
    3150:	b120      	cbz	r0, 315c <swap_set_image_ok+0x18>
        return BOOT_EFLASH;
    3152:	2301      	movs	r3, #1
    }

out:
    flash_area_close(fap);
    return rc;
}
    3154:	4618      	mov	r0, r3
    3156:	b005      	add	sp, #20
    3158:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = boot_read_swap_state(fap, &state);
    315c:	a901      	add	r1, sp, #4
    315e:	9803      	ldr	r0, [sp, #12]
    3160:	f7ff f9b6 	bl	24d0 <boot_read_swap_state>
    if (rc != 0) {
    3164:	4603      	mov	r3, r0
    3166:	b940      	cbnz	r0, 317a <swap_set_image_ok+0x36>
    if (state.image_ok == BOOT_FLAG_UNSET) {
    3168:	f89d 2007 	ldrb.w	r2, [sp, #7]
    316c:	2a03      	cmp	r2, #3
    316e:	d1f1      	bne.n	3154 <swap_set_image_ok+0x10>
        rc = boot_write_image_ok(fap);
    3170:	9803      	ldr	r0, [sp, #12]
    3172:	f7ff fa4c 	bl	260e <boot_write_image_ok>
    3176:	4603      	mov	r3, r0
    3178:	e7ec      	b.n	3154 <swap_set_image_ok+0x10>
        rc = BOOT_EFLASH;
    317a:	2301      	movs	r3, #1
    317c:	e7ea      	b.n	3154 <swap_set_image_ok+0x10>

0000317e <boot_copy_sz>:
 *                                  [first-sector, last-sector] range.
 */
static uint32_t
boot_copy_sz(const struct boot_loader_state *state, int last_sector_idx,
             int *out_first_sector_idx)
{
    317e:	b4f0      	push	{r4, r5, r6, r7}
    3180:	4606      	mov	r6, r0
#if MCUBOOT_SWAP_USING_SCRATCH
#define BOOT_SCRATCH_AREA(state) ((state)->scratch.area)

static inline size_t boot_scratch_area_size(const struct boot_loader_state *state)
{
    return BOOT_SCRATCH_AREA(state)->fa_size;
    3182:	6d83      	ldr	r3, [r0, #88]	; 0x58
    3184:	689f      	ldr	r7, [r3, #8]
    size_t scratch_sz;
    uint32_t new_sz;
    uint32_t sz;
    int i;

    sz = 0;
    3186:	2000      	movs	r0, #0

    scratch_sz = boot_scratch_area_size(state);
    for (i = last_sector_idx; i >= 0; i--) {
    3188:	2900      	cmp	r1, #0
    318a:	db0b      	blt.n	31a4 <boot_copy_sz+0x26>
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    318c:	6a73      	ldr	r3, [r6, #36]	; 0x24
    318e:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    3192:	00ac      	lsls	r4, r5, #2
    3194:	4423      	add	r3, r4
    3196:	689b      	ldr	r3, [r3, #8]
        new_sz = sz + boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    3198:	4403      	add	r3, r0
        /*
         * The secondary slot is not being checked here, because
         * `boot_slots_compatible` already provides assurance that the copy size
         * will be compatible with the primary slot and scratch.
         */
        if (new_sz > scratch_sz) {
    319a:	429f      	cmp	r7, r3
    319c:	d302      	bcc.n	31a4 <boot_copy_sz+0x26>
    for (i = last_sector_idx; i >= 0; i--) {
    319e:	3901      	subs	r1, #1
            break;
        }
        sz = new_sz;
    31a0:	4618      	mov	r0, r3
    31a2:	e7f1      	b.n	3188 <boot_copy_sz+0xa>
    }

    /* i currently refers to a sector that doesn't fit or it is -1 because all
     * sectors have been processed.  In both cases, exclude sector i.
     */
    *out_first_sector_idx = i + 1;
    31a4:	3101      	adds	r1, #1
    31a6:	6011      	str	r1, [r2, #0]
    return sz;
}
    31a8:	bcf0      	pop	{r4, r5, r6, r7}
    31aa:	4770      	bx	lr

000031ac <boot_swap_sectors>:
 * @return                      0 on success; nonzero on failure.
 */
static void
boot_swap_sectors(int idx, uint32_t sz, struct boot_loader_state *state,
        struct boot_status *bs)
{
    31ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31b0:	b088      	sub	sp, #32
    31b2:	460f      	mov	r7, r1
    31b4:	4615      	mov	r5, r2
    31b6:	461c      	mov	r4, r3
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    31b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
    31ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    31be:	0083      	lsls	r3, r0, #2
    31c0:	4413      	add	r3, r2
    31c2:	685e      	ldr	r6, [r3, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    31c4:	6853      	ldr	r3, [r2, #4]
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    31c6:	1af6      	subs	r6, r6, r3

    /* Calculate offset from start of image area. */
    img_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx);

    copy_sz = sz;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    31c8:	6ea8      	ldr	r0, [r5, #104]	; 0x68
    31ca:	f7ff f959 	bl	2480 <boot_trailer_sz>
    return BOOT_IMG(state, slot).num_sectors;
    31ce:	6aab      	ldr	r3, [r5, #40]	; 0x28
     * copying it, we need to use scratch to write the trailer temporarily.
     *
     * NOTE: `use_scratch` is a temporary flag (never written to flash) which
     * controls if special handling is needed (swapping last sector).
     */
    last_sector = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    31d0:	3b01      	subs	r3, #1
    if ((img_off + sz) >
    31d2:	eb07 0c06 	add.w	ip, r7, r6
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    31d6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    31d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    31dc:	009a      	lsls	r2, r3, #2
    31de:	440a      	add	r2, r1
    31e0:	6853      	ldr	r3, [r2, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    31e2:	684a      	ldr	r2, [r1, #4]
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    31e4:	1a9b      	subs	r3, r3, r2
    31e6:	459c      	cmp	ip, r3
    31e8:	d923      	bls.n	3232 <boot_swap_sectors+0x86>
        boot_img_sector_off(state, BOOT_PRIMARY_SLOT, last_sector)) {
        copy_sz -= trailer_sz;
    31ea:	eba7 0800 	sub.w	r8, r7, r0
    }

    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    31ee:	6823      	ldr	r3, [r4, #0]
    31f0:	2b01      	cmp	r3, #1
    31f2:	d020      	beq.n	3236 <boot_swap_sectors+0x8a>
    31f4:	2300      	movs	r3, #0
    31f6:	71a3      	strb	r3, [r4, #6]

    image_index = BOOT_CURR_IMG(state);

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    31f8:	a907      	add	r1, sp, #28
    31fa:	2001      	movs	r0, #1
    31fc:	f001 fb14 	bl	4828 <flash_area_open>
            &fap_primary_slot);
    assert (rc == 0);
    3200:	b9f8      	cbnz	r0, 3242 <boot_swap_sectors+0x96>

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    3202:	a906      	add	r1, sp, #24
    3204:	2002      	movs	r0, #2
    3206:	f001 fb0f 	bl	4828 <flash_area_open>
            &fap_secondary_slot);
    assert (rc == 0);
    320a:	bb00      	cbnz	r0, 324e <boot_swap_sectors+0xa2>

    rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH, &fap_scratch);
    320c:	a905      	add	r1, sp, #20
    320e:	2003      	movs	r0, #3
    3210:	f001 fb0a 	bl	4828 <flash_area_open>
    assert (rc == 0);
    3214:	bb08      	cbnz	r0, 325a <boot_swap_sectors+0xae>

    if (bs->state == BOOT_STATUS_STATE_0) {
    3216:	7923      	ldrb	r3, [r4, #4]
    3218:	2b01      	cmp	r3, #1
    321a:	d024      	beq.n	3266 <boot_swap_sectors+0xba>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_1;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_1) {
    321c:	7923      	ldrb	r3, [r4, #4]
    321e:	2b02      	cmp	r3, #2
    3220:	f000 8083 	beq.w	332a <boot_swap_sectors+0x17e>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_2;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_2) {
    3224:	7923      	ldrb	r3, [r4, #4]
    3226:	2b03      	cmp	r3, #3
    3228:	f000 80bb 	beq.w	33a2 <boot_swap_sectors+0x1f6>
    }

    flash_area_close(fap_primary_slot);
    flash_area_close(fap_secondary_slot);
    flash_area_close(fap_scratch);
}
    322c:	b008      	add	sp, #32
    322e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    copy_sz = sz;
    3232:	46b8      	mov	r8, r7
    3234:	e7db      	b.n	31ee <boot_swap_sectors+0x42>
    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    3236:	45b8      	cmp	r8, r7
    3238:	d001      	beq.n	323e <boot_swap_sectors+0x92>
    323a:	2301      	movs	r3, #1
    323c:	e7db      	b.n	31f6 <boot_swap_sectors+0x4a>
    323e:	2300      	movs	r3, #0
    3240:	e7d9      	b.n	31f6 <boot_swap_sectors+0x4a>
    assert (rc == 0);
    3242:	2300      	movs	r3, #0
    3244:	461a      	mov	r2, r3
    3246:	4619      	mov	r1, r3
    3248:	4618      	mov	r0, r3
    324a:	f7fe fa5f 	bl	170c <__assert_func>
    assert (rc == 0);
    324e:	2300      	movs	r3, #0
    3250:	461a      	mov	r2, r3
    3252:	4619      	mov	r1, r3
    3254:	4618      	mov	r0, r3
    3256:	f7fe fa59 	bl	170c <__assert_func>
    assert (rc == 0);
    325a:	2300      	movs	r3, #0
    325c:	461a      	mov	r2, r3
    325e:	4619      	mov	r1, r3
    3260:	4618      	mov	r0, r3
    3262:	f7fe fa53 	bl	170c <__assert_func>
        rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
    3266:	9805      	ldr	r0, [sp, #20]
    3268:	6882      	ldr	r2, [r0, #8]
    326a:	2100      	movs	r1, #0
    326c:	f7ff fdbe 	bl	2dec <boot_erase_region>
        assert(rc == 0);
    3270:	b9e0      	cbnz	r0, 32ac <boot_swap_sectors+0x100>
        if (bs->idx == BOOT_STATUS_IDX_0) {
    3272:	6823      	ldr	r3, [r4, #0]
    3274:	2b01      	cmp	r3, #1
    3276:	d01f      	beq.n	32b8 <boot_swap_sectors+0x10c>
        rc = boot_copy_region(state, fap_secondary_slot, fap_scratch,
    3278:	f8cd 8004 	str.w	r8, [sp, #4]
    327c:	2300      	movs	r3, #0
    327e:	9300      	str	r3, [sp, #0]
    3280:	4633      	mov	r3, r6
    3282:	9a05      	ldr	r2, [sp, #20]
    3284:	9906      	ldr	r1, [sp, #24]
    3286:	4628      	mov	r0, r5
    3288:	f7ff fdb4 	bl	2df4 <boot_copy_region>
        assert(rc == 0);
    328c:	2800      	cmp	r0, #0
    328e:	d146      	bne.n	331e <boot_swap_sectors+0x172>
        rc = boot_write_status(state, bs);
    3290:	4621      	mov	r1, r4
    3292:	4628      	mov	r0, r5
    3294:	f7ff fd76 	bl	2d84 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    3298:	2302      	movs	r3, #2
    329a:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    329c:	2800      	cmp	r0, #0
    329e:	d0bd      	beq.n	321c <boot_swap_sectors+0x70>
    32a0:	2300      	movs	r3, #0
    32a2:	461a      	mov	r2, r3
    32a4:	4619      	mov	r1, r3
    32a6:	4618      	mov	r0, r3
    32a8:	f7fe fa30 	bl	170c <__assert_func>
        assert(rc == 0);
    32ac:	2300      	movs	r3, #0
    32ae:	461a      	mov	r2, r3
    32b0:	4619      	mov	r1, r3
    32b2:	4618      	mov	r0, r3
    32b4:	f7fe fa2a 	bl	170c <__assert_func>
            rc = swap_status_init(state, fap_scratch, bs);
    32b8:	4622      	mov	r2, r4
    32ba:	9905      	ldr	r1, [sp, #20]
    32bc:	4628      	mov	r0, r5
    32be:	f7ff feaf 	bl	3020 <swap_status_init>
            assert(rc == 0);
    32c2:	b9d0      	cbnz	r0, 32fa <boot_swap_sectors+0x14e>
            if (!bs->use_scratch) {
    32c4:	79a3      	ldrb	r3, [r4, #6]
    32c6:	2b00      	cmp	r3, #0
    32c8:	d1d6      	bne.n	3278 <boot_swap_sectors+0xcc>
                rc = swap_erase_trailer_sectors(state, fap_primary_slot);
    32ca:	9907      	ldr	r1, [sp, #28]
    32cc:	4628      	mov	r0, r5
    32ce:	f7ff fe65 	bl	2f9c <swap_erase_trailer_sectors>
                assert(rc == 0);
    32d2:	b9c0      	cbnz	r0, 3306 <boot_swap_sectors+0x15a>
                rc = swap_status_init(state, fap_primary_slot, bs);
    32d4:	4622      	mov	r2, r4
    32d6:	9907      	ldr	r1, [sp, #28]
    32d8:	4628      	mov	r0, r5
    32da:	f7ff fea1 	bl	3020 <swap_status_init>
                assert(rc == 0);
    32de:	b9c0      	cbnz	r0, 3312 <boot_swap_sectors+0x166>
                rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
    32e0:	9805      	ldr	r0, [sp, #20]
    32e2:	6882      	ldr	r2, [r0, #8]
    32e4:	2100      	movs	r1, #0
    32e6:	f7ff fd81 	bl	2dec <boot_erase_region>
                assert(rc == 0);
    32ea:	2800      	cmp	r0, #0
    32ec:	d0c4      	beq.n	3278 <boot_swap_sectors+0xcc>
    32ee:	2300      	movs	r3, #0
    32f0:	461a      	mov	r2, r3
    32f2:	4619      	mov	r1, r3
    32f4:	4618      	mov	r0, r3
    32f6:	f7fe fa09 	bl	170c <__assert_func>
            assert(rc == 0);
    32fa:	2300      	movs	r3, #0
    32fc:	461a      	mov	r2, r3
    32fe:	4619      	mov	r1, r3
    3300:	4618      	mov	r0, r3
    3302:	f7fe fa03 	bl	170c <__assert_func>
                assert(rc == 0);
    3306:	2300      	movs	r3, #0
    3308:	461a      	mov	r2, r3
    330a:	4619      	mov	r1, r3
    330c:	4618      	mov	r0, r3
    330e:	f7fe f9fd 	bl	170c <__assert_func>
                assert(rc == 0);
    3312:	2300      	movs	r3, #0
    3314:	461a      	mov	r2, r3
    3316:	4619      	mov	r1, r3
    3318:	4618      	mov	r0, r3
    331a:	f7fe f9f7 	bl	170c <__assert_func>
        assert(rc == 0);
    331e:	2300      	movs	r3, #0
    3320:	461a      	mov	r2, r3
    3322:	4619      	mov	r1, r3
    3324:	4618      	mov	r0, r3
    3326:	f7fe f9f1 	bl	170c <__assert_func>
        rc = boot_erase_region(fap_secondary_slot, img_off, sz);
    332a:	463a      	mov	r2, r7
    332c:	4631      	mov	r1, r6
    332e:	9806      	ldr	r0, [sp, #24]
    3330:	f7ff fd5c 	bl	2dec <boot_erase_region>
        assert(rc == 0);
    3334:	b9e8      	cbnz	r0, 3372 <boot_swap_sectors+0x1c6>
        rc = boot_copy_region(state, fap_primary_slot, fap_secondary_slot,
    3336:	f8cd 8004 	str.w	r8, [sp, #4]
    333a:	9600      	str	r6, [sp, #0]
    333c:	4633      	mov	r3, r6
    333e:	9a06      	ldr	r2, [sp, #24]
    3340:	9907      	ldr	r1, [sp, #28]
    3342:	4628      	mov	r0, r5
    3344:	f7ff fd56 	bl	2df4 <boot_copy_region>
        assert(rc == 0);
    3348:	b9c8      	cbnz	r0, 337e <boot_swap_sectors+0x1d2>
        if (bs->idx == BOOT_STATUS_IDX_0 && !bs->use_scratch) {
    334a:	6823      	ldr	r3, [r4, #0]
    334c:	2b01      	cmp	r3, #1
    334e:	d101      	bne.n	3354 <boot_swap_sectors+0x1a8>
    3350:	79a3      	ldrb	r3, [r4, #6]
    3352:	b1d3      	cbz	r3, 338a <boot_swap_sectors+0x1de>
        rc = boot_write_status(state, bs);
    3354:	4621      	mov	r1, r4
    3356:	4628      	mov	r0, r5
    3358:	f7ff fd14 	bl	2d84 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_2;
    335c:	2303      	movs	r3, #3
    335e:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    3360:	2800      	cmp	r0, #0
    3362:	f43f af5f 	beq.w	3224 <boot_swap_sectors+0x78>
    3366:	2300      	movs	r3, #0
    3368:	461a      	mov	r2, r3
    336a:	4619      	mov	r1, r3
    336c:	4618      	mov	r0, r3
    336e:	f7fe f9cd 	bl	170c <__assert_func>
        assert(rc == 0);
    3372:	2300      	movs	r3, #0
    3374:	461a      	mov	r2, r3
    3376:	4619      	mov	r1, r3
    3378:	4618      	mov	r0, r3
    337a:	f7fe f9c7 	bl	170c <__assert_func>
        assert(rc == 0);
    337e:	2300      	movs	r3, #0
    3380:	461a      	mov	r2, r3
    3382:	4619      	mov	r1, r3
    3384:	4618      	mov	r0, r3
    3386:	f7fe f9c1 	bl	170c <__assert_func>
            rc = swap_erase_trailer_sectors(state, fap_secondary_slot);
    338a:	9906      	ldr	r1, [sp, #24]
    338c:	4628      	mov	r0, r5
    338e:	f7ff fe05 	bl	2f9c <swap_erase_trailer_sectors>
            assert(rc == 0);
    3392:	2800      	cmp	r0, #0
    3394:	d0de      	beq.n	3354 <boot_swap_sectors+0x1a8>
    3396:	2300      	movs	r3, #0
    3398:	461a      	mov	r2, r3
    339a:	4619      	mov	r1, r3
    339c:	4618      	mov	r0, r3
    339e:	f7fe f9b5 	bl	170c <__assert_func>
        rc = boot_erase_region(fap_primary_slot, img_off, sz);
    33a2:	463a      	mov	r2, r7
    33a4:	4631      	mov	r1, r6
    33a6:	9807      	ldr	r0, [sp, #28]
    33a8:	f7ff fd20 	bl	2dec <boot_erase_region>
        assert(rc == 0);
    33ac:	2800      	cmp	r0, #0
    33ae:	d15b      	bne.n	3468 <boot_swap_sectors+0x2bc>
        rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    33b0:	f8cd 8004 	str.w	r8, [sp, #4]
    33b4:	9600      	str	r6, [sp, #0]
    33b6:	2300      	movs	r3, #0
    33b8:	9a07      	ldr	r2, [sp, #28]
    33ba:	9905      	ldr	r1, [sp, #20]
    33bc:	4628      	mov	r0, r5
    33be:	f7ff fd19 	bl	2df4 <boot_copy_region>
        assert(rc == 0);
    33c2:	2800      	cmp	r0, #0
    33c4:	d156      	bne.n	3474 <boot_swap_sectors+0x2c8>
        if (bs->use_scratch) {
    33c6:	79a3      	ldrb	r3, [r4, #6]
    33c8:	2b00      	cmp	r3, #0
    33ca:	d02e      	beq.n	342a <boot_swap_sectors+0x27e>
            scratch_trailer_off = boot_status_off(fap_scratch);
    33cc:	9805      	ldr	r0, [sp, #20]
    33ce:	f7ff f86b 	bl	24a8 <boot_status_off>
            rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    33d2:	4446      	add	r6, r8
                        (BOOT_STATUS_STATE_COUNT - 1) * BOOT_WRITE_SZ(state));
    33d4:	6eab      	ldr	r3, [r5, #104]	; 0x68
            rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    33d6:	005b      	lsls	r3, r3, #1
    33d8:	9301      	str	r3, [sp, #4]
    33da:	9600      	str	r6, [sp, #0]
    33dc:	4603      	mov	r3, r0
    33de:	9a07      	ldr	r2, [sp, #28]
    33e0:	9905      	ldr	r1, [sp, #20]
    33e2:	4628      	mov	r0, r5
    33e4:	f7ff fd06 	bl	2df4 <boot_copy_region>
            BOOT_STATUS_ASSERT(rc == 0);
    33e8:	2800      	cmp	r0, #0
    33ea:	d149      	bne.n	3480 <boot_swap_sectors+0x2d4>
            rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH,
    33ec:	a903      	add	r1, sp, #12
    33ee:	2003      	movs	r0, #3
    33f0:	f7ff f8ce 	bl	2590 <boot_read_swap_state_by_id>
            assert(rc == 0);
    33f4:	2800      	cmp	r0, #0
    33f6:	d149      	bne.n	348c <boot_swap_sectors+0x2e0>
            if (swap_state.image_ok == BOOT_FLAG_SET) {
    33f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    33fc:	2b01      	cmp	r3, #1
    33fe:	d04b      	beq.n	3498 <boot_swap_sectors+0x2ec>
            if (swap_state.swap_type != BOOT_SWAP_TYPE_NONE) {
    3400:	f89d 100d 	ldrb.w	r1, [sp, #13]
    3404:	2901      	cmp	r1, #1
    3406:	d005      	beq.n	3414 <boot_swap_sectors+0x268>
                rc = boot_write_swap_info(fap_primary_slot,
    3408:	2200      	movs	r2, #0
    340a:	9807      	ldr	r0, [sp, #28]
    340c:	f7ff f906 	bl	261c <boot_write_swap_info>
                assert(rc == 0);
    3410:	2800      	cmp	r0, #0
    3412:	d14c      	bne.n	34ae <boot_swap_sectors+0x302>
            rc = boot_write_swap_size(fap_primary_slot, bs->swap_size);
    3414:	68a1      	ldr	r1, [r4, #8]
    3416:	9807      	ldr	r0, [sp, #28]
    3418:	f7ff f922 	bl	2660 <boot_write_swap_size>
            assert(rc == 0);
    341c:	2800      	cmp	r0, #0
    341e:	d14c      	bne.n	34ba <boot_swap_sectors+0x30e>
            rc = boot_write_magic(fap_primary_slot);
    3420:	9807      	ldr	r0, [sp, #28]
    3422:	f7ff f8dd 	bl	25e0 <boot_write_magic>
            assert(rc == 0);
    3426:	2800      	cmp	r0, #0
    3428:	d14d      	bne.n	34c6 <boot_swap_sectors+0x31a>
        erase_scratch = bs->use_scratch;
    342a:	79a6      	ldrb	r6, [r4, #6]
        bs->use_scratch = 0;
    342c:	2300      	movs	r3, #0
    342e:	71a3      	strb	r3, [r4, #6]
        rc = boot_write_status(state, bs);
    3430:	4621      	mov	r1, r4
    3432:	4628      	mov	r0, r5
    3434:	f7ff fca6 	bl	2d84 <boot_write_status>
        bs->idx++;
    3438:	6823      	ldr	r3, [r4, #0]
    343a:	3301      	adds	r3, #1
    343c:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    343e:	2301      	movs	r3, #1
    3440:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    3442:	2800      	cmp	r0, #0
    3444:	d145      	bne.n	34d2 <boot_swap_sectors+0x326>
        if (erase_scratch) {
    3446:	2e00      	cmp	r6, #0
    3448:	f43f aef0 	beq.w	322c <boot_swap_sectors+0x80>
            rc = boot_erase_region(fap_scratch, 0, sz);
    344c:	463a      	mov	r2, r7
    344e:	2100      	movs	r1, #0
    3450:	9805      	ldr	r0, [sp, #20]
    3452:	f7ff fccb 	bl	2dec <boot_erase_region>
            assert(rc == 0);
    3456:	2800      	cmp	r0, #0
    3458:	f43f aee8 	beq.w	322c <boot_swap_sectors+0x80>
    345c:	2300      	movs	r3, #0
    345e:	461a      	mov	r2, r3
    3460:	4619      	mov	r1, r3
    3462:	4618      	mov	r0, r3
    3464:	f7fe f952 	bl	170c <__assert_func>
        assert(rc == 0);
    3468:	2300      	movs	r3, #0
    346a:	461a      	mov	r2, r3
    346c:	4619      	mov	r1, r3
    346e:	4618      	mov	r0, r3
    3470:	f7fe f94c 	bl	170c <__assert_func>
        assert(rc == 0);
    3474:	2300      	movs	r3, #0
    3476:	461a      	mov	r2, r3
    3478:	4619      	mov	r1, r3
    347a:	4618      	mov	r0, r3
    347c:	f7fe f946 	bl	170c <__assert_func>
            BOOT_STATUS_ASSERT(rc == 0);
    3480:	2300      	movs	r3, #0
    3482:	461a      	mov	r2, r3
    3484:	4619      	mov	r1, r3
    3486:	4618      	mov	r0, r3
    3488:	f7fe f940 	bl	170c <__assert_func>
            assert(rc == 0);
    348c:	2300      	movs	r3, #0
    348e:	461a      	mov	r2, r3
    3490:	4619      	mov	r1, r3
    3492:	4618      	mov	r0, r3
    3494:	f7fe f93a 	bl	170c <__assert_func>
                rc = boot_write_image_ok(fap_primary_slot);
    3498:	9807      	ldr	r0, [sp, #28]
    349a:	f7ff f8b8 	bl	260e <boot_write_image_ok>
                assert(rc == 0);
    349e:	2800      	cmp	r0, #0
    34a0:	d0ae      	beq.n	3400 <boot_swap_sectors+0x254>
    34a2:	2300      	movs	r3, #0
    34a4:	461a      	mov	r2, r3
    34a6:	4619      	mov	r1, r3
    34a8:	4618      	mov	r0, r3
    34aa:	f7fe f92f 	bl	170c <__assert_func>
                assert(rc == 0);
    34ae:	2300      	movs	r3, #0
    34b0:	461a      	mov	r2, r3
    34b2:	4619      	mov	r1, r3
    34b4:	4618      	mov	r0, r3
    34b6:	f7fe f929 	bl	170c <__assert_func>
            assert(rc == 0);
    34ba:	2300      	movs	r3, #0
    34bc:	461a      	mov	r2, r3
    34be:	4619      	mov	r1, r3
    34c0:	4618      	mov	r0, r3
    34c2:	f7fe f923 	bl	170c <__assert_func>
            assert(rc == 0);
    34c6:	2300      	movs	r3, #0
    34c8:	461a      	mov	r2, r3
    34ca:	4619      	mov	r1, r3
    34cc:	4618      	mov	r0, r3
    34ce:	f7fe f91d 	bl	170c <__assert_func>
        BOOT_STATUS_ASSERT(rc == 0);
    34d2:	2300      	movs	r3, #0
    34d4:	461a      	mov	r2, r3
    34d6:	4619      	mov	r1, r3
    34d8:	4618      	mov	r0, r3
    34da:	f7fe f917 	bl	170c <__assert_func>

000034de <boot_read_image_header>:
{
    34de:	b510      	push	{r4, lr}
    34e0:	b082      	sub	sp, #8
    34e2:	4614      	mov	r4, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    34e4:	2000      	movs	r0, #0
    34e6:	f000 fb3b 	bl	3b60 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    34ea:	a901      	add	r1, sp, #4
    34ec:	b2c0      	uxtb	r0, r0
    34ee:	f001 f99b 	bl	4828 <flash_area_open>
    if (rc != 0) {
    34f2:	b118      	cbz	r0, 34fc <boot_read_image_header+0x1e>
        rc = BOOT_EFLASH;
    34f4:	2301      	movs	r3, #1
}
    34f6:	4618      	mov	r0, r3
    34f8:	b002      	add	sp, #8
    34fa:	bd10      	pop	{r4, pc}
    rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
    34fc:	2320      	movs	r3, #32
    34fe:	4622      	mov	r2, r4
    3500:	2100      	movs	r1, #0
    3502:	9801      	ldr	r0, [sp, #4]
    3504:	f001 f9ee 	bl	48e4 <flash_area_read>
    if (rc != 0) {
    3508:	4603      	mov	r3, r0
    350a:	2800      	cmp	r0, #0
    350c:	d0f3      	beq.n	34f6 <boot_read_image_header+0x18>
        rc = BOOT_EFLASH;
    350e:	2301      	movs	r3, #1
    3510:	e7f1      	b.n	34f6 <boot_read_image_header+0x18>
	...

00003514 <swap_read_status_bytes>:
{
    3514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3518:	b083      	sub	sp, #12
    351a:	4606      	mov	r6, r0
    351c:	4689      	mov	r9, r1
    351e:	4693      	mov	fp, r2
    off = boot_status_off(fap);
    3520:	f7fe ffc2 	bl	24a8 <boot_status_off>
    3524:	4680      	mov	r8, r0
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
    3526:	4631      	mov	r1, r6
    3528:	2000      	movs	r0, #0
    352a:	f7fe ffae 	bl	248a <boot_status_entries>
    if (max_entries < 0) {
    352e:	1e07      	subs	r7, r0, #0
    3530:	db42      	blt.n	35b8 <swap_read_status_bytes+0xa4>
    for (i = 0; i < max_entries; i++) {
    3532:	2400      	movs	r4, #0
    found_idx = 0;
    3534:	46a2      	mov	sl, r4
    found = 0;
    3536:	4625      	mov	r5, r4
    3538:	e007      	b.n	354a <swap_read_status_bytes+0x36>
            if (found && !found_idx) {
    353a:	b12d      	cbz	r5, 3548 <swap_read_status_bytes+0x34>
    353c:	f1ba 0f00 	cmp.w	sl, #0
    3540:	d102      	bne.n	3548 <swap_read_status_bytes+0x34>
                found_idx = i;
    3542:	46a2      	mov	sl, r4
    3544:	e000      	b.n	3548 <swap_read_status_bytes+0x34>
            found = 1;
    3546:	2501      	movs	r5, #1
    for (i = 0; i < max_entries; i++) {
    3548:	3401      	adds	r4, #1
    354a:	42bc      	cmp	r4, r7
    354c:	da14      	bge.n	3578 <swap_read_status_bytes+0x64>
        rc = flash_area_read_is_empty(fap, off + i * BOOT_WRITE_SZ(state),
    354e:	f8d9 1068 	ldr.w	r1, [r9, #104]	; 0x68
    3552:	2301      	movs	r3, #1
    3554:	f10d 0207 	add.w	r2, sp, #7
    3558:	fb01 8104 	mla	r1, r1, r4, r8
    355c:	4630      	mov	r0, r6
    355e:	f001 fa04 	bl	496a <flash_area_read_is_empty>
        if (rc < 0) {
    3562:	2800      	cmp	r0, #0
    3564:	db2a      	blt.n	35bc <swap_read_status_bytes+0xa8>
        if (rc == 1) {
    3566:	2801      	cmp	r0, #1
    3568:	d0e7      	beq.n	353a <swap_read_status_bytes+0x26>
        } else if (!found) {
    356a:	2d00      	cmp	r5, #0
    356c:	d0eb      	beq.n	3546 <swap_read_status_bytes+0x32>
        } else if (found_idx) {
    356e:	f1ba 0f00 	cmp.w	sl, #0
    3572:	d0e9      	beq.n	3548 <swap_read_status_bytes+0x34>
            invalid = 1;
    3574:	4629      	mov	r1, r5
    3576:	e000      	b.n	357a <swap_read_status_bytes+0x66>
    invalid = 0;
    3578:	2100      	movs	r1, #0
    if (invalid) {
    357a:	b9a1      	cbnz	r1, 35a6 <swap_read_status_bytes+0x92>
    if (found) {
    357c:	b1fd      	cbz	r5, 35be <swap_read_status_bytes+0xaa>
        if (!found_idx) {
    357e:	f1ba 0f00 	cmp.w	sl, #0
    3582:	d000      	beq.n	3586 <swap_read_status_bytes+0x72>
    3584:	4654      	mov	r4, sl
        bs->idx = (found_idx / BOOT_STATUS_STATE_COUNT) + 1;
    3586:	4b10      	ldr	r3, [pc, #64]	; (35c8 <swap_read_status_bytes+0xb4>)
    3588:	fb83 2304 	smull	r2, r3, r3, r4
    358c:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
    3590:	1c5a      	adds	r2, r3, #1
    3592:	f8cb 2000 	str.w	r2, [fp]
        bs->state = (found_idx % BOOT_STATUS_STATE_COUNT) + 1;
    3596:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    359a:	1ae2      	subs	r2, r4, r3
    359c:	1c53      	adds	r3, r2, #1
    359e:	f88b 3004 	strb.w	r3, [fp, #4]
    return 0;
    35a2:	460d      	mov	r5, r1
    35a4:	e00b      	b.n	35be <swap_read_status_bytes+0xaa>
        BOOT_LOG_ERR("Detected inconsistent status!");
    35a6:	4809      	ldr	r0, [pc, #36]	; (35cc <swap_read_status_bytes+0xb8>)
    35a8:	f000 fe10 	bl	41cc <puts>
        assert(0);
    35ac:	2300      	movs	r3, #0
    35ae:	461a      	mov	r2, r3
    35b0:	4619      	mov	r1, r3
    35b2:	4618      	mov	r0, r3
    35b4:	f7fe f8aa 	bl	170c <__assert_func>
        return BOOT_EBADARGS;
    35b8:	2507      	movs	r5, #7
    35ba:	e000      	b.n	35be <swap_read_status_bytes+0xaa>
            return BOOT_EFLASH;
    35bc:	2501      	movs	r5, #1
}
    35be:	4628      	mov	r0, r5
    35c0:	b003      	add	sp, #12
    35c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    35c6:	bf00      	nop
    35c8:	55555556 	.word	0x55555556
    35cc:	00005504 	.word	0x00005504

000035d0 <boot_status_internal_off>:
{
    35d0:	b410      	push	{r4}
    idx_sz = elem_sz * BOOT_STATUS_STATE_COUNT;
    35d2:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    return (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    35d6:	6803      	ldr	r3, [r0, #0]
    35d8:	3b01      	subs	r3, #1
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    35da:	7902      	ldrb	r2, [r0, #4]
    35dc:	3a01      	subs	r2, #1
    35de:	fb01 f102 	mul.w	r1, r1, r2
}
    35e2:	fb03 1004 	mla	r0, r3, r4, r1
    35e6:	bc10      	pop	{r4}
    35e8:	4770      	bx	lr
	...

000035ec <boot_slots_compatible>:
{
    35ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return BOOT_IMG(state, slot).num_sectors;
    35f0:	6a87      	ldr	r7, [r0, #40]	; 0x28
    35f2:	f8d0 c054 	ldr.w	ip, [r0, #84]	; 0x54
    if ((num_sectors_primary > BOOT_MAX_IMG_SECTORS) ||
    35f6:	2f80      	cmp	r7, #128	; 0x80
    35f8:	d80d      	bhi.n	3616 <boot_slots_compatible+0x2a>
    35fa:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
    35fe:	d80a      	bhi.n	3616 <boot_slots_compatible+0x2a>
    3600:	6d83      	ldr	r3, [r0, #88]	; 0x58
    3602:	f8d3 8008 	ldr.w	r8, [r3, #8]
    smaller = 0;
    3606:	2500      	movs	r5, #0
    j = sz1 = secondary_slot_sz = 0;
    3608:	462c      	mov	r4, r5
    i = sz0 = primary_slot_sz = 0;
    360a:	4629      	mov	r1, r5
    j = sz1 = secondary_slot_sz = 0;
    360c:	46a9      	mov	r9, r5
    i = sz0 = primary_slot_sz = 0;
    360e:	46ae      	mov	lr, r5
    j = sz1 = secondary_slot_sz = 0;
    3610:	462a      	mov	r2, r5
    i = sz0 = primary_slot_sz = 0;
    3612:	462b      	mov	r3, r5
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    3614:	e019      	b.n	364a <boot_slots_compatible+0x5e>
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
    3616:	4831      	ldr	r0, [pc, #196]	; (36dc <boot_slots_compatible+0xf0>)
    3618:	f000 fdd8 	bl	41cc <puts>
        return 0;
    361c:	2000      	movs	r0, #0
}
    361e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    3622:	6a46      	ldr	r6, [r0, #36]	; 0x24
    3624:	eb01 0b41 	add.w	fp, r1, r1, lsl #1
    3628:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    362c:	4456      	add	r6, sl
    362e:	68b6      	ldr	r6, [r6, #8]
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    3630:	4433      	add	r3, r6
    3632:	6d06      	ldr	r6, [r0, #80]	; 0x50
    3634:	eb04 0b44 	add.w	fp, r4, r4, lsl #1
    3638:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    363c:	4456      	add	r6, sl
    363e:	68b6      	ldr	r6, [r6, #8]
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    3640:	4432      	add	r2, r6
            i++;
    3642:	3101      	adds	r1, #1
            j++;
    3644:	3401      	adds	r4, #1
        if (sz0 == sz1) {
    3646:	4293      	cmp	r3, r2
    3648:	d02b      	beq.n	36a2 <boot_slots_compatible+0xb6>
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    364a:	42b9      	cmp	r1, r7
    364c:	d301      	bcc.n	3652 <boot_slots_compatible+0x66>
    364e:	4564      	cmp	r4, ip
    3650:	d236      	bcs.n	36c0 <boot_slots_compatible+0xd4>
        if (sz0 == sz1) {
    3652:	4293      	cmp	r3, r2
    3654:	d0e5      	beq.n	3622 <boot_slots_compatible+0x36>
        } else if (sz0 < sz1) {
    3656:	4293      	cmp	r3, r2
    3658:	d211      	bcs.n	367e <boot_slots_compatible+0x92>
    365a:	6a46      	ldr	r6, [r0, #36]	; 0x24
    365c:	eb01 0b41 	add.w	fp, r1, r1, lsl #1
    3660:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    3664:	4456      	add	r6, sl
    3666:	68b6      	ldr	r6, [r6, #8]
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    3668:	4433      	add	r3, r6
            if (smaller == 2) {
    366a:	2d02      	cmp	r5, #2
    366c:	d002      	beq.n	3674 <boot_slots_compatible+0x88>
            i++;
    366e:	3101      	adds	r1, #1
            smaller = 1;
    3670:	2501      	movs	r5, #1
    3672:	e7e8      	b.n	3646 <boot_slots_compatible+0x5a>
                BOOT_LOG_WRN("Cannot upgrade: slots have non-compatible sectors");
    3674:	481a      	ldr	r0, [pc, #104]	; (36e0 <boot_slots_compatible+0xf4>)
    3676:	f000 fda9 	bl	41cc <puts>
                return 0;
    367a:	2000      	movs	r0, #0
    367c:	e7cf      	b.n	361e <boot_slots_compatible+0x32>
    367e:	6d06      	ldr	r6, [r0, #80]	; 0x50
    3680:	eb04 0b44 	add.w	fp, r4, r4, lsl #1
    3684:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    3688:	4456      	add	r6, sl
    368a:	68b6      	ldr	r6, [r6, #8]
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    368c:	4432      	add	r2, r6
            if (smaller == 1) {
    368e:	2d01      	cmp	r5, #1
    3690:	d002      	beq.n	3698 <boot_slots_compatible+0xac>
            j++;
    3692:	3401      	adds	r4, #1
            smaller = 2;
    3694:	2502      	movs	r5, #2
    3696:	e7d6      	b.n	3646 <boot_slots_compatible+0x5a>
                BOOT_LOG_WRN("Cannot upgrade: slots have non-compatible sectors");
    3698:	4811      	ldr	r0, [pc, #68]	; (36e0 <boot_slots_compatible+0xf4>)
    369a:	f000 fd97 	bl	41cc <puts>
                return 0;
    369e:	2000      	movs	r0, #0
    36a0:	e7bd      	b.n	361e <boot_slots_compatible+0x32>
            primary_slot_sz += sz0;
    36a2:	449e      	add	lr, r3
            secondary_slot_sz += sz1;
    36a4:	4491      	add	r9, r2
            if (sz0 > scratch_sz || sz1 > scratch_sz) {
    36a6:	4543      	cmp	r3, r8
    36a8:	d805      	bhi.n	36b6 <boot_slots_compatible+0xca>
    36aa:	4542      	cmp	r2, r8
    36ac:	d803      	bhi.n	36b6 <boot_slots_compatible+0xca>
            smaller = sz0 = sz1 = 0;
    36ae:	2500      	movs	r5, #0
    36b0:	462a      	mov	r2, r5
    36b2:	462b      	mov	r3, r5
    36b4:	e7c9      	b.n	364a <boot_slots_compatible+0x5e>
                BOOT_LOG_WRN("Cannot upgrade: not all sectors fit inside scratch");
    36b6:	480b      	ldr	r0, [pc, #44]	; (36e4 <boot_slots_compatible+0xf8>)
    36b8:	f000 fd88 	bl	41cc <puts>
                return 0;
    36bc:	2000      	movs	r0, #0
    36be:	e7ae      	b.n	361e <boot_slots_compatible+0x32>
    if ((i != num_sectors_primary) ||
    36c0:	42b9      	cmp	r1, r7
    36c2:	d101      	bne.n	36c8 <boot_slots_compatible+0xdc>
    36c4:	4564      	cmp	r4, ip
    36c6:	d004      	beq.n	36d2 <boot_slots_compatible+0xe6>
        BOOT_LOG_WRN("Cannot upgrade: slots are not compatible");
    36c8:	4807      	ldr	r0, [pc, #28]	; (36e8 <boot_slots_compatible+0xfc>)
    36ca:	f000 fd7f 	bl	41cc <puts>
        return 0;
    36ce:	2000      	movs	r0, #0
    36d0:	e7a5      	b.n	361e <boot_slots_compatible+0x32>
        (j != num_sectors_secondary) ||
    36d2:	45ce      	cmp	lr, r9
    36d4:	d1f8      	bne.n	36c8 <boot_slots_compatible+0xdc>
    return 1;
    36d6:	2001      	movs	r0, #1
    36d8:	e7a1      	b.n	361e <boot_slots_compatible+0x32>
    36da:	bf00      	nop
    36dc:	00005420 	.word	0x00005420
    36e0:	00005450 	.word	0x00005450
    36e4:	00005488 	.word	0x00005488
    36e8:	000054c4 	.word	0x000054c4

000036ec <swap_status_source>:
{
    36ec:	b530      	push	{r4, r5, lr}
    36ee:	b087      	sub	sp, #28
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    36f0:	a902      	add	r1, sp, #8
    36f2:	2001      	movs	r0, #1
    36f4:	f7fe ff4c 	bl	2590 <boot_read_swap_state_by_id>
    assert(rc == 0);
    36f8:	bb68      	cbnz	r0, 3756 <swap_status_source+0x6a>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH, &state_scratch);
    36fa:	a904      	add	r1, sp, #16
    36fc:	2003      	movs	r0, #3
    36fe:	f7fe ff47 	bl	2590 <boot_read_swap_state_by_id>
    assert(rc == 0);
    3702:	4605      	mov	r5, r0
    3704:	bb68      	cbnz	r0, 3762 <swap_status_source+0x76>
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    3706:	f89d 3008 	ldrb.w	r3, [sp, #8]
    370a:	2b01      	cmp	r3, #1
    370c:	d031      	beq.n	3772 <swap_status_source+0x86>
    370e:	2b03      	cmp	r3, #3
    3710:	d02d      	beq.n	376e <swap_status_source+0x82>
    3712:	4a38      	ldr	r2, [pc, #224]	; (37f4 <swap_status_source+0x108>)
    3714:	f89d 3009 	ldrb.w	r3, [sp, #9]
    3718:	f89d 100a 	ldrb.w	r1, [sp, #10]
    371c:	f89d 000b 	ldrb.w	r0, [sp, #11]
    3720:	9001      	str	r0, [sp, #4]
    3722:	9100      	str	r1, [sp, #0]
    3724:	4934      	ldr	r1, [pc, #208]	; (37f8 <swap_status_source+0x10c>)
    3726:	4835      	ldr	r0, [pc, #212]	; (37fc <swap_status_source+0x110>)
    3728:	f001 f826 	bl	4778 <printf>
    BOOT_LOG_SWAP_STATE("Scratch", &state_scratch);
    372c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3730:	2b01      	cmp	r3, #1
    3732:	d022      	beq.n	377a <swap_status_source+0x8e>
    3734:	2b03      	cmp	r3, #3
    3736:	d01e      	beq.n	3776 <swap_status_source+0x8a>
    3738:	4a2e      	ldr	r2, [pc, #184]	; (37f4 <swap_status_source+0x108>)
    373a:	f89d 3011 	ldrb.w	r3, [sp, #17]
    373e:	f89d 1012 	ldrb.w	r1, [sp, #18]
    3742:	f89d 0013 	ldrb.w	r0, [sp, #19]
    3746:	9001      	str	r0, [sp, #4]
    3748:	9100      	str	r1, [sp, #0]
    374a:	492d      	ldr	r1, [pc, #180]	; (3800 <swap_status_source+0x114>)
    374c:	482b      	ldr	r0, [pc, #172]	; (37fc <swap_status_source+0x110>)
    374e:	f001 f813 	bl	4778 <printf>
    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
    3752:	2400      	movs	r4, #0
    3754:	e01d      	b.n	3792 <swap_status_source+0xa6>
    assert(rc == 0);
    3756:	2300      	movs	r3, #0
    3758:	461a      	mov	r2, r3
    375a:	4619      	mov	r1, r3
    375c:	4618      	mov	r0, r3
    375e:	f7fd ffd5 	bl	170c <__assert_func>
    assert(rc == 0);
    3762:	2300      	movs	r3, #0
    3764:	461a      	mov	r2, r3
    3766:	4619      	mov	r1, r3
    3768:	4618      	mov	r0, r3
    376a:	f7fd ffcf 	bl	170c <__assert_func>
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    376e:	4a25      	ldr	r2, [pc, #148]	; (3804 <swap_status_source+0x118>)
    3770:	e7d0      	b.n	3714 <swap_status_source+0x28>
    3772:	4a25      	ldr	r2, [pc, #148]	; (3808 <swap_status_source+0x11c>)
    3774:	e7ce      	b.n	3714 <swap_status_source+0x28>
    BOOT_LOG_SWAP_STATE("Scratch", &state_scratch);
    3776:	4a23      	ldr	r2, [pc, #140]	; (3804 <swap_status_source+0x118>)
    3778:	e7df      	b.n	373a <swap_status_source+0x4e>
    377a:	4a23      	ldr	r2, [pc, #140]	; (3808 <swap_status_source+0x11c>)
    377c:	e7dd      	b.n	373a <swap_status_source+0x4e>
            BOOT_LOG_INF("Boot source: %s",
    377e:	4923      	ldr	r1, [pc, #140]	; (380c <swap_status_source+0x120>)
    3780:	e000      	b.n	3784 <swap_status_source+0x98>
    3782:	4923      	ldr	r1, [pc, #140]	; (3810 <swap_status_source+0x124>)
    3784:	4823      	ldr	r0, [pc, #140]	; (3814 <swap_status_source+0x128>)
    3786:	f000 fff7 	bl	4778 <printf>
            return source;
    378a:	e030      	b.n	37ee <swap_status_source+0x102>
            BOOT_LOG_INF("Boot source: %s",
    378c:	4922      	ldr	r1, [pc, #136]	; (3818 <swap_status_source+0x12c>)
    378e:	e7f9      	b.n	3784 <swap_status_source+0x98>
    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
    3790:	3401      	adds	r4, #1
    3792:	2c03      	cmp	r4, #3
    3794:	d828      	bhi.n	37e8 <swap_status_source+0xfc>
        if (boot_magic_compatible_check(table->bst_magic_primary_slot,
    3796:	f89d 1008 	ldrb.w	r1, [sp, #8]
    379a:	4b20      	ldr	r3, [pc, #128]	; (381c <swap_status_source+0x130>)
    379c:	f813 0024 	ldrb.w	r0, [r3, r4, lsl #2]
    37a0:	f7fe fe5a 	bl	2458 <boot_magic_compatible_check>
    37a4:	2800      	cmp	r0, #0
    37a6:	d0f3      	beq.n	3790 <swap_status_source+0xa4>
            boot_magic_compatible_check(table->bst_magic_scratch,
    37a8:	4b1c      	ldr	r3, [pc, #112]	; (381c <swap_status_source+0x130>)
    37aa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    37ae:	f89d 1010 	ldrb.w	r1, [sp, #16]
    37b2:	7858      	ldrb	r0, [r3, #1]
    37b4:	f7fe fe50 	bl	2458 <boot_magic_compatible_check>
                          state_primary_slot.magic) &&
    37b8:	2800      	cmp	r0, #0
    37ba:	d0e9      	beq.n	3790 <swap_status_source+0xa4>
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    37bc:	4b17      	ldr	r3, [pc, #92]	; (381c <swap_status_source+0x130>)
    37be:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    37c2:	789b      	ldrb	r3, [r3, #2]
                          state_scratch.magic) &&
    37c4:	2b04      	cmp	r3, #4
    37c6:	d003      	beq.n	37d0 <swap_status_source+0xe4>
             table->bst_copy_done_primary_slot == state_primary_slot.copy_done))
    37c8:	f89d 200a 	ldrb.w	r2, [sp, #10]
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    37cc:	4293      	cmp	r3, r2
    37ce:	d1df      	bne.n	3790 <swap_status_source+0xa4>
            source = table->bst_status_source;
    37d0:	4b12      	ldr	r3, [pc, #72]	; (381c <swap_status_source+0x130>)
    37d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    37d6:	78e5      	ldrb	r5, [r4, #3]
            BOOT_LOG_INF("Boot source: %s",
    37d8:	2d00      	cmp	r5, #0
    37da:	d0d2      	beq.n	3782 <swap_status_source+0x96>
    37dc:	2d01      	cmp	r5, #1
    37de:	d0d5      	beq.n	378c <swap_status_source+0xa0>
    37e0:	2d02      	cmp	r5, #2
    37e2:	d0cc      	beq.n	377e <swap_status_source+0x92>
    37e4:	490e      	ldr	r1, [pc, #56]	; (3820 <swap_status_source+0x134>)
    37e6:	e7cd      	b.n	3784 <swap_status_source+0x98>
    BOOT_LOG_INF("Boot source: none");
    37e8:	480e      	ldr	r0, [pc, #56]	; (3824 <swap_status_source+0x138>)
    37ea:	f000 fcef 	bl	41cc <puts>
}
    37ee:	4628      	mov	r0, r5
    37f0:	b007      	add	sp, #28
    37f2:	bd30      	pop	{r4, r5, pc}
    37f4:	00005528 	.word	0x00005528
    37f8:	0000555c 	.word	0x0000555c
    37fc:	0000556c 	.word	0x0000556c
    3800:	000055b0 	.word	0x000055b0
    3804:	00005534 	.word	0x00005534
    3808:	0000552c 	.word	0x0000552c
    380c:	0000554c 	.word	0x0000554c
    3810:	00005544 	.word	0x00005544
    3814:	000055b8 	.word	0x000055b8
    3818:	0000553c 	.word	0x0000553c
    381c:	000054f4 	.word	0x000054f4
    3820:	000052bc 	.word	0x000052bc
    3824:	000055d0 	.word	0x000055d0

00003828 <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    3828:	b5f0      	push	{r4, r5, r6, r7, lr}
    382a:	b083      	sub	sp, #12
    382c:	4605      	mov	r5, r0
    382e:	460e      	mov	r6, r1
    uint32_t swap_idx;
    int last_idx_secondary_slot;
    uint32_t primary_slot_size;
    uint32_t secondary_slot_size;
    primary_slot_size = 0;
    secondary_slot_size = 0;
    3830:	2000      	movs	r0, #0
    primary_slot_size = 0;
    3832:	4603      	mov	r3, r0
    last_sector_idx = 0;
    3834:	4601      	mov	r1, r0
    3836:	e000      	b.n	383a <swap_run+0x12>
        if (primary_slot_size >= copy_size &&
                secondary_slot_size >= copy_size &&
                primary_slot_size == secondary_slot_size) {
            break;
        }
        last_sector_idx++;
    3838:	3101      	adds	r1, #1
        if ((primary_slot_size < copy_size) ||
    383a:	4293      	cmp	r3, r2
    383c:	d301      	bcc.n	3842 <swap_run+0x1a>
    383e:	4283      	cmp	r3, r0
    3840:	d207      	bcs.n	3852 <swap_run+0x2a>
    3842:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    3844:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
    3848:	ea4f 078c 	mov.w	r7, ip, lsl #2
    384c:	443c      	add	r4, r7
    384e:	68a4      	ldr	r4, [r4, #8]
           primary_slot_size += boot_img_sector_size(state,
    3850:	4423      	add	r3, r4
        if ((secondary_slot_size < copy_size) ||
    3852:	4290      	cmp	r0, r2
    3854:	d301      	bcc.n	385a <swap_run+0x32>
    3856:	4283      	cmp	r3, r0
    3858:	d907      	bls.n	386a <swap_run+0x42>
    385a:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    385c:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
    3860:	ea4f 078c 	mov.w	r7, ip, lsl #2
    3864:	443c      	add	r4, r7
    3866:	68a4      	ldr	r4, [r4, #8]
           secondary_slot_size += boot_img_sector_size(state,
    3868:	4420      	add	r0, r4
        if (primary_slot_size >= copy_size &&
    386a:	4293      	cmp	r3, r2
    386c:	d3e4      	bcc.n	3838 <swap_run+0x10>
    386e:	4290      	cmp	r0, r2
    3870:	d3e2      	bcc.n	3838 <swap_run+0x10>
                secondary_slot_size >= copy_size &&
    3872:	4283      	cmp	r3, r0
    3874:	d1e0      	bne.n	3838 <swap_run+0x10>
        last_idx_secondary_slot++;
    }

    swap_idx = 0;
    3876:	2400      	movs	r4, #0
    3878:	e002      	b.n	3880 <swap_run+0x58>
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
            boot_swap_sectors(first_sector_idx, sz, state, bs);
        }

        last_sector_idx = first_sector_idx - 1;
    387a:	9901      	ldr	r1, [sp, #4]
    387c:	3901      	subs	r1, #1
        swap_idx++;
    387e:	3401      	adds	r4, #1
    while (last_sector_idx >= 0) {
    3880:	2900      	cmp	r1, #0
    3882:	db0e      	blt.n	38a2 <swap_run+0x7a>
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
    3884:	aa01      	add	r2, sp, #4
    3886:	4628      	mov	r0, r5
    3888:	f7ff fc79 	bl	317e <boot_copy_sz>
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
    388c:	6833      	ldr	r3, [r6, #0]
    388e:	3b01      	subs	r3, #1
    3890:	42a3      	cmp	r3, r4
    3892:	d8f2      	bhi.n	387a <swap_run+0x52>
            boot_swap_sectors(first_sector_idx, sz, state, bs);
    3894:	4633      	mov	r3, r6
    3896:	462a      	mov	r2, r5
    3898:	4601      	mov	r1, r0
    389a:	9801      	ldr	r0, [sp, #4]
    389c:	f7ff fc86 	bl	31ac <boot_swap_sectors>
    38a0:	e7eb      	b.n	387a <swap_run+0x52>
    }

}
    38a2:	b003      	add	sp, #12
    38a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000038a6 <bootutil_img_hash>:
static int
bootutil_img_hash(struct enc_key_data *enc_state, int image_index,
                  struct image_header *hdr, const struct flash_area *fap,
                  uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *hash_result,
                  uint8_t *seed, int seed_len)
{
    38a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    38aa:	b09d      	sub	sp, #116	; 0x74
    38ac:	4615      	mov	r5, r2
    38ae:	4699      	mov	r9, r3
    38b0:	9f24      	ldr	r7, [sp, #144]	; 0x90
    38b2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    38b6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
#ifdef MCUBOOT_USE_MBED_TLS
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
    38b8:	a801      	add	r0, sp, #4
    38ba:	f000 f95a 	bl	3b72 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    38be:	2100      	movs	r1, #0
    38c0:	a801      	add	r0, sp, #4
    38c2:	f000 f95d 	bl	3b80 <mbedtls_sha256_starts_ret>

    bootutil_sha256_init(&sha256_ctx);

    /* in some cases (split image) the hash is seeded with data from
     * the loader image */
    if (seed && (seed_len > 0)) {
    38c6:	b114      	cbz	r4, 38ce <bootutil_img_hash+0x28>
    38c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    38ca:	2b00      	cmp	r3, #0
    38cc:	dc06      	bgt.n	38dc <bootutil_img_hash+0x36>
        bootutil_sha256_update(&sha256_ctx, seed, seed_len);
    }

    /* Hash is computed over image header and image itself. */
    size = hdr_size = hdr->ih_hdr_size;
    38ce:	892b      	ldrh	r3, [r5, #8]
    size += hdr->ih_img_size;
    38d0:	68ee      	ldr	r6, [r5, #12]
    38d2:	4433      	add	r3, r6
    tlv_off = size;

    /* If protected TLVs are present they are also hashed. */
    size += hdr->ih_protect_tlv_size;
    38d4:	896e      	ldrh	r6, [r5, #10]
    38d6:	441e      	add	r6, r3

    for (off = 0; off < size; off += blk_sz) {
    38d8:	2500      	movs	r5, #0
    38da:	e013      	b.n	3904 <bootutil_img_hash+0x5e>

static inline void bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    38dc:	461a      	mov	r2, r3
    38de:	4621      	mov	r1, r4
    38e0:	a801      	add	r0, sp, #4
    38e2:	f000 fa33 	bl	3d4c <mbedtls_sha256_update_ret>
    38e6:	e7f2      	b.n	38ce <bootutil_img_hash+0x28>
        if ((off < tlv_off) && ((off + blk_sz) > tlv_off)) {
            /* read only up to the end of the image payload */
            blk_sz = tlv_off - off;
        }
#endif
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
    38e8:	4623      	mov	r3, r4
    38ea:	463a      	mov	r2, r7
    38ec:	4629      	mov	r1, r5
    38ee:	4648      	mov	r0, r9
    38f0:	f000 fff8 	bl	48e4 <flash_area_read>
        if (rc) {
    38f4:	4603      	mov	r3, r0
    38f6:	b988      	cbnz	r0, 391c <bootutil_img_hash+0x76>
    38f8:	4622      	mov	r2, r4
    38fa:	4639      	mov	r1, r7
    38fc:	a801      	add	r0, sp, #4
    38fe:	f000 fa25 	bl	3d4c <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
    3902:	4425      	add	r5, r4
    3904:	42b5      	cmp	r5, r6
    3906:	d204      	bcs.n	3912 <bootutil_img_hash+0x6c>
        blk_sz = size - off;
    3908:	1b74      	subs	r4, r6, r5
        if (blk_sz > tmp_buf_sz) {
    390a:	4544      	cmp	r4, r8
    390c:	d9ec      	bls.n	38e8 <bootutil_img_hash+0x42>
            blk_sz = tmp_buf_sz;
    390e:	4644      	mov	r4, r8
    3910:	e7ea      	b.n	38e8 <bootutil_img_hash+0x42>
}

static inline void bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    (void)mbedtls_sha256_finish_ret(ctx, output);
    3912:	9926      	ldr	r1, [sp, #152]	; 0x98
    3914:	a801      	add	r0, sp, #4
    3916:	f000 fa5c 	bl	3dd2 <mbedtls_sha256_finish_ret>
#endif
        bootutil_sha256_update(&sha256_ctx, tmp_buf, blk_sz);
    }
    bootutil_sha256_finish(&sha256_ctx, hash_result);

    return 0;
    391a:	2300      	movs	r3, #0
}
    391c:	4618      	mov	r0, r3
    391e:	b01d      	add	sp, #116	; 0x74
    3920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00003924 <bootutil_img_validate>:
int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
    3924:	b5f0      	push	{r4, r5, r6, r7, lr}
    3926:	b09f      	sub	sp, #124	; 0x7c
    3928:	4617      	mov	r7, r2
    392a:	461e      	mov	r6, r3
    392c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    struct image_tlv_iter it;
    uint8_t buf[SIG_BUF_SIZE];
    uint8_t hash[32];
    int rc;

    rc = bootutil_img_hash(enc_state, image_index, hdr, fap, tmp_buf,
    392e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    3930:	9404      	str	r4, [sp, #16]
    3932:	9c26      	ldr	r4, [sp, #152]	; 0x98
    3934:	9403      	str	r4, [sp, #12]
    3936:	ac06      	add	r4, sp, #24
    3938:	9402      	str	r4, [sp, #8]
    393a:	9c25      	ldr	r4, [sp, #148]	; 0x94
    393c:	9401      	str	r4, [sp, #4]
    393e:	9c24      	ldr	r4, [sp, #144]	; 0x90
    3940:	9400      	str	r4, [sp, #0]
    3942:	f7ff ffb0 	bl	38a6 <bootutil_img_hash>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
    3946:	4604      	mov	r4, r0
    3948:	2800      	cmp	r0, #0
    394a:	d140      	bne.n	39ce <bootutil_img_validate+0xaa>
        return rc;
    }

    if (out_hash) {
    394c:	b155      	cbz	r5, 3964 <bootutil_img_validate+0x40>
        memcpy(out_hash, hash, 32);
    394e:	ac06      	add	r4, sp, #24
    3950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    3952:	6028      	str	r0, [r5, #0]
    3954:	6069      	str	r1, [r5, #4]
    3956:	60aa      	str	r2, [r5, #8]
    3958:	60eb      	str	r3, [r5, #12]
    395a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    395c:	6128      	str	r0, [r5, #16]
    395e:	6169      	str	r1, [r5, #20]
    3960:	61aa      	str	r2, [r5, #24]
    3962:	61eb      	str	r3, [r5, #28]
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
    3964:	2300      	movs	r3, #0
    3966:	9300      	str	r3, [sp, #0]
    3968:	f64f 73ff 	movw	r3, #65535	; 0xffff
    396c:	4632      	mov	r2, r6
    396e:	4639      	mov	r1, r7
    3970:	a816      	add	r0, sp, #88	; 0x58
    3972:	f000 f834 	bl	39de <bootutil_tlv_iter_begin>
    if (rc) {
    3976:	4604      	mov	r4, r0
    3978:	bb48      	cbnz	r0, 39ce <bootutil_img_validate+0xaa>
    int sha256_valid = 0;
    397a:	4605      	mov	r5, r0
    /*
     * Traverse through all of the TLVs, performing any checks we know
     * and are able to do.
     */
    while (true) {
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
    397c:	ab1c      	add	r3, sp, #112	; 0x70
    397e:	f10d 0272 	add.w	r2, sp, #114	; 0x72
    3982:	a91d      	add	r1, sp, #116	; 0x74
    3984:	a816      	add	r0, sp, #88	; 0x58
    3986:	f000 f88f 	bl	3aa8 <bootutil_tlv_iter_next>
        if (rc < 0) {
    398a:	2800      	cmp	r0, #0
    398c:	db1d      	blt.n	39ca <bootutil_img_validate+0xa6>
            return -1;
        } else if (rc > 0) {
    398e:	dc18      	bgt.n	39c2 <bootutil_img_validate+0x9e>
            break;
        }

        if (type == IMAGE_TLV_SHA256) {
    3990:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    3994:	2b10      	cmp	r3, #16
    3996:	d1f1      	bne.n	397c <bootutil_img_validate+0x58>
            /*
             * Verify the SHA256 image hash.  This must always be
             * present.
             */
            if (len != sizeof(hash)) {
    3998:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    399c:	2b20      	cmp	r3, #32
    399e:	d119      	bne.n	39d4 <bootutil_img_validate+0xb0>
                return -1;
            }
            rc = flash_area_read(fap, off, buf, sizeof hash);
    39a0:	aa0e      	add	r2, sp, #56	; 0x38
    39a2:	991d      	ldr	r1, [sp, #116]	; 0x74
    39a4:	4630      	mov	r0, r6
    39a6:	f000 ff9d 	bl	48e4 <flash_area_read>
            if (rc) {
    39aa:	b9b0      	cbnz	r0, 39da <bootutil_img_validate+0xb6>
                return rc;
            }
            if (memcmp(hash, buf, sizeof(hash))) {
    39ac:	2220      	movs	r2, #32
    39ae:	a90e      	add	r1, sp, #56	; 0x38
    39b0:	a806      	add	r0, sp, #24
    39b2:	f7fe f900 	bl	1bb6 <memcmp>
                return -1;
            }

            sha256_valid = 1;
    39b6:	2501      	movs	r5, #1
            if (memcmp(hash, buf, sizeof(hash))) {
    39b8:	2800      	cmp	r0, #0
    39ba:	d0df      	beq.n	397c <bootutil_img_validate+0x58>
                return -1;
    39bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    39c0:	e005      	b.n	39ce <bootutil_img_validate+0xaa>
            key_id = -1;
#endif
        }
    }

    if (!sha256_valid) {
    39c2:	b925      	cbnz	r5, 39ce <bootutil_img_validate+0xaa>
        return -1;
    39c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    39c8:	e001      	b.n	39ce <bootutil_img_validate+0xaa>
            return -1;
    39ca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        return -1;
    }
#endif

    return 0;
}
    39ce:	4620      	mov	r0, r4
    39d0:	b01f      	add	sp, #124	; 0x7c
    39d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                return -1;
    39d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    39d8:	e7f9      	b.n	39ce <bootutil_img_validate+0xaa>
                return rc;
    39da:	4604      	mov	r4, r0
    39dc:	e7f7      	b.n	39ce <bootutil_img_validate+0xaa>

000039de <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    39de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    39e2:	b083      	sub	sp, #12
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    39e4:	2800      	cmp	r0, #0
    39e6:	d04a      	beq.n	3a7e <bootutil_tlv_iter_begin+0xa0>
    39e8:	4605      	mov	r5, r0
    39ea:	2900      	cmp	r1, #0
    39ec:	d04a      	beq.n	3a84 <bootutil_tlv_iter_begin+0xa6>
    39ee:	2a00      	cmp	r2, #0
    39f0:	d04b      	beq.n	3a8a <bootutil_tlv_iter_begin+0xac>
    39f2:	4699      	mov	r9, r3
    39f4:	4617      	mov	r7, r2
    39f6:	460c      	mov	r4, r1
        return -1;
    }

    off_ = BOOT_TLV_OFF(hdr);
    39f8:	890e      	ldrh	r6, [r1, #8]
    39fa:	68cb      	ldr	r3, [r1, #12]
    39fc:	441e      	add	r6, r3
    if (flash_area_read(fap, off_, &info, sizeof(info))) {
    39fe:	2304      	movs	r3, #4
    3a00:	eb0d 0203 	add.w	r2, sp, r3
    3a04:	4631      	mov	r1, r6
    3a06:	4638      	mov	r0, r7
    3a08:	f000 ff6c 	bl	48e4 <flash_area_read>
    3a0c:	4680      	mov	r8, r0
    3a0e:	2800      	cmp	r0, #0
    3a10:	d13e      	bne.n	3a90 <bootutil_tlv_iter_begin+0xb2>
        return -1;
    }

    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    3a12:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    3a16:	f646 1308 	movw	r3, #26888	; 0x6908
    3a1a:	429a      	cmp	r2, r3
    3a1c:	d01e      	beq.n	3a5c <bootutil_tlv_iter_begin+0x7e>
        }

        if (flash_area_read(fap, off_ + info.it_tlv_tot, &info, sizeof(info))) {
            return -1;
        }
    } else if (hdr->ih_protect_tlv_size != 0) {
    3a1e:	8963      	ldrh	r3, [r4, #10]
    3a20:	2b00      	cmp	r3, #0
    3a22:	d13b      	bne.n	3a9c <bootutil_tlv_iter_begin+0xbe>
        return -1;
    }

    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    3a24:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    3a28:	f646 1307 	movw	r3, #26887	; 0x6907
    3a2c:	429a      	cmp	r2, r3
    3a2e:	d138      	bne.n	3aa2 <bootutil_tlv_iter_begin+0xc4>
        return -1;
    }

    it->hdr = hdr;
    3a30:	602c      	str	r4, [r5, #0]
    it->fap = fap;
    3a32:	606f      	str	r7, [r5, #4]
    it->type = type;
    3a34:	f8a5 9008 	strh.w	r9, [r5, #8]
    it->prot = prot;
    3a38:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    3a3c:	72ab      	strb	r3, [r5, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    3a3e:	8963      	ldrh	r3, [r4, #10]
    3a40:	4433      	add	r3, r6
    3a42:	60eb      	str	r3, [r5, #12]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    3a44:	8963      	ldrh	r3, [r4, #10]
    3a46:	4433      	add	r3, r6
    3a48:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    3a4c:	4413      	add	r3, r2
    3a4e:	616b      	str	r3, [r5, #20]
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    3a50:	3604      	adds	r6, #4
    3a52:	612e      	str	r6, [r5, #16]
    return 0;
}
    3a54:	4640      	mov	r0, r8
    3a56:	b003      	add	sp, #12
    3a58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    3a5c:	8963      	ldrh	r3, [r4, #10]
    3a5e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    3a62:	428b      	cmp	r3, r1
    3a64:	d117      	bne.n	3a96 <bootutil_tlv_iter_begin+0xb8>
        if (flash_area_read(fap, off_ + info.it_tlv_tot, &info, sizeof(info))) {
    3a66:	2304      	movs	r3, #4
    3a68:	eb0d 0203 	add.w	r2, sp, r3
    3a6c:	4431      	add	r1, r6
    3a6e:	4638      	mov	r0, r7
    3a70:	f000 ff38 	bl	48e4 <flash_area_read>
    3a74:	2800      	cmp	r0, #0
    3a76:	d0d5      	beq.n	3a24 <bootutil_tlv_iter_begin+0x46>
            return -1;
    3a78:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3a7c:	e7ea      	b.n	3a54 <bootutil_tlv_iter_begin+0x76>
        return -1;
    3a7e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3a82:	e7e7      	b.n	3a54 <bootutil_tlv_iter_begin+0x76>
    3a84:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3a88:	e7e4      	b.n	3a54 <bootutil_tlv_iter_begin+0x76>
    3a8a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3a8e:	e7e1      	b.n	3a54 <bootutil_tlv_iter_begin+0x76>
        return -1;
    3a90:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3a94:	e7de      	b.n	3a54 <bootutil_tlv_iter_begin+0x76>
            return -1;
    3a96:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3a9a:	e7db      	b.n	3a54 <bootutil_tlv_iter_begin+0x76>
        return -1;
    3a9c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3aa0:	e7d8      	b.n	3a54 <bootutil_tlv_iter_begin+0x76>
        return -1;
    3aa2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3aa6:	e7d5      	b.n	3a54 <bootutil_tlv_iter_begin+0x76>

00003aa8 <bootutil_tlv_iter_next>:
                       uint16_t *type)
{
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    3aa8:	2800      	cmp	r0, #0
    3aaa:	d04d      	beq.n	3b48 <bootutil_tlv_iter_next+0xa0>
{
    3aac:	b5f0      	push	{r4, r5, r6, r7, lr}
    3aae:	b083      	sub	sp, #12
    3ab0:	4604      	mov	r4, r0
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    3ab2:	6800      	ldr	r0, [r0, #0]
    3ab4:	2800      	cmp	r0, #0
    3ab6:	d04b      	beq.n	3b50 <bootutil_tlv_iter_next+0xa8>
    3ab8:	461d      	mov	r5, r3
    3aba:	4616      	mov	r6, r2
    3abc:	460f      	mov	r7, r1
    3abe:	6863      	ldr	r3, [r4, #4]
    3ac0:	bb0b      	cbnz	r3, 3b06 <bootutil_tlv_iter_next+0x5e>
        return -1;
    3ac2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3ac6:	e03a      	b.n	3b3e <bootutil_tlv_iter_next+0x96>
    while (it->tlv_off < it->tlv_end) {
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
            it->tlv_off += sizeof(struct image_tlv_info);
        }

        rc = flash_area_read(it->fap, it->tlv_off, &tlv, sizeof tlv);
    3ac8:	2304      	movs	r3, #4
    3aca:	eb0d 0203 	add.w	r2, sp, r3
    3ace:	6921      	ldr	r1, [r4, #16]
    3ad0:	6860      	ldr	r0, [r4, #4]
    3ad2:	f000 ff07 	bl	48e4 <flash_area_read>
        if (rc) {
    3ad6:	4601      	mov	r1, r0
    3ad8:	2800      	cmp	r0, #0
    3ada:	d13c      	bne.n	3b56 <bootutil_tlv_iter_next+0xae>
            return -1;
        }

        /* No more TLVs in the protected area */
        if (it->prot && it->tlv_off >= it->prot_end) {
    3adc:	7aa3      	ldrb	r3, [r4, #10]
    3ade:	b11b      	cbz	r3, 3ae8 <bootutil_tlv_iter_next+0x40>
    3ae0:	6922      	ldr	r2, [r4, #16]
    3ae2:	68e3      	ldr	r3, [r4, #12]
    3ae4:	429a      	cmp	r2, r3
    3ae6:	d239      	bcs.n	3b5c <bootutil_tlv_iter_next+0xb4>
            return 1;
        }

        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    3ae8:	8923      	ldrh	r3, [r4, #8]
    3aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3aee:	4293      	cmp	r3, r2
    3af0:	d017      	beq.n	3b22 <bootutil_tlv_iter_next+0x7a>
    3af2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    3af6:	4293      	cmp	r3, r2
    3af8:	d013      	beq.n	3b22 <bootutil_tlv_iter_next+0x7a>
            *len = tlv.it_len;
            it->tlv_off += sizeof(tlv) + tlv.it_len;
            return 0;
        }

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    3afa:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    3afe:	6923      	ldr	r3, [r4, #16]
    3b00:	4418      	add	r0, r3
    3b02:	3004      	adds	r0, #4
    3b04:	6120      	str	r0, [r4, #16]
    while (it->tlv_off < it->tlv_end) {
    3b06:	6920      	ldr	r0, [r4, #16]
    3b08:	6963      	ldr	r3, [r4, #20]
    3b0a:	4298      	cmp	r0, r3
    3b0c:	d21a      	bcs.n	3b44 <bootutil_tlv_iter_next+0x9c>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    3b0e:	6823      	ldr	r3, [r4, #0]
    3b10:	895b      	ldrh	r3, [r3, #10]
    3b12:	2b00      	cmp	r3, #0
    3b14:	d0d8      	beq.n	3ac8 <bootutil_tlv_iter_next+0x20>
    3b16:	68e3      	ldr	r3, [r4, #12]
    3b18:	4283      	cmp	r3, r0
    3b1a:	d1d5      	bne.n	3ac8 <bootutil_tlv_iter_next+0x20>
            it->tlv_off += sizeof(struct image_tlv_info);
    3b1c:	3004      	adds	r0, #4
    3b1e:	6120      	str	r0, [r4, #16]
    3b20:	e7d2      	b.n	3ac8 <bootutil_tlv_iter_next+0x20>
            if (type != NULL) {
    3b22:	b115      	cbz	r5, 3b2a <bootutil_tlv_iter_next+0x82>
                *type = tlv.it_type;
    3b24:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    3b28:	802b      	strh	r3, [r5, #0]
            *off = it->tlv_off + sizeof(tlv);
    3b2a:	6923      	ldr	r3, [r4, #16]
    3b2c:	3304      	adds	r3, #4
    3b2e:	603b      	str	r3, [r7, #0]
            *len = tlv.it_len;
    3b30:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    3b34:	8033      	strh	r3, [r6, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    3b36:	6922      	ldr	r2, [r4, #16]
    3b38:	4413      	add	r3, r2
    3b3a:	3304      	adds	r3, #4
    3b3c:	6123      	str	r3, [r4, #16]
    }

    return 1;
}
    3b3e:	4608      	mov	r0, r1
    3b40:	b003      	add	sp, #12
    3b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 1;
    3b44:	2101      	movs	r1, #1
    3b46:	e7fa      	b.n	3b3e <bootutil_tlv_iter_next+0x96>
        return -1;
    3b48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
}
    3b4c:	4608      	mov	r0, r1
    3b4e:	4770      	bx	lr
        return -1;
    3b50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3b54:	e7f3      	b.n	3b3e <bootutil_tlv_iter_next+0x96>
            return -1;
    3b56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3b5a:	e7f0      	b.n	3b3e <bootutil_tlv_iter_next+0x96>
            return 1;
    3b5c:	2101      	movs	r1, #1
    3b5e:	e7ee      	b.n	3b3e <bootutil_tlv_iter_next+0x96>

00003b60 <flash_area_id_from_multi_image_slot>:
#include <flash_map/flash_map.h>
#include <flash_map_backend/flash_map_backend.h>

int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    3b60:	b119      	cbz	r1, 3b6a <flash_area_id_from_multi_image_slot+0xa>
    3b62:	2901      	cmp	r1, #1
    3b64:	d003      	beq.n	3b6e <flash_area_id_from_multi_image_slot+0xe>
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
#if MCUBOOT_SWAP_USING_SCRATCH
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
    }
    return 255;
    3b66:	20ff      	movs	r0, #255	; 0xff
    3b68:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    3b6a:	2001      	movs	r0, #1
    3b6c:	4770      	bx	lr
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    3b6e:	2002      	movs	r0, #2
}
    3b70:	4770      	bx	lr

00003b72 <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    3b72:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    3b74:	226c      	movs	r2, #108	; 0x6c
    3b76:	2100      	movs	r1, #0
    3b78:	f7fe f84e 	bl	1c18 <memset>
}
    3b7c:	bd08      	pop	{r3, pc}
	...

00003b80 <mbedtls_sha256_starts_ret>:
/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
    3b80:	2300      	movs	r3, #0
    3b82:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
    3b84:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
    3b86:	460b      	mov	r3, r1
    3b88:	b1e1      	cbz	r1, 3bc4 <mbedtls_sha256_starts_ret+0x44>
        ctx->state[7] = 0x5BE0CD19;
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
    3b8a:	4a19      	ldr	r2, [pc, #100]	; (3bf0 <mbedtls_sha256_starts_ret+0x70>)
    3b8c:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0x367CD507;
    3b8e:	4a19      	ldr	r2, [pc, #100]	; (3bf4 <mbedtls_sha256_starts_ret+0x74>)
    3b90:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3070DD17;
    3b92:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
    3b96:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
    3b9a:	f502 6201 	add.w	r2, r2, #2064	; 0x810
    3b9e:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xF70E5939;
    3ba0:	4a15      	ldr	r2, [pc, #84]	; (3bf8 <mbedtls_sha256_starts_ret+0x78>)
    3ba2:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
    3ba4:	4a15      	ldr	r2, [pc, #84]	; (3bfc <mbedtls_sha256_starts_ret+0x7c>)
    3ba6:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x68581511;
    3ba8:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
    3bac:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
    3bb0:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
    3bb4:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    3bb6:	4a12      	ldr	r2, [pc, #72]	; (3c00 <mbedtls_sha256_starts_ret+0x80>)
    3bb8:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    3bba:	4a12      	ldr	r2, [pc, #72]	; (3c04 <mbedtls_sha256_starts_ret+0x84>)
    3bbc:	6242      	str	r2, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
    3bbe:	6683      	str	r3, [r0, #104]	; 0x68

    return( 0 );
}
    3bc0:	2000      	movs	r0, #0
    3bc2:	4770      	bx	lr
        ctx->state[0] = 0x6A09E667;
    3bc4:	4a10      	ldr	r2, [pc, #64]	; (3c08 <mbedtls_sha256_starts_ret+0x88>)
    3bc6:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
    3bc8:	4a10      	ldr	r2, [pc, #64]	; (3c0c <mbedtls_sha256_starts_ret+0x8c>)
    3bca:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
    3bcc:	4a10      	ldr	r2, [pc, #64]	; (3c10 <mbedtls_sha256_starts_ret+0x90>)
    3bce:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
    3bd0:	4a10      	ldr	r2, [pc, #64]	; (3c14 <mbedtls_sha256_starts_ret+0x94>)
    3bd2:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0x510E527F;
    3bd4:	4a10      	ldr	r2, [pc, #64]	; (3c18 <mbedtls_sha256_starts_ret+0x98>)
    3bd6:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x9B05688C;
    3bd8:	4a10      	ldr	r2, [pc, #64]	; (3c1c <mbedtls_sha256_starts_ret+0x9c>)
    3bda:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
    3bdc:	4a10      	ldr	r2, [pc, #64]	; (3c20 <mbedtls_sha256_starts_ret+0xa0>)
    3bde:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    3be0:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
    3be4:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
    3be8:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
    3bec:	6242      	str	r2, [r0, #36]	; 0x24
    3bee:	e7e6      	b.n	3bbe <mbedtls_sha256_starts_ret+0x3e>
    3bf0:	c1059ed8 	.word	0xc1059ed8
    3bf4:	367cd507 	.word	0x367cd507
    3bf8:	f70e5939 	.word	0xf70e5939
    3bfc:	ffc00b31 	.word	0xffc00b31
    3c00:	64f98fa7 	.word	0x64f98fa7
    3c04:	befa4fa4 	.word	0xbefa4fa4
    3c08:	6a09e667 	.word	0x6a09e667
    3c0c:	bb67ae85 	.word	0xbb67ae85
    3c10:	3c6ef372 	.word	0x3c6ef372
    3c14:	a54ff53a 	.word	0xa54ff53a
    3c18:	510e527f 	.word	0x510e527f
    3c1c:	9b05688c 	.word	0x9b05688c
    3c20:	1f83d9ab 	.word	0x1f83d9ab

00003c24 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    3c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3c28:	b0c8      	sub	sp, #288	; 0x120
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
    3c2a:	2300      	movs	r3, #0
    3c2c:	e005      	b.n	3c3a <mbedtls_internal_sha256_process+0x16>
        A[i] = ctx->state[i];
    3c2e:	1c9a      	adds	r2, r3, #2
    3c30:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    3c34:	f84d 2023 	str.w	r2, [sp, r3, lsl #2]
    for( i = 0; i < 8; i++ )
    3c38:	3301      	adds	r3, #1
    3c3a:	2b07      	cmp	r3, #7
    3c3c:	d9f7      	bls.n	3c2e <mbedtls_internal_sha256_process+0xa>

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
    3c3e:	2200      	movs	r2, #0
    3c40:	e04b      	b.n	3cda <mbedtls_internal_sha256_process+0xb6>
    {
        if( i < 16 )
            GET_UINT32_BE( W[i], data, 4 * i );
    3c42:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
    3c46:	eb01 0482 	add.w	r4, r1, r2, lsl #2
    3c4a:	7863      	ldrb	r3, [r4, #1]
    3c4c:	041b      	lsls	r3, r3, #16
    3c4e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    3c52:	78a5      	ldrb	r5, [r4, #2]
    3c54:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    3c58:	78e4      	ldrb	r4, [r4, #3]
    3c5a:	4323      	orrs	r3, r4
    3c5c:	ac08      	add	r4, sp, #32
    3c5e:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        else
            R( i );

        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
    3c62:	9b07      	ldr	r3, [sp, #28]
    3c64:	9c04      	ldr	r4, [sp, #16]
    3c66:	ea4f 25f4 	mov.w	r5, r4, ror #11
    3c6a:	ea85 15b4 	eor.w	r5, r5, r4, ror #6
    3c6e:	ea85 6574 	eor.w	r5, r5, r4, ror #25
    3c72:	442b      	add	r3, r5
    3c74:	9e06      	ldr	r6, [sp, #24]
    3c76:	9f05      	ldr	r7, [sp, #20]
    3c78:	ea86 0507 	eor.w	r5, r6, r7
    3c7c:	4025      	ands	r5, r4
    3c7e:	4075      	eors	r5, r6
    3c80:	442b      	add	r3, r5
    3c82:	4d31      	ldr	r5, [pc, #196]	; (3d48 <mbedtls_internal_sha256_process+0x124>)
    3c84:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    3c88:	442b      	add	r3, r5
    3c8a:	ad08      	add	r5, sp, #32
    3c8c:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    3c90:	442b      	add	r3, r5
    3c92:	f8dd e000 	ldr.w	lr, [sp]
    3c96:	ea4f 3c7e 	mov.w	ip, lr, ror #13
    3c9a:	ea8c 0cbe 	eor.w	ip, ip, lr, ror #2
    3c9e:	ea8c 5cbe 	eor.w	ip, ip, lr, ror #22
    3ca2:	f8dd 8004 	ldr.w	r8, [sp, #4]
    3ca6:	ea0e 0508 	and.w	r5, lr, r8
    3caa:	f8dd 9008 	ldr.w	r9, [sp, #8]
    3cae:	ea4e 0a08 	orr.w	sl, lr, r8
    3cb2:	ea09 0a0a 	and.w	sl, r9, sl
    3cb6:	ea45 050a 	orr.w	r5, r5, sl
    3cba:	44ac      	add	ip, r5
    3cbc:	9d03      	ldr	r5, [sp, #12]
    3cbe:	441d      	add	r5, r3
    3cc0:	4463      	add	r3, ip

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
    3cc2:	9607      	str	r6, [sp, #28]
    3cc4:	9706      	str	r7, [sp, #24]
    3cc6:	9405      	str	r4, [sp, #20]
    3cc8:	9504      	str	r5, [sp, #16]
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    3cca:	f8cd 900c 	str.w	r9, [sp, #12]
    3cce:	f8cd 8008 	str.w	r8, [sp, #8]
    3cd2:	f8cd e004 	str.w	lr, [sp, #4]
    3cd6:	9300      	str	r3, [sp, #0]
    for( i = 0; i < 64; i++ )
    3cd8:	3201      	adds	r2, #1
    3cda:	2a3f      	cmp	r2, #63	; 0x3f
    3cdc:	d822      	bhi.n	3d24 <mbedtls_internal_sha256_process+0x100>
        if( i < 16 )
    3cde:	2a0f      	cmp	r2, #15
    3ce0:	d9af      	bls.n	3c42 <mbedtls_internal_sha256_process+0x1e>
            R( i );
    3ce2:	1e93      	subs	r3, r2, #2
    3ce4:	ac08      	add	r4, sp, #32
    3ce6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    3cea:	ea4f 43f5 	mov.w	r3, r5, ror #19
    3cee:	ea83 4375 	eor.w	r3, r3, r5, ror #17
    3cf2:	ea83 2395 	eor.w	r3, r3, r5, lsr #10
    3cf6:	1fd5      	subs	r5, r2, #7
    3cf8:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
    3cfc:	442b      	add	r3, r5
    3cfe:	f1a2 050f 	sub.w	r5, r2, #15
    3d02:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
    3d06:	ea4f 45b6 	mov.w	r5, r6, ror #18
    3d0a:	ea85 15f6 	eor.w	r5, r5, r6, ror #7
    3d0e:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
    3d12:	442b      	add	r3, r5
    3d14:	f1a2 0510 	sub.w	r5, r2, #16
    3d18:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
    3d1c:	442b      	add	r3, r5
    3d1e:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
    3d22:	e79e      	b.n	3c62 <mbedtls_internal_sha256_process+0x3e>
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
    3d24:	2300      	movs	r3, #0
    3d26:	e008      	b.n	3d3a <mbedtls_internal_sha256_process+0x116>
        ctx->state[i] += A[i];
    3d28:	f85d 4023 	ldr.w	r4, [sp, r3, lsl #2]
    3d2c:	1c99      	adds	r1, r3, #2
    3d2e:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    3d32:	4422      	add	r2, r4
    3d34:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    for( i = 0; i < 8; i++ )
    3d38:	3301      	adds	r3, #1
    3d3a:	2b07      	cmp	r3, #7
    3d3c:	d9f4      	bls.n	3d28 <mbedtls_internal_sha256_process+0x104>

    return( 0 );
}
    3d3e:	2000      	movs	r0, #0
    3d40:	b048      	add	sp, #288	; 0x120
    3d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3d46:	bf00      	nop
    3d48:	000055e8 	.word	0x000055e8

00003d4c <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    3d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
    3d50:	b3da      	cbz	r2, 3dca <mbedtls_sha256_update_ret+0x7e>
    3d52:	4606      	mov	r6, r0
    3d54:	460d      	mov	r5, r1
    3d56:	4614      	mov	r4, r2
        return( 0 );

    left = ctx->total[0] & 0x3F;
    3d58:	6803      	ldr	r3, [r0, #0]
    3d5a:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;
    3d5e:	f1c7 0840 	rsb	r8, r7, #64	; 0x40

    ctx->total[0] += (uint32_t) ilen;
    3d62:	4413      	add	r3, r2
    3d64:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
    3d66:	4293      	cmp	r3, r2
    3d68:	d202      	bcs.n	3d70 <mbedtls_sha256_update_ret+0x24>
        ctx->total[1]++;
    3d6a:	6843      	ldr	r3, [r0, #4]
    3d6c:	3301      	adds	r3, #1
    3d6e:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
    3d70:	b10f      	cbz	r7, 3d76 <mbedtls_sha256_update_ret+0x2a>
    3d72:	4544      	cmp	r4, r8
    3d74:	d20a      	bcs.n	3d8c <mbedtls_sha256_update_ret+0x40>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
    3d76:	2c3f      	cmp	r4, #63	; 0x3f
    3d78:	d91b      	bls.n	3db2 <mbedtls_sha256_update_ret+0x66>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    3d7a:	4629      	mov	r1, r5
    3d7c:	4630      	mov	r0, r6
    3d7e:	f7ff ff51 	bl	3c24 <mbedtls_internal_sha256_process>
    3d82:	4603      	mov	r3, r0
    3d84:	bb10      	cbnz	r0, 3dcc <mbedtls_sha256_update_ret+0x80>
            return( ret );

        input += 64;
    3d86:	3540      	adds	r5, #64	; 0x40
        ilen  -= 64;
    3d88:	3c40      	subs	r4, #64	; 0x40
    3d8a:	e7f4      	b.n	3d76 <mbedtls_sha256_update_ret+0x2a>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    3d8c:	f106 0928 	add.w	r9, r6, #40	; 0x28
    3d90:	4642      	mov	r2, r8
    3d92:	4629      	mov	r1, r5
    3d94:	eb09 0007 	add.w	r0, r9, r7
    3d98:	f7fd ff31 	bl	1bfe <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    3d9c:	4649      	mov	r1, r9
    3d9e:	4630      	mov	r0, r6
    3da0:	f7ff ff40 	bl	3c24 <mbedtls_internal_sha256_process>
    3da4:	4603      	mov	r3, r0
    3da6:	b988      	cbnz	r0, 3dcc <mbedtls_sha256_update_ret+0x80>
        input += fill;
    3da8:	4445      	add	r5, r8
        ilen  -= fill;
    3daa:	eba4 0408 	sub.w	r4, r4, r8
        left = 0;
    3dae:	2700      	movs	r7, #0
    3db0:	e7e1      	b.n	3d76 <mbedtls_sha256_update_ret+0x2a>
    }

    if( ilen > 0 )
    3db2:	b90c      	cbnz	r4, 3db8 <mbedtls_sha256_update_ret+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    3db4:	2300      	movs	r3, #0
    3db6:	e009      	b.n	3dcc <mbedtls_sha256_update_ret+0x80>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    3db8:	f106 0028 	add.w	r0, r6, #40	; 0x28
    3dbc:	4622      	mov	r2, r4
    3dbe:	4629      	mov	r1, r5
    3dc0:	4438      	add	r0, r7
    3dc2:	f7fd ff1c 	bl	1bfe <memcpy>
    return( 0 );
    3dc6:	2300      	movs	r3, #0
    3dc8:	e000      	b.n	3dcc <mbedtls_sha256_update_ret+0x80>
        return( 0 );
    3dca:	2300      	movs	r3, #0
}
    3dcc:	4618      	mov	r0, r3
    3dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00003dd2 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
    3dd2:	b570      	push	{r4, r5, r6, lr}
    3dd4:	4604      	mov	r4, r0
    3dd6:	460d      	mov	r5, r1
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
    3dd8:	6803      	ldr	r3, [r0, #0]
    3dda:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
    3dde:	1c58      	adds	r0, r3, #1
    3de0:	4423      	add	r3, r4
    3de2:	2280      	movs	r2, #128	; 0x80
    3de4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( used <= 56 )
    3de8:	2838      	cmp	r0, #56	; 0x38
    3dea:	d87b      	bhi.n	3ee4 <mbedtls_sha256_finish_ret+0x112>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    3dec:	f104 0328 	add.w	r3, r4, #40	; 0x28
    3df0:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
    3df4:	2100      	movs	r1, #0
    3df6:	4418      	add	r0, r3
    3df8:	f7fd ff0e 	bl	1c18 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
    3dfc:	6822      	ldr	r2, [r4, #0]
         | ( ctx->total[1] <<  3 );
    3dfe:	6863      	ldr	r3, [r4, #4]
    3e00:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
    3e02:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    low  = ( ctx->total[0] <<  3 );
    3e06:	00d2      	lsls	r2, r2, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    3e08:	0e19      	lsrs	r1, r3, #24
    3e0a:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    3e0e:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3e12:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
    3e16:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3e1a:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    3e1e:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    3e22:	0e13      	lsrs	r3, r2, #24
    3e24:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    3e28:	f3c2 4307 	ubfx	r3, r2, #16, #8
    3e2c:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    3e30:	f3c2 2307 	ubfx	r3, r2, #8, #8
    3e34:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    3e38:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    3e3c:	f104 0128 	add.w	r1, r4, #40	; 0x28
    3e40:	4620      	mov	r0, r4
    3e42:	f7ff feef 	bl	3c24 <mbedtls_internal_sha256_process>
    3e46:	4603      	mov	r3, r0
    3e48:	2800      	cmp	r0, #0
    3e4a:	d159      	bne.n	3f00 <mbedtls_sha256_finish_ret+0x12e>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    3e4c:	7ae2      	ldrb	r2, [r4, #11]
    3e4e:	702a      	strb	r2, [r5, #0]
    3e50:	7aa2      	ldrb	r2, [r4, #10]
    3e52:	706a      	strb	r2, [r5, #1]
    3e54:	7a62      	ldrb	r2, [r4, #9]
    3e56:	70aa      	strb	r2, [r5, #2]
    3e58:	7a22      	ldrb	r2, [r4, #8]
    3e5a:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    3e5c:	7be2      	ldrb	r2, [r4, #15]
    3e5e:	712a      	strb	r2, [r5, #4]
    3e60:	7ba2      	ldrb	r2, [r4, #14]
    3e62:	716a      	strb	r2, [r5, #5]
    3e64:	7b62      	ldrb	r2, [r4, #13]
    3e66:	71aa      	strb	r2, [r5, #6]
    3e68:	7b22      	ldrb	r2, [r4, #12]
    3e6a:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    3e6c:	7ce2      	ldrb	r2, [r4, #19]
    3e6e:	722a      	strb	r2, [r5, #8]
    3e70:	7ca2      	ldrb	r2, [r4, #18]
    3e72:	726a      	strb	r2, [r5, #9]
    3e74:	7c62      	ldrb	r2, [r4, #17]
    3e76:	72aa      	strb	r2, [r5, #10]
    3e78:	7c22      	ldrb	r2, [r4, #16]
    3e7a:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    3e7c:	7de2      	ldrb	r2, [r4, #23]
    3e7e:	732a      	strb	r2, [r5, #12]
    3e80:	7da2      	ldrb	r2, [r4, #22]
    3e82:	736a      	strb	r2, [r5, #13]
    3e84:	7d62      	ldrb	r2, [r4, #21]
    3e86:	73aa      	strb	r2, [r5, #14]
    3e88:	7d22      	ldrb	r2, [r4, #20]
    3e8a:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    3e8c:	7ee2      	ldrb	r2, [r4, #27]
    3e8e:	742a      	strb	r2, [r5, #16]
    3e90:	7ea2      	ldrb	r2, [r4, #26]
    3e92:	746a      	strb	r2, [r5, #17]
    3e94:	7e62      	ldrb	r2, [r4, #25]
    3e96:	74aa      	strb	r2, [r5, #18]
    3e98:	7e22      	ldrb	r2, [r4, #24]
    3e9a:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    3e9c:	7fe2      	ldrb	r2, [r4, #31]
    3e9e:	752a      	strb	r2, [r5, #20]
    3ea0:	7fa2      	ldrb	r2, [r4, #30]
    3ea2:	756a      	strb	r2, [r5, #21]
    3ea4:	7f62      	ldrb	r2, [r4, #29]
    3ea6:	75aa      	strb	r2, [r5, #22]
    3ea8:	7f22      	ldrb	r2, [r4, #28]
    3eaa:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    3eac:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    3eb0:	762a      	strb	r2, [r5, #24]
    3eb2:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    3eb6:	766a      	strb	r2, [r5, #25]
    3eb8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    3ebc:	76aa      	strb	r2, [r5, #26]
    3ebe:	f894 2020 	ldrb.w	r2, [r4, #32]
    3ec2:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
    3ec4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    3ec6:	b9da      	cbnz	r2, 3f00 <mbedtls_sha256_finish_ret+0x12e>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    3ec8:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    3ecc:	772b      	strb	r3, [r5, #28]
    3ece:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    3ed2:	776b      	strb	r3, [r5, #29]
    3ed4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    3ed8:	77ab      	strb	r3, [r5, #30]
    3eda:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    3ede:	77eb      	strb	r3, [r5, #31]

    return( 0 );
    3ee0:	4613      	mov	r3, r2
    3ee2:	e00d      	b.n	3f00 <mbedtls_sha256_finish_ret+0x12e>
        memset( ctx->buffer + used, 0, 64 - used );
    3ee4:	f104 0628 	add.w	r6, r4, #40	; 0x28
    3ee8:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
    3eec:	2100      	movs	r1, #0
    3eee:	4430      	add	r0, r6
    3ef0:	f7fd fe92 	bl	1c18 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    3ef4:	4631      	mov	r1, r6
    3ef6:	4620      	mov	r0, r4
    3ef8:	f7ff fe94 	bl	3c24 <mbedtls_internal_sha256_process>
    3efc:	4603      	mov	r3, r0
    3efe:	b108      	cbz	r0, 3f04 <mbedtls_sha256_finish_ret+0x132>
}
    3f00:	4618      	mov	r0, r3
    3f02:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer, 0, 56 );
    3f04:	2238      	movs	r2, #56	; 0x38
    3f06:	2100      	movs	r1, #0
    3f08:	4630      	mov	r0, r6
    3f0a:	f7fd fe85 	bl	1c18 <memset>
    3f0e:	e775      	b.n	3dfc <mbedtls_sha256_finish_ret+0x2a>

00003f10 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
    3f10:	6843      	ldr	r3, [r0, #4]
    3f12:	428b      	cmp	r3, r1
    3f14:	d808      	bhi.n	3f28 <hal_flash_check_addr+0x18>
    3f16:	6882      	ldr	r2, [r0, #8]
    3f18:	4413      	add	r3, r2
    3f1a:	428b      	cmp	r3, r1
    3f1c:	d301      	bcc.n	3f22 <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
    3f1e:	2000      	movs	r0, #0
}
    3f20:	4770      	bx	lr
        return SYS_EINVAL;
    3f22:	f06f 0001 	mvn.w	r0, #1
    3f26:	4770      	bx	lr
    3f28:	f06f 0001 	mvn.w	r0, #1
    3f2c:	4770      	bx	lr

00003f2e <hal_flash_init>:
{
    3f2e:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
    3f30:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
    3f32:	462c      	mov	r4, r5
    3f34:	e001      	b.n	3f3a <hal_flash_init+0xc>
    3f36:	3401      	adds	r4, #1
    3f38:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
    3f3a:	4620      	mov	r0, r4
    3f3c:	f7fc fb8c 	bl	658 <hal_bsp_flash_dev>
        if (!hf) {
    3f40:	b138      	cbz	r0, 3f52 <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
    3f42:	6802      	ldr	r2, [r0, #0]
    3f44:	6952      	ldr	r2, [r2, #20]
    3f46:	4790      	blx	r2
    3f48:	2800      	cmp	r0, #0
    3f4a:	d0f4      	beq.n	3f36 <hal_flash_init+0x8>
            rc = SYS_EIO;
    3f4c:	f06f 0504 	mvn.w	r5, #4
    3f50:	e7f1      	b.n	3f36 <hal_flash_init+0x8>
}
    3f52:	4628      	mov	r0, r5
    3f54:	bd38      	pop	{r3, r4, r5, pc}

00003f56 <hal_flash_align>:
{
    3f56:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    3f58:	f7fc fb7e 	bl	658 <hal_bsp_flash_dev>
    if (!hf) {
    3f5c:	b108      	cbz	r0, 3f62 <hal_flash_align+0xc>
    return hf->hf_align;
    3f5e:	7c00      	ldrb	r0, [r0, #16]
}
    3f60:	bd08      	pop	{r3, pc}
        return 1;
    3f62:	2001      	movs	r0, #1
    3f64:	e7fc      	b.n	3f60 <hal_flash_align+0xa>

00003f66 <hal_flash_erased_val>:
{
    3f66:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    3f68:	f7fc fb76 	bl	658 <hal_bsp_flash_dev>
    if (!hf) {
    3f6c:	b108      	cbz	r0, 3f72 <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
    3f6e:	7d00      	ldrb	r0, [r0, #20]
}
    3f70:	bd08      	pop	{r3, pc}
        return 1;
    3f72:	2001      	movs	r0, #1
    3f74:	e7fc      	b.n	3f70 <hal_flash_erased_val+0xa>

00003f76 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
    3f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f7a:	460d      	mov	r5, r1
    3f7c:	4690      	mov	r8, r2
    3f7e:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    3f80:	f7fc fb6a 	bl	658 <hal_bsp_flash_dev>
    if (!hf) {
    3f84:	b1c0      	cbz	r0, 3fb8 <hal_flash_read+0x42>
    3f86:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    3f88:	4629      	mov	r1, r5
    3f8a:	f7ff ffc1 	bl	3f10 <hal_flash_check_addr>
    3f8e:	b9b0      	cbnz	r0, 3fbe <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
    3f90:	19a9      	adds	r1, r5, r6
    3f92:	4620      	mov	r0, r4
    3f94:	f7ff ffbc 	bl	3f10 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    3f98:	b9a0      	cbnz	r0, 3fc4 <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    3f9a:	6823      	ldr	r3, [r4, #0]
    3f9c:	681f      	ldr	r7, [r3, #0]
    3f9e:	4633      	mov	r3, r6
    3fa0:	4642      	mov	r2, r8
    3fa2:	4629      	mov	r1, r5
    3fa4:	4620      	mov	r0, r4
    3fa6:	47b8      	blx	r7
    if (rc != 0) {
    3fa8:	4603      	mov	r3, r0
    3faa:	b910      	cbnz	r0, 3fb2 <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
    3fac:	4618      	mov	r0, r3
    3fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
    3fb2:	f06f 0304 	mvn.w	r3, #4
    3fb6:	e7f9      	b.n	3fac <hal_flash_read+0x36>
        return SYS_EINVAL;
    3fb8:	f06f 0301 	mvn.w	r3, #1
    3fbc:	e7f6      	b.n	3fac <hal_flash_read+0x36>
        return SYS_EINVAL;
    3fbe:	f06f 0301 	mvn.w	r3, #1
    3fc2:	e7f3      	b.n	3fac <hal_flash_read+0x36>
    3fc4:	f06f 0301 	mvn.w	r3, #1
    3fc8:	e7f0      	b.n	3fac <hal_flash_read+0x36>
	...

00003fcc <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
    3fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3fd0:	4605      	mov	r5, r0
    3fd2:	460e      	mov	r6, r1
    3fd4:	4690      	mov	r8, r2
    3fd6:	461f      	mov	r7, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    3fd8:	f7fc fb3e 	bl	658 <hal_bsp_flash_dev>
    if (!hf) {
    3fdc:	b310      	cbz	r0, 4024 <hal_flash_write+0x58>
    3fde:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    3fe0:	4631      	mov	r1, r6
    3fe2:	f7ff ff95 	bl	3f10 <hal_flash_check_addr>
    3fe6:	bb00      	cbnz	r0, 402a <hal_flash_write+0x5e>
      hal_flash_check_addr(hf, address + num_bytes)) {
    3fe8:	19f1      	adds	r1, r6, r7
    3fea:	4620      	mov	r0, r4
    3fec:	f7ff ff90 	bl	3f10 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    3ff0:	b9f0      	cbnz	r0, 4030 <hal_flash_write+0x64>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    3ff2:	08eb      	lsrs	r3, r5, #3
    3ff4:	4a11      	ldr	r2, [pc, #68]	; (403c <hal_flash_write+0x70>)
    3ff6:	5cd3      	ldrb	r3, [r2, r3]
    3ff8:	f005 0507 	and.w	r5, r5, #7
    3ffc:	fa43 f505 	asr.w	r5, r3, r5
    4000:	f015 0f01 	tst.w	r5, #1
    4004:	d117      	bne.n	4036 <hal_flash_write+0x6a>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
    4006:	6823      	ldr	r3, [r4, #0]
    4008:	685d      	ldr	r5, [r3, #4]
    400a:	463b      	mov	r3, r7
    400c:	4642      	mov	r2, r8
    400e:	4631      	mov	r1, r6
    4010:	4620      	mov	r0, r4
    4012:	47a8      	blx	r5
    if (rc != 0) {
    4014:	4603      	mov	r3, r0
    4016:	b910      	cbnz	r0, 401e <hal_flash_write+0x52>
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
    4018:	4618      	mov	r0, r3
    401a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
    401e:	f06f 0304 	mvn.w	r3, #4
    4022:	e7f9      	b.n	4018 <hal_flash_write+0x4c>
        return SYS_EINVAL;
    4024:	f06f 0301 	mvn.w	r3, #1
    4028:	e7f6      	b.n	4018 <hal_flash_write+0x4c>
        return SYS_EINVAL;
    402a:	f06f 0301 	mvn.w	r3, #1
    402e:	e7f3      	b.n	4018 <hal_flash_write+0x4c>
    4030:	f06f 0301 	mvn.w	r3, #1
    4034:	e7f0      	b.n	4018 <hal_flash_write+0x4c>
        return SYS_EACCES;
    4036:	f06f 0306 	mvn.w	r3, #6
    403a:	e7ed      	b.n	4018 <hal_flash_write+0x4c>
    403c:	20006320 	.word	0x20006320

00004040 <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
    4040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4044:	b083      	sub	sp, #12
    4046:	4605      	mov	r5, r0
    4048:	460e      	mov	r6, r1
    404a:	4690      	mov	r8, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
    404c:	f7fc fb04 	bl	658 <hal_bsp_flash_dev>
    if (!hf) {
    4050:	2800      	cmp	r0, #0
    4052:	d04b      	beq.n	40ec <hal_flash_erase+0xac>
    4054:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    4056:	4631      	mov	r1, r6
    4058:	f7ff ff5a 	bl	3f10 <hal_flash_check_addr>
    405c:	2800      	cmp	r0, #0
    405e:	d148      	bne.n	40f2 <hal_flash_erase+0xb2>
      hal_flash_check_addr(hf, address + num_bytes)) {
    4060:	eb06 0708 	add.w	r7, r6, r8
    4064:	4639      	mov	r1, r7
    4066:	4620      	mov	r0, r4
    4068:	f7ff ff52 	bl	3f10 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    406c:	2800      	cmp	r0, #0
    406e:	d143      	bne.n	40f8 <hal_flash_erase+0xb8>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    4070:	08eb      	lsrs	r3, r5, #3
    4072:	4a26      	ldr	r2, [pc, #152]	; (410c <hal_flash_erase+0xcc>)
    4074:	5cd3      	ldrb	r3, [r2, r3]
    4076:	f005 0507 	and.w	r5, r5, #7
    407a:	fa43 f505 	asr.w	r5, r3, r5
    407e:	f015 0501 	ands.w	r5, r5, #1
    4082:	d13c      	bne.n	40fe <hal_flash_erase+0xbe>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
    4084:	42b7      	cmp	r7, r6
    4086:	d93d      	bls.n	4104 <hal_flash_erase+0xc4>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
    4088:	6823      	ldr	r3, [r4, #0]
    408a:	699b      	ldr	r3, [r3, #24]
    408c:	b363      	cbz	r3, 40e8 <hal_flash_erase+0xa8>
        hf->hf_itf->hff_erase(hf, address, num_bytes);
    408e:	4642      	mov	r2, r8
    4090:	4631      	mov	r1, r6
    4092:	4620      	mov	r0, r4
    4094:	4798      	blx	r3
#endif
            }
        }
    }
    return 0;
}
    4096:	4628      	mov	r0, r5
    4098:	b003      	add	sp, #12
    409a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            assert(rc == 0);
    409e:	2300      	movs	r3, #0
    40a0:	461a      	mov	r2, r3
    40a2:	4619      	mov	r1, r3
    40a4:	4618      	mov	r0, r3
    40a6:	f7fd fb31 	bl	170c <__assert_func>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    40aa:	f108 0801 	add.w	r8, r8, #1
    40ae:	68e3      	ldr	r3, [r4, #12]
    40b0:	4543      	cmp	r3, r8
    40b2:	ddf0      	ble.n	4096 <hal_flash_erase+0x56>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    40b4:	6823      	ldr	r3, [r4, #0]
    40b6:	f8d3 900c 	ldr.w	r9, [r3, #12]
    40ba:	466b      	mov	r3, sp
    40bc:	aa01      	add	r2, sp, #4
    40be:	4641      	mov	r1, r8
    40c0:	4620      	mov	r0, r4
    40c2:	47c8      	blx	r9
            assert(rc == 0);
    40c4:	2800      	cmp	r0, #0
    40c6:	d1ea      	bne.n	409e <hal_flash_erase+0x5e>
            end_area = start + size;
    40c8:	9901      	ldr	r1, [sp, #4]
    40ca:	9b00      	ldr	r3, [sp, #0]
    40cc:	440b      	add	r3, r1
            if (address < end_area && end > start) {
    40ce:	429e      	cmp	r6, r3
    40d0:	d2eb      	bcs.n	40aa <hal_flash_erase+0x6a>
    40d2:	428f      	cmp	r7, r1
    40d4:	d9e9      	bls.n	40aa <hal_flash_erase+0x6a>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
    40d6:	6823      	ldr	r3, [r4, #0]
    40d8:	689b      	ldr	r3, [r3, #8]
    40da:	4620      	mov	r0, r4
    40dc:	4798      	blx	r3
    40de:	2800      	cmp	r0, #0
    40e0:	d0e3      	beq.n	40aa <hal_flash_erase+0x6a>
                    return SYS_EIO;
    40e2:	f06f 0504 	mvn.w	r5, #4
    40e6:	e7d6      	b.n	4096 <hal_flash_erase+0x56>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    40e8:	46a8      	mov	r8, r5
    40ea:	e7e0      	b.n	40ae <hal_flash_erase+0x6e>
        return SYS_EINVAL;
    40ec:	f06f 0501 	mvn.w	r5, #1
    40f0:	e7d1      	b.n	4096 <hal_flash_erase+0x56>
        return SYS_EINVAL;
    40f2:	f06f 0501 	mvn.w	r5, #1
    40f6:	e7ce      	b.n	4096 <hal_flash_erase+0x56>
    40f8:	f06f 0501 	mvn.w	r5, #1
    40fc:	e7cb      	b.n	4096 <hal_flash_erase+0x56>
        return SYS_EACCES;
    40fe:	f06f 0506 	mvn.w	r5, #6
    4102:	e7c8      	b.n	4096 <hal_flash_erase+0x56>
        return SYS_EINVAL;
    4104:	f06f 0501 	mvn.w	r5, #1
    4108:	e7c5      	b.n	4096 <hal_flash_erase+0x56>
    410a:	bf00      	nop
    410c:	20006320 	.word	0x20006320

00004110 <hal_flash_is_erased>:

int
hal_flash_is_erased(const struct hal_flash *hf, uint32_t address, void *dst,
        uint32_t num_bytes)
{
    4110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4112:	4604      	mov	r4, r0
    4114:	4616      	mov	r6, r2
    4116:	461d      	mov	r5, r3
    uint8_t *buf;
    int rc;

    buf = dst;

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    4118:	6807      	ldr	r7, [r0, #0]
    411a:	683f      	ldr	r7, [r7, #0]
    411c:	47b8      	blx	r7
    if (rc != 0) {
    411e:	b960      	cbnz	r0, 413a <hal_flash_is_erased+0x2a>
    4120:	4607      	mov	r7, r0
        return SYS_EIO;
    }

    for (i = 0; i < num_bytes; i++) {
    4122:	2300      	movs	r3, #0
    4124:	42ab      	cmp	r3, r5
    4126:	d205      	bcs.n	4134 <hal_flash_is_erased+0x24>
        if (buf[i] != hf->hf_erased_val) {
    4128:	5cf1      	ldrb	r1, [r6, r3]
    412a:	7d22      	ldrb	r2, [r4, #20]
    412c:	4291      	cmp	r1, r2
    412e:	d102      	bne.n	4136 <hal_flash_is_erased+0x26>
    for (i = 0; i < num_bytes; i++) {
    4130:	3301      	adds	r3, #1
    4132:	e7f7      	b.n	4124 <hal_flash_is_erased+0x14>
            return 0;
        }
    }
    return 1;
    4134:	2701      	movs	r7, #1
}
    4136:	4638      	mov	r0, r7
    4138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SYS_EIO;
    413a:	f06f 0704 	mvn.w	r7, #4
    413e:	e7fa      	b.n	4136 <hal_flash_is_erased+0x26>

00004140 <hal_flash_isempty>:

int
hal_flash_isempty(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
    4140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4144:	460d      	mov	r5, r1
    4146:	4690      	mov	r8, r2
    4148:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    414a:	f7fc fa85 	bl	658 <hal_bsp_flash_dev>
    if (!hf) {
    414e:	b1f8      	cbz	r0, 4190 <hal_flash_isempty+0x50>
    4150:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    4152:	4629      	mov	r1, r5
    4154:	f7ff fedc 	bl	3f10 <hal_flash_check_addr>
    4158:	b9e8      	cbnz	r0, 4196 <hal_flash_isempty+0x56>
      hal_flash_check_addr(hf, address + num_bytes)) {
    415a:	19a9      	adds	r1, r5, r6
    415c:	4620      	mov	r0, r4
    415e:	f7ff fed7 	bl	3f10 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    4162:	b9d8      	cbnz	r0, 419c <hal_flash_isempty+0x5c>
        return SYS_EINVAL;
    }
    if (hf->hf_itf->hff_is_empty) {
    4164:	6823      	ldr	r3, [r4, #0]
    4166:	691f      	ldr	r7, [r3, #16]
    4168:	b15f      	cbz	r7, 4182 <hal_flash_isempty+0x42>
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
    416a:	4633      	mov	r3, r6
    416c:	4642      	mov	r2, r8
    416e:	4629      	mov	r1, r5
    4170:	4620      	mov	r0, r4
    4172:	47b8      	blx	r7
        if (rc < 0) {
    4174:	2800      	cmp	r0, #0
    4176:	db01      	blt.n	417c <hal_flash_isempty+0x3c>
            return rc;
        }
    } else {
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    }
}
    4178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return SYS_EIO;
    417c:	f06f 0004 	mvn.w	r0, #4
    4180:	e7fa      	b.n	4178 <hal_flash_isempty+0x38>
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    4182:	4633      	mov	r3, r6
    4184:	4642      	mov	r2, r8
    4186:	4629      	mov	r1, r5
    4188:	4620      	mov	r0, r4
    418a:	f7ff ffc1 	bl	4110 <hal_flash_is_erased>
    418e:	e7f3      	b.n	4178 <hal_flash_isempty+0x38>
        return SYS_EINVAL;
    4190:	f06f 0001 	mvn.w	r0, #1
    4194:	e7f0      	b.n	4178 <hal_flash_isempty+0x38>
        return SYS_EINVAL;
    4196:	f06f 0001 	mvn.w	r0, #1
    419a:	e7ed      	b.n	4178 <hal_flash_isempty+0x38>
    419c:	f06f 0001 	mvn.w	r0, #1
    41a0:	e7ea      	b.n	4178 <hal_flash_isempty+0x38>

000041a2 <hal_system_start>:
                  //// /* 1st word is stack pointer */ ////TODO
                  //// "    msr  psp, %0       \n" ////TODO
                  /* 2nd word is a reset handler (image entry) */
                  "    bx   %1            \n"
                  : /* no output */
                  : "r" (img_data[0]), "r" (img_data[1]));
    41a2:	6803      	ldr	r3, [r0, #0]
    41a4:	6842      	ldr	r2, [r0, #4]
    asm volatile (".syntax unified        \n"
    41a6:	f383 8808 	msr	MSP, r3
    41aa:	4710      	bx	r2

000041ac <fwrite>:
    if (stream->vmt->read == NULL) return 0;
    return stream->vmt->read(stream, (char*)buf, size*nmemb) / size;
}

__extern_inline size_t fwrite(const void *buf, size_t size, size_t nmemb, FILE *stream)
{
    41ac:	b538      	push	{r3, r4, r5, lr}
    if (stream->vmt->write == NULL) return 0;
    41ae:	681c      	ldr	r4, [r3, #0]
    41b0:	6825      	ldr	r5, [r4, #0]
    41b2:	b145      	cbz	r5, 41c6 <fwrite+0x1a>
    41b4:	460c      	mov	r4, r1
    41b6:	4601      	mov	r1, r0
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
    41b8:	fb02 f204 	mul.w	r2, r2, r4
    41bc:	4618      	mov	r0, r3
    41be:	47a8      	blx	r5
    41c0:	fbb0 f0f4 	udiv	r0, r0, r4
}
    41c4:	bd38      	pop	{r3, r4, r5, pc}
    if (stream->vmt->write == NULL) return 0;
    41c6:	2000      	movs	r0, #0
    41c8:	e7fc      	b.n	41c4 <fwrite+0x18>
	...

000041cc <puts>:
{
	return fwrite(s, 1, strlen(s), f);
}

__extern_inline int puts(const char *s)
{
    41cc:	b538      	push	{r3, r4, r5, lr}
    41ce:	4605      	mov	r5, r0
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
    41d0:	f000 f820 	bl	4214 <strlen>
    41d4:	4b08      	ldr	r3, [pc, #32]	; (41f8 <puts+0x2c>)
    41d6:	681c      	ldr	r4, [r3, #0]
    41d8:	4623      	mov	r3, r4
    41da:	4602      	mov	r2, r0
    41dc:	2101      	movs	r1, #1
    41de:	4628      	mov	r0, r5
    41e0:	f7ff ffe4 	bl	41ac <fwrite>
    41e4:	4605      	mov	r5, r0
    41e6:	4623      	mov	r3, r4
    41e8:	2201      	movs	r2, #1
    41ea:	4611      	mov	r1, r2
    41ec:	4803      	ldr	r0, [pc, #12]	; (41fc <puts+0x30>)
    41ee:	f7ff ffdd 	bl	41ac <fwrite>
}
    41f2:	4428      	add	r0, r5
    41f4:	bd38      	pop	{r3, r4, r5, pc}
    41f6:	bf00      	nop
    41f8:	000056e8 	.word	0x000056e8
    41fc:	000053f4 	.word	0x000053f4

00004200 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
    4200:	2000      	movs	r0, #0
    4202:	4770      	bx	lr

00004204 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
    4204:	b510      	push	{r4, lr}
    4206:	4608      	mov	r0, r1
    4208:	4614      	mov	r4, r2
    console_write(bp, n);
    420a:	4611      	mov	r1, r2
    420c:	f7fd ffda 	bl	21c4 <console_write>
    return n;
}
    4210:	4620      	mov	r0, r4
    4212:	bd10      	pop	{r4, pc}

00004214 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
    4214:	4603      	mov	r3, r0
	while (*ss)
    4216:	e000      	b.n	421a <strlen+0x6>
		ss++;
    4218:	3301      	adds	r3, #1
	while (*ss)
    421a:	781a      	ldrb	r2, [r3, #0]
    421c:	2a00      	cmp	r2, #0
    421e:	d1fb      	bne.n	4218 <strlen+0x4>
	return ss - s;
}
    4220:	1a18      	subs	r0, r3, r0
    4222:	4770      	bx	lr

00004224 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
    4224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4228:	b082      	sub	sp, #8
    422a:	e9cd 0100 	strd	r0, r1, [sp]
    422e:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
    4230:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
    4234:	2401      	movs	r4, #1
    4236:	2500      	movs	r5, #0
    while (num / d >= p->base)
    4238:	e004      	b.n	4244 <ui2a+0x20>
        d *= p->base;
    423a:	fb06 f305 	mul.w	r3, r6, r5
    423e:	fba4 4506 	umull	r4, r5, r4, r6
    4242:	441d      	add	r5, r3
    while (num / d >= p->base)
    4244:	4622      	mov	r2, r4
    4246:	462b      	mov	r3, r5
    4248:	e9dd 0100 	ldrd	r0, r1, [sp]
    424c:	f000 fd12 	bl	4c74 <__aeabi_uldivmod>
    4250:	f899 6003 	ldrb.w	r6, [r9, #3]
    4254:	2700      	movs	r7, #0
    4256:	42b9      	cmp	r1, r7
    4258:	bf08      	it	eq
    425a:	42b0      	cmpeq	r0, r6
    425c:	d2ed      	bcs.n	423a <ui2a+0x16>
    int n = 0;
    425e:	f04f 0a00 	mov.w	sl, #0
    4262:	e007      	b.n	4274 <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    4264:	2330      	movs	r3, #48	; 0x30
    4266:	441e      	add	r6, r3
    4268:	f888 6000 	strb.w	r6, [r8]
            ++n;
    426c:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    4270:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
    4274:	ea54 0305 	orrs.w	r3, r4, r5
    4278:	d02e      	beq.n	42d8 <ui2a+0xb4>
        unsigned long long  dgt = num / d;
    427a:	4622      	mov	r2, r4
    427c:	462b      	mov	r3, r5
    427e:	e9dd 0100 	ldrd	r0, r1, [sp]
    4282:	f000 fcf7 	bl	4c74 <__aeabi_uldivmod>
    4286:	4606      	mov	r6, r0
    4288:	460f      	mov	r7, r1
        num %= d;
    428a:	4622      	mov	r2, r4
    428c:	462b      	mov	r3, r5
    428e:	e9dd 0100 	ldrd	r0, r1, [sp]
    4292:	f000 fcef 	bl	4c74 <__aeabi_uldivmod>
    4296:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
    429a:	f899 2003 	ldrb.w	r2, [r9, #3]
    429e:	2300      	movs	r3, #0
    42a0:	4620      	mov	r0, r4
    42a2:	4629      	mov	r1, r5
    42a4:	f000 fce6 	bl	4c74 <__aeabi_uldivmod>
    42a8:	4604      	mov	r4, r0
    42aa:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
    42ac:	f1ba 0f00 	cmp.w	sl, #0
    42b0:	d105      	bne.n	42be <ui2a+0x9a>
    42b2:	ea56 0307 	orrs.w	r3, r6, r7
    42b6:	d102      	bne.n	42be <ui2a+0x9a>
    42b8:	ea54 0305 	orrs.w	r3, r4, r5
    42bc:	d1da      	bne.n	4274 <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    42be:	2f00      	cmp	r7, #0
    42c0:	bf08      	it	eq
    42c2:	2e0a      	cmpeq	r6, #10
    42c4:	d3ce      	bcc.n	4264 <ui2a+0x40>
    42c6:	f899 3002 	ldrb.w	r3, [r9, #2]
    42ca:	f013 0f04 	tst.w	r3, #4
    42ce:	d001      	beq.n	42d4 <ui2a+0xb0>
    42d0:	2337      	movs	r3, #55	; 0x37
    42d2:	e7c8      	b.n	4266 <ui2a+0x42>
    42d4:	2357      	movs	r3, #87	; 0x57
    42d6:	e7c6      	b.n	4266 <ui2a+0x42>
        }
    }
    *bf = 0;
    42d8:	2300      	movs	r3, #0
    42da:	f888 3000 	strb.w	r3, [r8]
}
    42de:	b002      	add	sp, #8
    42e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000042e4 <i2a>:

static void i2a(long long int num, struct param *p)
{
    42e4:	b508      	push	{r3, lr}
    if (num < 0) {
    42e6:	2800      	cmp	r0, #0
    42e8:	f171 0300 	sbcs.w	r3, r1, #0
    42ec:	db02      	blt.n	42f4 <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
    42ee:	f7ff ff99 	bl	4224 <ui2a>
}
    42f2:	bd08      	pop	{r3, pc}
        num = -num;
    42f4:	4240      	negs	r0, r0
    42f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
    42fa:	7893      	ldrb	r3, [r2, #2]
    42fc:	f043 0301 	orr.w	r3, r3, #1
    4300:	7093      	strb	r3, [r2, #2]
    4302:	e7f4      	b.n	42ee <i2a+0xa>

00004304 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
    4304:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    4308:	b2db      	uxtb	r3, r3
    430a:	2b09      	cmp	r3, #9
    430c:	d90b      	bls.n	4326 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
    430e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    4312:	b2db      	uxtb	r3, r3
    4314:	2b05      	cmp	r3, #5
    4316:	d908      	bls.n	432a <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
    4318:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    431c:	b2db      	uxtb	r3, r3
    431e:	2b05      	cmp	r3, #5
    4320:	d805      	bhi.n	432e <a2d+0x2a>
        return ch - 'A' + 10;
    4322:	3837      	subs	r0, #55	; 0x37
    4324:	4770      	bx	lr
        return ch - '0';
    4326:	3830      	subs	r0, #48	; 0x30
    4328:	4770      	bx	lr
        return ch - 'a' + 10;
    432a:	3857      	subs	r0, #87	; 0x57
    432c:	4770      	bx	lr
    else
        return -1;
    432e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4332:	4770      	bx	lr

00004334 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
    4334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4338:	4605      	mov	r5, r0
    433a:	4688      	mov	r8, r1
    433c:	4617      	mov	r7, r2
    433e:	4699      	mov	r9, r3
    const char *p = *src;
    4340:	680c      	ldr	r4, [r1, #0]
    int num = 0;
    4342:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
    4344:	4628      	mov	r0, r5
    4346:	f7ff ffdd 	bl	4304 <a2d>
    434a:	2800      	cmp	r0, #0
    434c:	db06      	blt.n	435c <a2i+0x28>
        if (digit > base)
    434e:	42b8      	cmp	r0, r7
    4350:	dc04      	bgt.n	435c <a2i+0x28>
            break;
        num = num * base + digit;
    4352:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
    4356:	7825      	ldrb	r5, [r4, #0]
    4358:	3401      	adds	r4, #1
    435a:	e7f3      	b.n	4344 <a2i+0x10>
    }
    *src = p;
    435c:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
    4360:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
    4364:	4628      	mov	r0, r5
    4366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000436a <putf>:

static int putf(FILE *putp, char c)
{
    436a:	b500      	push	{lr}
    436c:	b083      	sub	sp, #12

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
    436e:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
    4372:	6803      	ldr	r3, [r0, #0]
    4374:	681b      	ldr	r3, [r3, #0]
    4376:	b14b      	cbz	r3, 438c <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
    4378:	2201      	movs	r2, #1
    437a:	f10d 0107 	add.w	r1, sp, #7
    437e:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
    4380:	2801      	cmp	r0, #1
    4382:	d005      	beq.n	4390 <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
    4384:	2000      	movs	r0, #0
    else
        return 1;
}
    4386:	b003      	add	sp, #12
    4388:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
    438c:	2000      	movs	r0, #0
    438e:	e7fa      	b.n	4386 <putf+0x1c>
        return 1;
    4390:	2001      	movs	r0, #1
    4392:	e7f8      	b.n	4386 <putf+0x1c>

00004394 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
    4394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4398:	4606      	mov	r6, r0
    439a:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
    439c:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
    439e:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
    43a0:	e001      	b.n	43a6 <putchw+0x12>
        n--;
    43a2:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
    43a4:	4613      	mov	r3, r2
    43a6:	1c5a      	adds	r2, r3, #1
    43a8:	781b      	ldrb	r3, [r3, #0]
    43aa:	b10b      	cbz	r3, 43b0 <putchw+0x1c>
    43ac:	2c00      	cmp	r4, #0
    43ae:	dcf8      	bgt.n	43a2 <putchw+0xe>
    if (p->sign)
    43b0:	78bb      	ldrb	r3, [r7, #2]
    43b2:	f013 0f01 	tst.w	r3, #1
    43b6:	d000      	beq.n	43ba <putchw+0x26>
        n--;
    43b8:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
    43ba:	887b      	ldrh	r3, [r7, #2]
    43bc:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
    43c0:	b29b      	uxth	r3, r3
    43c2:	f241 0202 	movw	r2, #4098	; 0x1002
    43c6:	4293      	cmp	r3, r2
    43c8:	d01c      	beq.n	4404 <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
    43ca:	f640 0202 	movw	r2, #2050	; 0x802
    43ce:	4293      	cmp	r3, r2
    43d0:	d01a      	beq.n	4408 <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
    43d2:	683b      	ldr	r3, [r7, #0]
    43d4:	4d35      	ldr	r5, [pc, #212]	; (44ac <putchw+0x118>)
    43d6:	401d      	ands	r5, r3
    43d8:	b1f5      	cbz	r5, 4418 <putchw+0x84>
    unsigned written = 0;
    43da:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
    43dc:	78bb      	ldrb	r3, [r7, #2]
    43de:	f013 0f01 	tst.w	r3, #1
    43e2:	d11f      	bne.n	4424 <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
    43e4:	887b      	ldrh	r3, [r7, #2]
    43e6:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
    43ea:	b29b      	uxth	r3, r3
    43ec:	f241 0202 	movw	r2, #4098	; 0x1002
    43f0:	4293      	cmp	r3, r2
    43f2:	d01d      	beq.n	4430 <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
    43f4:	f640 0202 	movw	r2, #2050	; 0x802
    43f8:	4293      	cmp	r3, r2
    43fa:	d02a      	beq.n	4452 <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
    43fc:	787b      	ldrb	r3, [r7, #1]
    43fe:	bba3      	cbnz	r3, 446a <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
    4400:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
    4402:	e03d      	b.n	4480 <putchw+0xec>
        n -= 2;
    4404:	3c02      	subs	r4, #2
    4406:	e7e4      	b.n	43d2 <putchw+0x3e>
        n--;
    4408:	3c01      	subs	r4, #1
    440a:	e7e2      	b.n	43d2 <putchw+0x3e>
            written += putf(putp, ' ');
    440c:	2120      	movs	r1, #32
    440e:	4630      	mov	r0, r6
    4410:	f7ff ffab 	bl	436a <putf>
    4414:	4405      	add	r5, r0
        while (n-- > 0)
    4416:	4644      	mov	r4, r8
    4418:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
    441c:	2c00      	cmp	r4, #0
    441e:	dcf5      	bgt.n	440c <putchw+0x78>
    4420:	4644      	mov	r4, r8
    4422:	e7db      	b.n	43dc <putchw+0x48>
        written += putf(putp, '-');
    4424:	212d      	movs	r1, #45	; 0x2d
    4426:	4630      	mov	r0, r6
    4428:	f7ff ff9f 	bl	436a <putf>
    442c:	4405      	add	r5, r0
    442e:	e7d9      	b.n	43e4 <putchw+0x50>
        written += putf(putp, '0');
    4430:	2130      	movs	r1, #48	; 0x30
    4432:	4630      	mov	r0, r6
    4434:	f7ff ff99 	bl	436a <putf>
    4438:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
    443a:	78bb      	ldrb	r3, [r7, #2]
    443c:	f013 0f04 	tst.w	r3, #4
    4440:	d005      	beq.n	444e <putchw+0xba>
    4442:	2158      	movs	r1, #88	; 0x58
    4444:	4630      	mov	r0, r6
    4446:	f7ff ff90 	bl	436a <putf>
    444a:	4405      	add	r5, r0
    444c:	e7d6      	b.n	43fc <putchw+0x68>
    444e:	2178      	movs	r1, #120	; 0x78
    4450:	e7f8      	b.n	4444 <putchw+0xb0>
        written += putf(putp, '0');
    4452:	2130      	movs	r1, #48	; 0x30
    4454:	4630      	mov	r0, r6
    4456:	f7ff ff88 	bl	436a <putf>
    445a:	4405      	add	r5, r0
    445c:	e7ce      	b.n	43fc <putchw+0x68>
            written += putf(putp, '0');
    445e:	2130      	movs	r1, #48	; 0x30
    4460:	4630      	mov	r0, r6
    4462:	f7ff ff82 	bl	436a <putf>
    4466:	4405      	add	r5, r0
        while (n-- > 0)
    4468:	4644      	mov	r4, r8
    446a:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
    446e:	2c00      	cmp	r4, #0
    4470:	dcf5      	bgt.n	445e <putchw+0xca>
    4472:	4644      	mov	r4, r8
    4474:	e7c4      	b.n	4400 <putchw+0x6c>
        written += putf(putp, ch);
    4476:	4630      	mov	r0, r6
    4478:	f7ff ff77 	bl	436a <putf>
    447c:	4405      	add	r5, r0
    while ((ch = *bf++))
    447e:	4643      	mov	r3, r8
    4480:	f103 0801 	add.w	r8, r3, #1
    4484:	7819      	ldrb	r1, [r3, #0]
    4486:	2900      	cmp	r1, #0
    4488:	d1f5      	bne.n	4476 <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
    448a:	78bb      	ldrb	r3, [r7, #2]
    448c:	f013 0f08 	tst.w	r3, #8
    4490:	d106      	bne.n	44a0 <putchw+0x10c>
    4492:	e008      	b.n	44a6 <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
    4494:	2120      	movs	r1, #32
    4496:	4630      	mov	r0, r6
    4498:	f7ff ff67 	bl	436a <putf>
    449c:	4405      	add	r5, r0
        while (n-- > 0)
    449e:	463c      	mov	r4, r7
    44a0:	1e67      	subs	r7, r4, #1
    44a2:	2c00      	cmp	r4, #0
    44a4:	dcf6      	bgt.n	4494 <putchw+0x100>
    }
    
    return written;
}
    44a6:	4628      	mov	r0, r5
    44a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    44ac:	0008ff00 	.word	0x0008ff00

000044b0 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
    44b0:	b160      	cbz	r0, 44cc <intarg+0x1c>
    44b2:	2801      	cmp	r0, #1
    44b4:	d017      	beq.n	44e6 <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
    44b6:	bb19      	cbnz	r1, 4500 <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
    44b8:	6813      	ldr	r3, [r2, #0]
    44ba:	3307      	adds	r3, #7
    44bc:	f023 0307 	bic.w	r3, r3, #7
    44c0:	f103 0108 	add.w	r1, r3, #8
    44c4:	6011      	str	r1, [r2, #0]
    44c6:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
    44ca:	4770      	bx	lr
        if (sign) {
    44cc:	b129      	cbz	r1, 44da <intarg+0x2a>
            val = va_arg(*va, int);
    44ce:	6813      	ldr	r3, [r2, #0]
    44d0:	1d19      	adds	r1, r3, #4
    44d2:	6011      	str	r1, [r2, #0]
    44d4:	6818      	ldr	r0, [r3, #0]
    44d6:	17c1      	asrs	r1, r0, #31
    44d8:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
    44da:	6813      	ldr	r3, [r2, #0]
    44dc:	1d19      	adds	r1, r3, #4
    44de:	6011      	str	r1, [r2, #0]
    44e0:	6818      	ldr	r0, [r3, #0]
    44e2:	2100      	movs	r1, #0
    44e4:	4770      	bx	lr
        if (sign) {
    44e6:	b129      	cbz	r1, 44f4 <intarg+0x44>
            val = va_arg(*va, long);
    44e8:	6813      	ldr	r3, [r2, #0]
    44ea:	1d19      	adds	r1, r3, #4
    44ec:	6011      	str	r1, [r2, #0]
    44ee:	6818      	ldr	r0, [r3, #0]
    44f0:	17c1      	asrs	r1, r0, #31
    44f2:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
    44f4:	6813      	ldr	r3, [r2, #0]
    44f6:	1d19      	adds	r1, r3, #4
    44f8:	6011      	str	r1, [r2, #0]
    44fa:	6818      	ldr	r0, [r3, #0]
    44fc:	2100      	movs	r1, #0
    44fe:	4770      	bx	lr
            val = va_arg(*va, long long);
    4500:	6813      	ldr	r3, [r2, #0]
    4502:	3307      	adds	r3, #7
    4504:	f023 0307 	bic.w	r3, r3, #7
    4508:	f103 0108 	add.w	r1, r3, #8
    450c:	6011      	str	r1, [r2, #0]
    450e:	e9d3 0100 	ldrd	r0, r1, [r3]
    4512:	4770      	bx	lr

00004514 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
    4514:	b570      	push	{r4, r5, r6, lr}
    4516:	b08a      	sub	sp, #40	; 0x28
    4518:	4605      	mov	r5, r0
    451a:	9101      	str	r1, [sp, #4]
    451c:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
    451e:	ab02      	add	r3, sp, #8
    4520:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
    4522:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
    4524:	9b01      	ldr	r3, [sp, #4]
    4526:	1c5a      	adds	r2, r3, #1
    4528:	9201      	str	r2, [sp, #4]
    452a:	7819      	ldrb	r1, [r3, #0]
    452c:	2900      	cmp	r1, #0
    452e:	f000 811c 	beq.w	476a <tfp_format+0x256>
        if (ch != '%') {
    4532:	2925      	cmp	r1, #37	; 0x25
    4534:	d004      	beq.n	4540 <tfp_format+0x2c>
            written += putf(putp, ch);
    4536:	4628      	mov	r0, r5
    4538:	f7ff ff17 	bl	436a <putf>
    453c:	4404      	add	r4, r0
    453e:	e7f1      	b.n	4524 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
    4540:	2200      	movs	r2, #0
    4542:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
    4546:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
    454a:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
    454e:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
    4552:	f362 0382 	bfi	r3, r2, #2, #1
    4556:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
    455a:	9b01      	ldr	r3, [sp, #4]
    455c:	1c5a      	adds	r2, r3, #1
    455e:	9201      	str	r2, [sp, #4]
    4560:	7818      	ldrb	r0, [r3, #0]
    4562:	b128      	cbz	r0, 4570 <tfp_format+0x5c>
                switch (ch) {
    4564:	282d      	cmp	r0, #45	; 0x2d
    4566:	d04e      	beq.n	4606 <tfp_format+0xf2>
    4568:	2830      	cmp	r0, #48	; 0x30
    456a:	d03c      	beq.n	45e6 <tfp_format+0xd2>
    456c:	2823      	cmp	r0, #35	; 0x23
    456e:	d043      	beq.n	45f8 <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
    4570:	282a      	cmp	r0, #42	; 0x2a
    4572:	d052      	beq.n	461a <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
    4574:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    4578:	b2db      	uxtb	r3, r3
    457a:	2b09      	cmp	r3, #9
    457c:	d961      	bls.n	4642 <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
    457e:	286c      	cmp	r0, #108	; 0x6c
    4580:	d065      	beq.n	464e <tfp_format+0x13a>
            lng = 0;
    4582:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
    4584:	287a      	cmp	r0, #122	; 0x7a
    4586:	d06f      	beq.n	4668 <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
    4588:	2869      	cmp	r0, #105	; 0x69
    458a:	f000 808e 	beq.w	46aa <tfp_format+0x196>
    458e:	d970      	bls.n	4672 <tfp_format+0x15e>
    4590:	2873      	cmp	r0, #115	; 0x73
    4592:	f000 80dd 	beq.w	4750 <tfp_format+0x23c>
    4596:	f200 8099 	bhi.w	46cc <tfp_format+0x1b8>
    459a:	286f      	cmp	r0, #111	; 0x6f
    459c:	f000 80c7 	beq.w	472e <tfp_format+0x21a>
    45a0:	2870      	cmp	r0, #112	; 0x70
    45a2:	d1bf      	bne.n	4524 <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
    45a4:	9b00      	ldr	r3, [sp, #0]
    45a6:	1d1a      	adds	r2, r3, #4
    45a8:	9200      	str	r2, [sp, #0]
    45aa:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
    45ac:	2310      	movs	r3, #16
    45ae:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
    45b2:	aa08      	add	r2, sp, #32
    45b4:	2100      	movs	r1, #0
    45b6:	f7ff fe35 	bl	4224 <ui2a>
                p.width = 2 * sizeof(void*);
    45ba:	2308      	movs	r3, #8
    45bc:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
    45c0:	2301      	movs	r3, #1
    45c2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
    45c6:	2130      	movs	r1, #48	; 0x30
    45c8:	4628      	mov	r0, r5
    45ca:	f7ff fece 	bl	436a <putf>
    45ce:	4404      	add	r4, r0
                written += putf(putp, 'x');
    45d0:	2178      	movs	r1, #120	; 0x78
    45d2:	4628      	mov	r0, r5
    45d4:	f7ff fec9 	bl	436a <putf>
    45d8:	4404      	add	r4, r0
                written += putchw(putp, &p);
    45da:	a908      	add	r1, sp, #32
    45dc:	4628      	mov	r0, r5
    45de:	f7ff fed9 	bl	4394 <putchw>
    45e2:	4404      	add	r4, r0
                break;
    45e4:	e79e      	b.n	4524 <tfp_format+0x10>
                    if (!p.left) {
    45e6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    45ea:	f013 0f08 	tst.w	r3, #8
    45ee:	d1b4      	bne.n	455a <tfp_format+0x46>
                        p.lz = 1;
    45f0:	2301      	movs	r3, #1
    45f2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
    45f6:	e7b0      	b.n	455a <tfp_format+0x46>
                    p.alt = 1;
    45f8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    45fc:	f043 0302 	orr.w	r3, r3, #2
    4600:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
    4604:	e7a9      	b.n	455a <tfp_format+0x46>
                    p.left = 1;
    4606:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    460a:	f043 0308 	orr.w	r3, r3, #8
    460e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
    4612:	2300      	movs	r3, #0
    4614:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
    4618:	e79f      	b.n	455a <tfp_format+0x46>
                i = intarg(0, 1, &va);
    461a:	466a      	mov	r2, sp
    461c:	2101      	movs	r1, #1
    461e:	2000      	movs	r0, #0
    4620:	f7ff ff46 	bl	44b0 <intarg>
                if (i > UCHAR_MAX) {
    4624:	28ff      	cmp	r0, #255	; 0xff
    4626:	dd07      	ble.n	4638 <tfp_format+0x124>
                    p.width = UCHAR_MAX;
    4628:	23ff      	movs	r3, #255	; 0xff
    462a:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
    462e:	9b01      	ldr	r3, [sp, #4]
    4630:	1c5a      	adds	r2, r3, #1
    4632:	9201      	str	r2, [sp, #4]
    4634:	7818      	ldrb	r0, [r3, #0]
    4636:	e7a2      	b.n	457e <tfp_format+0x6a>
                } else if (i > 0) {
    4638:	2800      	cmp	r0, #0
    463a:	ddf8      	ble.n	462e <tfp_format+0x11a>
                    p.width = i;
    463c:	f88d 0020 	strb.w	r0, [sp, #32]
    4640:	e7f5      	b.n	462e <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
    4642:	ab08      	add	r3, sp, #32
    4644:	220a      	movs	r2, #10
    4646:	a901      	add	r1, sp, #4
    4648:	f7ff fe74 	bl	4334 <a2i>
    464c:	e797      	b.n	457e <tfp_format+0x6a>
                ch = *(fmt++);
    464e:	9b01      	ldr	r3, [sp, #4]
    4650:	1c5a      	adds	r2, r3, #1
    4652:	9201      	str	r2, [sp, #4]
    4654:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
    4656:	286c      	cmp	r0, #108	; 0x6c
    4658:	d001      	beq.n	465e <tfp_format+0x14a>
                lng = 1;
    465a:	2601      	movs	r6, #1
    465c:	e792      	b.n	4584 <tfp_format+0x70>
                    ch = *(fmt++);
    465e:	1c9a      	adds	r2, r3, #2
    4660:	9201      	str	r2, [sp, #4]
    4662:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
    4664:	2602      	movs	r6, #2
    4666:	e78d      	b.n	4584 <tfp_format+0x70>
                ch = *(fmt++);
    4668:	9b01      	ldr	r3, [sp, #4]
    466a:	1c5a      	adds	r2, r3, #1
    466c:	9201      	str	r2, [sp, #4]
    466e:	7818      	ldrb	r0, [r3, #0]
    4670:	e78a      	b.n	4588 <tfp_format+0x74>
            switch (ch) {
    4672:	2858      	cmp	r0, #88	; 0x58
    4674:	d040      	beq.n	46f8 <tfp_format+0x1e4>
    4676:	d80a      	bhi.n	468e <tfp_format+0x17a>
    4678:	2800      	cmp	r0, #0
    467a:	d076      	beq.n	476a <tfp_format+0x256>
    467c:	2825      	cmp	r0, #37	; 0x25
    467e:	f47f af51 	bne.w	4524 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
    4682:	4601      	mov	r1, r0
    4684:	4628      	mov	r0, r5
    4686:	f7ff fe70 	bl	436a <putf>
    468a:	4404      	add	r4, r0
                break;
    468c:	e74a      	b.n	4524 <tfp_format+0x10>
            switch (ch) {
    468e:	2863      	cmp	r0, #99	; 0x63
    4690:	d108      	bne.n	46a4 <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
    4692:	9b00      	ldr	r3, [sp, #0]
    4694:	1d1a      	adds	r2, r3, #4
    4696:	9200      	str	r2, [sp, #0]
    4698:	7819      	ldrb	r1, [r3, #0]
    469a:	4628      	mov	r0, r5
    469c:	f7ff fe65 	bl	436a <putf>
    46a0:	4404      	add	r4, r0
                break;
    46a2:	e73f      	b.n	4524 <tfp_format+0x10>
            switch (ch) {
    46a4:	2864      	cmp	r0, #100	; 0x64
    46a6:	f47f af3d 	bne.w	4524 <tfp_format+0x10>
                p.base = 10;
    46aa:	230a      	movs	r3, #10
    46ac:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
    46b0:	466a      	mov	r2, sp
    46b2:	2101      	movs	r1, #1
    46b4:	4630      	mov	r0, r6
    46b6:	f7ff fefb 	bl	44b0 <intarg>
    46ba:	aa08      	add	r2, sp, #32
    46bc:	f7ff fe12 	bl	42e4 <i2a>
                written += putchw(putp, &p);
    46c0:	a908      	add	r1, sp, #32
    46c2:	4628      	mov	r0, r5
    46c4:	f7ff fe66 	bl	4394 <putchw>
    46c8:	4404      	add	r4, r0
                break;
    46ca:	e72b      	b.n	4524 <tfp_format+0x10>
            switch (ch) {
    46cc:	2875      	cmp	r0, #117	; 0x75
    46ce:	d110      	bne.n	46f2 <tfp_format+0x1de>
                p.base = 10;
    46d0:	230a      	movs	r3, #10
    46d2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
    46d6:	466a      	mov	r2, sp
    46d8:	2100      	movs	r1, #0
    46da:	4630      	mov	r0, r6
    46dc:	f7ff fee8 	bl	44b0 <intarg>
    46e0:	aa08      	add	r2, sp, #32
    46e2:	f7ff fd9f 	bl	4224 <ui2a>
                written += putchw(putp, &p);
    46e6:	a908      	add	r1, sp, #32
    46e8:	4628      	mov	r0, r5
    46ea:	f7ff fe53 	bl	4394 <putchw>
    46ee:	4404      	add	r4, r0
                break;
    46f0:	e718      	b.n	4524 <tfp_format+0x10>
            switch (ch) {
    46f2:	2878      	cmp	r0, #120	; 0x78
    46f4:	f47f af16 	bne.w	4524 <tfp_format+0x10>
                p.base = 16;
    46f8:	2310      	movs	r3, #16
    46fa:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
    46fe:	2858      	cmp	r0, #88	; 0x58
    4700:	bf14      	ite	ne
    4702:	2300      	movne	r3, #0
    4704:	2301      	moveq	r3, #1
    4706:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    470a:	f363 0282 	bfi	r2, r3, #2, #1
    470e:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
    4712:	466a      	mov	r2, sp
    4714:	2100      	movs	r1, #0
    4716:	4630      	mov	r0, r6
    4718:	f7ff feca 	bl	44b0 <intarg>
    471c:	aa08      	add	r2, sp, #32
    471e:	f7ff fd81 	bl	4224 <ui2a>
                written += putchw(putp, &p);
    4722:	a908      	add	r1, sp, #32
    4724:	4628      	mov	r0, r5
    4726:	f7ff fe35 	bl	4394 <putchw>
    472a:	4404      	add	r4, r0
                break;
    472c:	e6fa      	b.n	4524 <tfp_format+0x10>
                p.base = 8;
    472e:	2308      	movs	r3, #8
    4730:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
    4734:	466a      	mov	r2, sp
    4736:	2100      	movs	r1, #0
    4738:	4630      	mov	r0, r6
    473a:	f7ff feb9 	bl	44b0 <intarg>
    473e:	aa08      	add	r2, sp, #32
    4740:	f7ff fd70 	bl	4224 <ui2a>
                written += putchw(putp, &p);
    4744:	a908      	add	r1, sp, #32
    4746:	4628      	mov	r0, r5
    4748:	f7ff fe24 	bl	4394 <putchw>
    474c:	4404      	add	r4, r0
                break;
    474e:	e6e9      	b.n	4524 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
    4750:	9b00      	ldr	r3, [sp, #0]
    4752:	1d1a      	adds	r2, r3, #4
    4754:	9200      	str	r2, [sp, #0]
    4756:	681b      	ldr	r3, [r3, #0]
    4758:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
    475a:	a908      	add	r1, sp, #32
    475c:	4628      	mov	r0, r5
    475e:	f7ff fe19 	bl	4394 <putchw>
    4762:	4404      	add	r4, r0
                p.bf = bf;
    4764:	ab02      	add	r3, sp, #8
    4766:	9309      	str	r3, [sp, #36]	; 0x24
                break;
    4768:	e6dc      	b.n	4524 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
    476a:	4620      	mov	r0, r4
    476c:	b00a      	add	sp, #40	; 0x28
    476e:	bd70      	pop	{r4, r5, r6, pc}

00004770 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
    4770:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
    4772:	f7ff fecf 	bl	4514 <tfp_format>
}
    4776:	bd08      	pop	{r3, pc}

00004778 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
    4778:	b40f      	push	{r0, r1, r2, r3}
    477a:	b500      	push	{lr}
    477c:	b083      	sub	sp, #12
    477e:	aa04      	add	r2, sp, #16
    4780:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
    4784:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
    4786:	4b04      	ldr	r3, [pc, #16]	; (4798 <printf+0x20>)
    4788:	6818      	ldr	r0, [r3, #0]
    478a:	f7ff fff1 	bl	4770 <vfprintf>
    va_end(va);
    return rv;
}
    478e:	b003      	add	sp, #12
    4790:	f85d eb04 	ldr.w	lr, [sp], #4
    4794:	b004      	add	sp, #16
    4796:	4770      	bx	lr
    4798:	000056e8 	.word	0x000056e8

0000479c <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
    479c:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
    479e:	460a      	mov	r2, r1
    47a0:	4601      	mov	r1, r0
    47a2:	4b02      	ldr	r3, [pc, #8]	; (47ac <vprintf+0x10>)
    47a4:	6818      	ldr	r0, [r3, #0]
    47a6:	f7ff ffe3 	bl	4770 <vfprintf>
}
    47aa:	bd08      	pop	{r3, pc}
    47ac:	000056e8 	.word	0x000056e8

000047b0 <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
    47b0:	b570      	push	{r4, r5, r6, lr}
    47b2:	b086      	sub	sp, #24
    47b4:	4605      	mov	r5, r0
    47b6:	460e      	mov	r6, r1
    47b8:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
    47ba:	2300      	movs	r3, #0
    47bc:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
    47be:	f000 fa17 	bl	4bf0 <mfg_init>

    mfg_open(&reader);
    47c2:	a801      	add	r0, sp, #4
    47c4:	f000 fa26 	bl	4c14 <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
    47c8:	6823      	ldr	r3, [r4, #0]
    47ca:	42ab      	cmp	r3, r5
    47cc:	da29      	bge.n	4822 <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
    47ce:	2102      	movs	r1, #2
    47d0:	a801      	add	r0, sp, #4
    47d2:	f000 f9f6 	bl	4bc2 <mfg_seek_next_with_type>
    47d6:	4603      	mov	r3, r0
        switch (rc) {
    47d8:	f110 0f0f 	cmn.w	r0, #15
    47dc:	d003      	beq.n	47e6 <flash_map_read_mfg+0x36>
    47de:	b120      	cbz	r0, 47ea <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
    47e0:	4618      	mov	r0, r3
    47e2:	b006      	add	sp, #24
    47e4:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
    47e6:	2300      	movs	r3, #0
    47e8:	e7fa      	b.n	47e0 <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
    47ea:	a903      	add	r1, sp, #12
    47ec:	a801      	add	r0, sp, #4
    47ee:	f000 f9f5 	bl	4bdc <mfg_read_tlv_flash_area>
        if (rc != 0) {
    47f2:	4603      	mov	r3, r0
    47f4:	2800      	cmp	r0, #0
    47f6:	d1f3      	bne.n	47e0 <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
    47f8:	6823      	ldr	r3, [r4, #0]
    47fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    47fe:	009a      	lsls	r2, r3, #2
    4800:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
    4802:	f89d 100c 	ldrb.w	r1, [sp, #12]
    4806:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
    4808:	f89d 200d 	ldrb.w	r2, [sp, #13]
    480c:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
    480e:	f8dd 200e 	ldr.w	r2, [sp, #14]
    4812:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
    4814:	f8dd 2012 	ldr.w	r2, [sp, #18]
    4818:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
    481a:	6823      	ldr	r3, [r4, #0]
    481c:	3301      	adds	r3, #1
    481e:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
    4820:	e7d2      	b.n	47c8 <flash_map_read_mfg+0x18>
            return -1;
    4822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4826:	e7db      	b.n	47e0 <flash_map_read_mfg+0x30>

00004828 <flash_area_open>:
{
    4828:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
    482a:	4b0d      	ldr	r3, [pc, #52]	; (4860 <flash_area_open+0x38>)
    482c:	681d      	ldr	r5, [r3, #0]
    482e:	b1a5      	cbz	r5, 485a <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
    4830:	2300      	movs	r3, #0
    4832:	4a0c      	ldr	r2, [pc, #48]	; (4864 <flash_area_open+0x3c>)
    4834:	6812      	ldr	r2, [r2, #0]
    4836:	429a      	cmp	r2, r3
    4838:	dd0b      	ble.n	4852 <flash_area_open+0x2a>
        area = flash_map + i;
    483a:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    483e:	00a2      	lsls	r2, r4, #2
    4840:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
    4842:	5caa      	ldrb	r2, [r5, r2]
    4844:	4282      	cmp	r2, r0
    4846:	d001      	beq.n	484c <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
    4848:	3301      	adds	r3, #1
    484a:	e7f2      	b.n	4832 <flash_area_open+0xa>
            *fap = area;
    484c:	600c      	str	r4, [r1, #0]
            return 0;
    484e:	2000      	movs	r0, #0
    4850:	e001      	b.n	4856 <flash_area_open+0x2e>
    return SYS_ENOENT;
    4852:	f06f 0003 	mvn.w	r0, #3
}
    4856:	bc30      	pop	{r4, r5}
    4858:	4770      	bx	lr
        return SYS_EACCES;
    485a:	f06f 0006 	mvn.w	r0, #6
    485e:	e7fa      	b.n	4856 <flash_area_open+0x2e>
    4860:	2000641c 	.word	0x2000641c
    4864:	20006420 	.word	0x20006420

00004868 <flash_area_to_sectors>:
{
    4868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    486c:	b084      	sub	sp, #16
    486e:	460f      	mov	r7, r1
    4870:	4616      	mov	r6, r2
    rc = flash_area_open(id, &fa);
    4872:	fa5f f980 	uxtb.w	r9, r0
    4876:	a903      	add	r1, sp, #12
    4878:	4648      	mov	r0, r9
    487a:	f7ff ffd5 	bl	4828 <flash_area_open>
    if (rc != 0) {
    487e:	4680      	mov	r8, r0
    4880:	b118      	cbz	r0, 488a <flash_area_to_sectors+0x22>
}
    4882:	4640      	mov	r0, r8
    4884:	b004      	add	sp, #16
    4886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *cnt = 0;
    488a:	2300      	movs	r3, #0
    488c:	603b      	str	r3, [r7, #0]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
    488e:	9b03      	ldr	r3, [sp, #12]
    4890:	7858      	ldrb	r0, [r3, #1]
    4892:	f7fb fee1 	bl	658 <hal_bsp_flash_dev>
    4896:	4605      	mov	r5, r0
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    4898:	4644      	mov	r4, r8
    489a:	e003      	b.n	48a4 <flash_area_to_sectors+0x3c>
            (*cnt)++;
    489c:	683b      	ldr	r3, [r7, #0]
    489e:	3301      	adds	r3, #1
    48a0:	603b      	str	r3, [r7, #0]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    48a2:	3401      	adds	r4, #1
    48a4:	68eb      	ldr	r3, [r5, #12]
    48a6:	42a3      	cmp	r3, r4
    48a8:	ddeb      	ble.n	4882 <flash_area_to_sectors+0x1a>
        hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    48aa:	682b      	ldr	r3, [r5, #0]
    48ac:	f8d3 a00c 	ldr.w	sl, [r3, #12]
    48b0:	ab01      	add	r3, sp, #4
    48b2:	aa02      	add	r2, sp, #8
    48b4:	4621      	mov	r1, r4
    48b6:	4628      	mov	r0, r5
    48b8:	47d0      	blx	sl
        if (start >= fa->fa_off && start < fa->fa_off + fa->fa_size) {
    48ba:	9903      	ldr	r1, [sp, #12]
    48bc:	684b      	ldr	r3, [r1, #4]
    48be:	9a02      	ldr	r2, [sp, #8]
    48c0:	4293      	cmp	r3, r2
    48c2:	d8ee      	bhi.n	48a2 <flash_area_to_sectors+0x3a>
    48c4:	6889      	ldr	r1, [r1, #8]
    48c6:	440b      	add	r3, r1
    48c8:	429a      	cmp	r2, r3
    48ca:	d2ea      	bcs.n	48a2 <flash_area_to_sectors+0x3a>
            if (ret) {
    48cc:	2e00      	cmp	r6, #0
    48ce:	d0e5      	beq.n	489c <flash_area_to_sectors+0x34>
                ret->fa_id = id;
    48d0:	f886 9000 	strb.w	r9, [r6]
                ret->fa_device_id = fa->fa_device_id;
    48d4:	9b03      	ldr	r3, [sp, #12]
    48d6:	785b      	ldrb	r3, [r3, #1]
    48d8:	7073      	strb	r3, [r6, #1]
                ret->fa_off = start;
    48da:	6072      	str	r2, [r6, #4]
                ret->fa_size = size;
    48dc:	9b01      	ldr	r3, [sp, #4]
    48de:	60b3      	str	r3, [r6, #8]
                ret++;
    48e0:	360c      	adds	r6, #12
    48e2:	e7db      	b.n	489c <flash_area_to_sectors+0x34>

000048e4 <flash_area_read>:
{
    48e4:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    48e6:	6884      	ldr	r4, [r0, #8]
    48e8:	428c      	cmp	r4, r1
    48ea:	d308      	bcc.n	48fe <flash_area_read+0x1a>
    48ec:	18cd      	adds	r5, r1, r3
    48ee:	42ac      	cmp	r4, r5
    48f0:	d308      	bcc.n	4904 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
    48f2:	6844      	ldr	r4, [r0, #4]
    48f4:	4421      	add	r1, r4
    48f6:	7840      	ldrb	r0, [r0, #1]
    48f8:	f7ff fb3d 	bl	3f76 <hal_flash_read>
}
    48fc:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
    48fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4902:	e7fb      	b.n	48fc <flash_area_read+0x18>
    4904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4908:	e7f8      	b.n	48fc <flash_area_read+0x18>

0000490a <flash_area_write>:
{
    490a:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    490c:	6884      	ldr	r4, [r0, #8]
    490e:	428c      	cmp	r4, r1
    4910:	d308      	bcc.n	4924 <flash_area_write+0x1a>
    4912:	18cd      	adds	r5, r1, r3
    4914:	42ac      	cmp	r4, r5
    4916:	d308      	bcc.n	492a <flash_area_write+0x20>
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
    4918:	6844      	ldr	r4, [r0, #4]
    491a:	4421      	add	r1, r4
    491c:	7840      	ldrb	r0, [r0, #1]
    491e:	f7ff fb55 	bl	3fcc <hal_flash_write>
}
    4922:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
    4924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4928:	e7fb      	b.n	4922 <flash_area_write+0x18>
    492a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    492e:	e7f8      	b.n	4922 <flash_area_write+0x18>

00004930 <flash_area_erase>:
    if (off > fa->fa_size || off + len > fa->fa_size) {
    4930:	6883      	ldr	r3, [r0, #8]
    4932:	428b      	cmp	r3, r1
    4934:	d309      	bcc.n	494a <flash_area_erase+0x1a>
{
    4936:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    4938:	188c      	adds	r4, r1, r2
    493a:	42a3      	cmp	r3, r4
    493c:	d308      	bcc.n	4950 <flash_area_erase+0x20>
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
    493e:	6843      	ldr	r3, [r0, #4]
    4940:	4419      	add	r1, r3
    4942:	7840      	ldrb	r0, [r0, #1]
    4944:	f7ff fb7c 	bl	4040 <hal_flash_erase>
}
    4948:	bd10      	pop	{r4, pc}
        return -1;
    494a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    494e:	4770      	bx	lr
        return -1;
    4950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4954:	e7f8      	b.n	4948 <flash_area_erase+0x18>

00004956 <flash_area_align>:
{
    4956:	b508      	push	{r3, lr}
    return hal_flash_align(fa->fa_device_id);
    4958:	7840      	ldrb	r0, [r0, #1]
    495a:	f7ff fafc 	bl	3f56 <hal_flash_align>
}
    495e:	bd08      	pop	{r3, pc}

00004960 <flash_area_erased_val>:
{
    4960:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
    4962:	7840      	ldrb	r0, [r0, #1]
    4964:	f7ff faff 	bl	3f66 <hal_flash_erased_val>
}
    4968:	bd08      	pop	{r3, pc}

0000496a <flash_area_read_is_empty>:
{
    496a:	b510      	push	{r4, lr}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
    496c:	6844      	ldr	r4, [r0, #4]
    496e:	4421      	add	r1, r4
    4970:	7840      	ldrb	r0, [r0, #1]
    4972:	f7ff fbe5 	bl	4140 <hal_flash_isempty>
}
    4976:	bd10      	pop	{r4, pc}

00004978 <flash_map_init>:

void
flash_map_init(void)
{
    4978:	b510      	push	{r4, lr}
    497a:	b084      	sub	sp, #16
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    rc = hal_flash_init();
    497c:	f7ff fad7 	bl	3f2e <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    4980:	b138      	cbz	r0, 4992 <flash_map_init+0x1a>
    4982:	2000      	movs	r0, #0
    4984:	9000      	str	r0, [sp, #0]
    4986:	4b0e      	ldr	r3, [pc, #56]	; (49c0 <flash_map_init+0x48>)
    4988:	681c      	ldr	r4, [r3, #0]
    498a:	4603      	mov	r3, r0
    498c:	4602      	mov	r2, r0
    498e:	4601      	mov	r1, r0
    4990:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
    4992:	4b0c      	ldr	r3, [pc, #48]	; (49c4 <flash_map_init+0x4c>)
    4994:	4a0c      	ldr	r2, [pc, #48]	; (49c8 <flash_map_init+0x50>)
    4996:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
    4998:	4b0c      	ldr	r3, [pc, #48]	; (49cc <flash_map_init+0x54>)
    499a:	2206      	movs	r2, #6
    499c:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
    499e:	aa03      	add	r2, sp, #12
    49a0:	490b      	ldr	r1, [pc, #44]	; (49d0 <flash_map_init+0x58>)
    49a2:	200a      	movs	r0, #10
    49a4:	f7ff ff04 	bl	47b0 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
    49a8:	b938      	cbnz	r0, 49ba <flash_map_init+0x42>
    49aa:	9b03      	ldr	r3, [sp, #12]
    49ac:	2b00      	cmp	r3, #0
    49ae:	dd04      	ble.n	49ba <flash_map_init+0x42>
        flash_map = mfg_areas;
    49b0:	4a04      	ldr	r2, [pc, #16]	; (49c4 <flash_map_init+0x4c>)
    49b2:	4907      	ldr	r1, [pc, #28]	; (49d0 <flash_map_init+0x58>)
    49b4:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
    49b6:	4a05      	ldr	r2, [pc, #20]	; (49cc <flash_map_init+0x54>)
    49b8:	6013      	str	r3, [r2, #0]
    }
}
    49ba:	b004      	add	sp, #16
    49bc:	bd10      	pop	{r4, pc}
    49be:	bf00      	nop
    49c0:	2000014c 	.word	0x2000014c
    49c4:	2000641c 	.word	0x2000641c
    49c8:	000056ec 	.word	0x000056ec
    49cc:	20006420 	.word	0x20006420
    49d0:	20006324 	.word	0x20006324

000049d4 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
    49d4:	4770      	bx	lr
	...

000049d8 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
    49d8:	b530      	push	{r4, r5, lr}
    49da:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
    49dc:	7885      	ldrb	r5, [r0, #2]
    49de:	4b21      	ldr	r3, [pc, #132]	; (4a64 <mfg_seek_next_aux+0x8c>)
    49e0:	681b      	ldr	r3, [r3, #0]
    49e2:	429d      	cmp	r5, r3
    49e4:	da32      	bge.n	4a4c <mfg_seek_next_aux+0x74>
    49e6:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
    49e8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    49ec:	0093      	lsls	r3, r2, #2
    49ee:	a901      	add	r1, sp, #4
    49f0:	4a1d      	ldr	r2, [pc, #116]	; (4a68 <mfg_seek_next_aux+0x90>)
    49f2:	5cd0      	ldrb	r0, [r2, r3]
    49f4:	f7ff ff18 	bl	4828 <flash_area_open>
    if (rc != 0) {
    49f8:	bb58      	cbnz	r0, 4a52 <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
    49fa:	6862      	ldr	r2, [r4, #4]
    49fc:	b9c2      	cbnz	r2, 4a30 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
    49fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4a02:	00aa      	lsls	r2, r5, #2
    4a04:	4b18      	ldr	r3, [pc, #96]	; (4a68 <mfg_seek_next_aux+0x90>)
    4a06:	4413      	add	r3, r2
    4a08:	685b      	ldr	r3, [r3, #4]
    4a0a:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
    4a0c:	6861      	ldr	r1, [r4, #4]
    4a0e:	9801      	ldr	r0, [sp, #4]
    4a10:	6883      	ldr	r3, [r0, #8]
    4a12:	3b08      	subs	r3, #8
    4a14:	4299      	cmp	r1, r3
    4a16:	d310      	bcc.n	4a3a <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
    4a18:	78a3      	ldrb	r3, [r4, #2]
    4a1a:	1c59      	adds	r1, r3, #1
    4a1c:	4a11      	ldr	r2, [pc, #68]	; (4a64 <mfg_seek_next_aux+0x8c>)
    4a1e:	6812      	ldr	r2, [r2, #0]
    4a20:	4291      	cmp	r1, r2
    4a22:	da19      	bge.n	4a58 <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
    4a24:	2200      	movs	r2, #0
    4a26:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
    4a28:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
    4a2a:	f06f 0305 	mvn.w	r3, #5
    4a2e:	e015      	b.n	4a5c <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    4a30:	7863      	ldrb	r3, [r4, #1]
    4a32:	4413      	add	r3, r2
    4a34:	3302      	adds	r3, #2
    4a36:	6063      	str	r3, [r4, #4]
    4a38:	e7e8      	b.n	4a0c <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
    4a3a:	2302      	movs	r3, #2
    4a3c:	4622      	mov	r2, r4
    4a3e:	f7ff ff51 	bl	48e4 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
    4a42:	4603      	mov	r3, r0
    4a44:	b150      	cbz	r0, 4a5c <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
    4a46:	f06f 0304 	mvn.w	r3, #4
    4a4a:	e007      	b.n	4a5c <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
    4a4c:	f06f 0301 	mvn.w	r3, #1
    4a50:	e004      	b.n	4a5c <mfg_seek_next_aux+0x84>
        return SYS_EIO;
    4a52:	f06f 0304 	mvn.w	r3, #4
    4a56:	e001      	b.n	4a5c <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
    4a58:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
    4a5c:	4618      	mov	r0, r3
    4a5e:	b003      	add	sp, #12
    4a60:	bd30      	pop	{r4, r5, pc}
    4a62:	bf00      	nop
    4a64:	200063b8 	.word	0x200063b8
    4a68:	200063a0 	.word	0x200063a0

00004a6c <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
    4a6c:	b530      	push	{r4, r5, lr}
    4a6e:	b085      	sub	sp, #20
    4a70:	4605      	mov	r5, r0
    4a72:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
    4a74:	a903      	add	r1, sp, #12
    4a76:	f7ff fed7 	bl	4828 <flash_area_open>
    if (rc != 0) {
    4a7a:	b9e8      	cbnz	r0, 4ab8 <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
    4a7c:	9803      	ldr	r0, [sp, #12]
    4a7e:	6881      	ldr	r1, [r0, #8]
    4a80:	2308      	movs	r3, #8
    4a82:	aa01      	add	r2, sp, #4
    4a84:	3908      	subs	r1, #8
    4a86:	f7ff ff2d 	bl	48e4 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
    4a8a:	4601      	mov	r1, r0
    4a8c:	b9b8      	cbnz	r0, 4abe <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
    4a8e:	9a02      	ldr	r2, [sp, #8]
    4a90:	4b11      	ldr	r3, [pc, #68]	; (4ad8 <mfg_read_mmr+0x6c>)
    4a92:	429a      	cmp	r2, r3
    4a94:	d116      	bne.n	4ac4 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
    4a96:	f89d 3006 	ldrb.w	r3, [sp, #6]
    4a9a:	2b02      	cmp	r3, #2
    4a9c:	d115      	bne.n	4aca <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
    4a9e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    4aa2:	9b03      	ldr	r3, [sp, #12]
    4aa4:	689b      	ldr	r3, [r3, #8]
    4aa6:	429a      	cmp	r2, r3
    4aa8:	d812      	bhi.n	4ad0 <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
    4aaa:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
    4aac:	7025      	strb	r5, [r4, #0]
    4aae:	6063      	str	r3, [r4, #4]
    4ab0:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
    4ab2:	4608      	mov	r0, r1
    4ab4:	b005      	add	sp, #20
    4ab6:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
    4ab8:	f06f 0104 	mvn.w	r1, #4
    4abc:	e7f9      	b.n	4ab2 <mfg_read_mmr+0x46>
        return SYS_EIO;
    4abe:	f06f 0104 	mvn.w	r1, #4
    4ac2:	e7f6      	b.n	4ab2 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
    4ac4:	f06f 0108 	mvn.w	r1, #8
    4ac8:	e7f3      	b.n	4ab2 <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
    4aca:	f06f 010b 	mvn.w	r1, #11
    4ace:	e7f0      	b.n	4ab2 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
    4ad0:	f06f 0108 	mvn.w	r1, #8
    4ad4:	e7ed      	b.n	4ab2 <mfg_read_mmr+0x46>
    4ad6:	bf00      	nop
    4ad8:	3bb2a269 	.word	0x3bb2a269

00004adc <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
    4adc:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
    4ade:	2300      	movs	r3, #0
    4ae0:	4a11      	ldr	r2, [pc, #68]	; (4b28 <mfg_read_next_mmr+0x4c>)
    4ae2:	6812      	ldr	r2, [r2, #0]
    4ae4:	429a      	cmp	r2, r3
    4ae6:	dd08      	ble.n	4afa <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
    4ae8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    4aec:	008a      	lsls	r2, r1, #2
    4aee:	490f      	ldr	r1, [pc, #60]	; (4b2c <mfg_read_next_mmr+0x50>)
    4af0:	5c8a      	ldrb	r2, [r1, r2]
    4af2:	4282      	cmp	r2, r0
    4af4:	d011      	beq.n	4b1a <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
    4af6:	3301      	adds	r3, #1
    4af8:	e7f2      	b.n	4ae0 <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
    4afa:	2a01      	cmp	r2, #1
    4afc:	dc11      	bgt.n	4b22 <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
    4afe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4b02:	0093      	lsls	r3, r2, #2
    4b04:	4909      	ldr	r1, [pc, #36]	; (4b2c <mfg_read_next_mmr+0x50>)
    4b06:	4419      	add	r1, r3
    4b08:	f7ff ffb0 	bl	4a6c <mfg_read_mmr>
    if (rc != 0) {
    4b0c:	4603      	mov	r3, r0
    4b0e:	b930      	cbnz	r0, 4b1e <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
    4b10:	4905      	ldr	r1, [pc, #20]	; (4b28 <mfg_read_next_mmr+0x4c>)
    4b12:	680a      	ldr	r2, [r1, #0]
    4b14:	3201      	adds	r2, #1
    4b16:	600a      	str	r2, [r1, #0]
    return 0;
    4b18:	e001      	b.n	4b1e <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
    4b1a:	f06f 030a 	mvn.w	r3, #10
}
    4b1e:	4618      	mov	r0, r3
    4b20:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
    4b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4b26:	e7fa      	b.n	4b1e <mfg_read_next_mmr+0x42>
    4b28:	200063b8 	.word	0x200063b8
    4b2c:	200063a0 	.word	0x200063a0

00004b30 <mfg_open_flash_area>:
{
    4b30:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
    4b32:	7883      	ldrb	r3, [r0, #2]
    4b34:	4a0b      	ldr	r2, [pc, #44]	; (4b64 <mfg_open_flash_area+0x34>)
    4b36:	6812      	ldr	r2, [r2, #0]
    4b38:	4293      	cmp	r3, r2
    4b3a:	da0a      	bge.n	4b52 <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
    4b3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4b40:	009a      	lsls	r2, r3, #2
    4b42:	4b09      	ldr	r3, [pc, #36]	; (4b68 <mfg_open_flash_area+0x38>)
    4b44:	5c98      	ldrb	r0, [r3, r2]
    4b46:	f7ff fe6f 	bl	4828 <flash_area_open>
    if (rc != 0) {
    4b4a:	4603      	mov	r3, r0
    4b4c:	b938      	cbnz	r0, 4b5e <mfg_open_flash_area+0x2e>
}
    4b4e:	4618      	mov	r0, r3
    4b50:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
    4b52:	2300      	movs	r3, #0
    4b54:	461a      	mov	r2, r3
    4b56:	4619      	mov	r1, r3
    4b58:	4618      	mov	r0, r3
    4b5a:	f7fc fdd7 	bl	170c <__assert_func>
        return SYS_EIO;
    4b5e:	f06f 0304 	mvn.w	r3, #4
    4b62:	e7f4      	b.n	4b4e <mfg_open_flash_area+0x1e>
    4b64:	200063b8 	.word	0x200063b8
    4b68:	200063a0 	.word	0x200063a0

00004b6c <mfg_read_tlv_body>:
{
    4b6c:	b570      	push	{r4, r5, r6, lr}
    4b6e:	b082      	sub	sp, #8
    4b70:	4606      	mov	r6, r0
    4b72:	460c      	mov	r4, r1
    4b74:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
    4b76:	a901      	add	r1, sp, #4
    4b78:	f7ff ffda 	bl	4b30 <mfg_open_flash_area>
    if (rc != 0) {
    4b7c:	4603      	mov	r3, r0
    4b7e:	b110      	cbz	r0, 4b86 <mfg_read_tlv_body+0x1a>
}
    4b80:	4618      	mov	r0, r3
    4b82:	b002      	add	sp, #8
    4b84:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
    4b86:	462a      	mov	r2, r5
    4b88:	2100      	movs	r1, #0
    4b8a:	4620      	mov	r0, r4
    4b8c:	f7fd f844 	bl	1c18 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
    4b90:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
    4b92:	6871      	ldr	r1, [r6, #4]
    4b94:	42ab      	cmp	r3, r5
    4b96:	bfa8      	it	ge
    4b98:	462b      	movge	r3, r5
    4b9a:	4622      	mov	r2, r4
    4b9c:	3102      	adds	r1, #2
    4b9e:	9801      	ldr	r0, [sp, #4]
    4ba0:	f7ff fea0 	bl	48e4 <flash_area_read>
    if (rc != 0) {
    4ba4:	4603      	mov	r3, r0
    4ba6:	2800      	cmp	r0, #0
    4ba8:	d0ea      	beq.n	4b80 <mfg_read_tlv_body+0x14>
        return SYS_EIO;
    4baa:	f06f 0304 	mvn.w	r3, #4
    4bae:	e7e7      	b.n	4b80 <mfg_read_tlv_body+0x14>

00004bb0 <mfg_seek_next>:
{
    4bb0:	b510      	push	{r4, lr}
    4bb2:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
    4bb4:	4620      	mov	r0, r4
    4bb6:	f7ff ff0f 	bl	49d8 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
    4bba:	f110 0f06 	cmn.w	r0, #6
    4bbe:	d0f9      	beq.n	4bb4 <mfg_seek_next+0x4>
}
    4bc0:	bd10      	pop	{r4, pc}

00004bc2 <mfg_seek_next_with_type>:
{
    4bc2:	b538      	push	{r3, r4, r5, lr}
    4bc4:	4604      	mov	r4, r0
    4bc6:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
    4bc8:	4620      	mov	r0, r4
    4bca:	f7ff fff1 	bl	4bb0 <mfg_seek_next>
        if (rc != 0) {
    4bce:	4602      	mov	r2, r0
    4bd0:	b910      	cbnz	r0, 4bd8 <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
    4bd2:	7823      	ldrb	r3, [r4, #0]
    4bd4:	42ab      	cmp	r3, r5
    4bd6:	d1f7      	bne.n	4bc8 <mfg_seek_next_with_type+0x6>
}
    4bd8:	4610      	mov	r0, r2
    4bda:	bd38      	pop	{r3, r4, r5, pc}

00004bdc <mfg_read_tlv_flash_area>:
{
    4bdc:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
    4bde:	220a      	movs	r2, #10
    4be0:	f7ff ffc4 	bl	4b6c <mfg_read_tlv_body>
}
    4be4:	bd08      	pop	{r3, pc}

00004be6 <mfg_read_tlv_mmr_ref>:
{
    4be6:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
    4be8:	2201      	movs	r2, #1
    4bea:	f7ff ffbf 	bl	4b6c <mfg_read_tlv_body>
}
    4bee:	bd08      	pop	{r3, pc}

00004bf0 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
    4bf0:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
    4bf2:	4b07      	ldr	r3, [pc, #28]	; (4c10 <mfg_init+0x20>)
    4bf4:	781b      	ldrb	r3, [r3, #0]
    4bf6:	b103      	cbz	r3, 4bfa <mfg_init+0xa>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
    4bf8:	bd08      	pop	{r3, pc}
    mfg_initialized = true;
    4bfa:	4b05      	ldr	r3, [pc, #20]	; (4c10 <mfg_init+0x20>)
    4bfc:	2201      	movs	r2, #1
    4bfe:	701a      	strb	r2, [r3, #0]
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
    4c00:	2000      	movs	r0, #0
    4c02:	f7ff ff6b 	bl	4adc <mfg_read_next_mmr>
    if (rc != 0) {
    4c06:	2800      	cmp	r0, #0
    4c08:	d1f6      	bne.n	4bf8 <mfg_init+0x8>
    rc = mfg_read_mmr_refs();
    4c0a:	f000 f80b 	bl	4c24 <mfg_read_mmr_refs>
err:
    4c0e:	e7f3      	b.n	4bf8 <mfg_init+0x8>
    4c10:	2000639c 	.word	0x2000639c

00004c14 <mfg_open>:
{
    4c14:	b510      	push	{r4, lr}
    4c16:	4604      	mov	r4, r0
    mfg_init();
    4c18:	f7ff ffea 	bl	4bf0 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
    4c1c:	2300      	movs	r3, #0
    4c1e:	6023      	str	r3, [r4, #0]
    4c20:	6063      	str	r3, [r4, #4]
}
    4c22:	bd10      	pop	{r4, pc}

00004c24 <mfg_read_mmr_refs>:
{
    4c24:	b500      	push	{lr}
    4c26:	b085      	sub	sp, #20
    mfg_open(&reader);
    4c28:	a801      	add	r0, sp, #4
    4c2a:	f7ff fff3 	bl	4c14 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
    4c2e:	2104      	movs	r1, #4
    4c30:	eb0d 0001 	add.w	r0, sp, r1
    4c34:	f7ff ffc5 	bl	4bc2 <mfg_seek_next_with_type>
    4c38:	4603      	mov	r3, r0
        switch (rc) {
    4c3a:	f110 0f0f 	cmn.w	r0, #15
    4c3e:	d004      	beq.n	4c4a <mfg_read_mmr_refs+0x26>
    4c40:	b128      	cbz	r0, 4c4e <mfg_read_mmr_refs+0x2a>
}
    4c42:	4618      	mov	r0, r3
    4c44:	b005      	add	sp, #20
    4c46:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
    4c4a:	2300      	movs	r3, #0
    4c4c:	e7f9      	b.n	4c42 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
    4c4e:	a903      	add	r1, sp, #12
    4c50:	a801      	add	r0, sp, #4
    4c52:	f7ff ffc8 	bl	4be6 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
    4c56:	4603      	mov	r3, r0
    4c58:	2800      	cmp	r0, #0
    4c5a:	d1f2      	bne.n	4c42 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
    4c5c:	f89d 000c 	ldrb.w	r0, [sp, #12]
    4c60:	f7ff ff3c 	bl	4adc <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
    4c64:	4603      	mov	r3, r0
    4c66:	2800      	cmp	r0, #0
    4c68:	d0e1      	beq.n	4c2e <mfg_read_mmr_refs+0xa>
    4c6a:	f110 0f0b 	cmn.w	r0, #11
    4c6e:	d0de      	beq.n	4c2e <mfg_read_mmr_refs+0xa>
    4c70:	e7e7      	b.n	4c42 <mfg_read_mmr_refs+0x1e>
	...

00004c74 <__aeabi_uldivmod>:
    4c74:	b953      	cbnz	r3, 4c8c <__aeabi_uldivmod+0x18>
    4c76:	b94a      	cbnz	r2, 4c8c <__aeabi_uldivmod+0x18>
    4c78:	2900      	cmp	r1, #0
    4c7a:	bf08      	it	eq
    4c7c:	2800      	cmpeq	r0, #0
    4c7e:	bf1c      	itt	ne
    4c80:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    4c84:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    4c88:	f000 b972 	b.w	4f70 <__aeabi_idiv0>
    4c8c:	f1ad 0c08 	sub.w	ip, sp, #8
    4c90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    4c94:	f000 f806 	bl	4ca4 <__udivmoddi4>
    4c98:	f8dd e004 	ldr.w	lr, [sp, #4]
    4c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4ca0:	b004      	add	sp, #16
    4ca2:	4770      	bx	lr

00004ca4 <__udivmoddi4>:
    4ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ca8:	9e08      	ldr	r6, [sp, #32]
    4caa:	4604      	mov	r4, r0
    4cac:	4688      	mov	r8, r1
    4cae:	2b00      	cmp	r3, #0
    4cb0:	d14b      	bne.n	4d4a <__udivmoddi4+0xa6>
    4cb2:	428a      	cmp	r2, r1
    4cb4:	4615      	mov	r5, r2
    4cb6:	d967      	bls.n	4d88 <__udivmoddi4+0xe4>
    4cb8:	fab2 f282 	clz	r2, r2
    4cbc:	b14a      	cbz	r2, 4cd2 <__udivmoddi4+0x2e>
    4cbe:	f1c2 0720 	rsb	r7, r2, #32
    4cc2:	fa01 f302 	lsl.w	r3, r1, r2
    4cc6:	fa20 f707 	lsr.w	r7, r0, r7
    4cca:	4095      	lsls	r5, r2
    4ccc:	ea47 0803 	orr.w	r8, r7, r3
    4cd0:	4094      	lsls	r4, r2
    4cd2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    4cd6:	0c23      	lsrs	r3, r4, #16
    4cd8:	fbb8 f7fe 	udiv	r7, r8, lr
    4cdc:	fa1f fc85 	uxth.w	ip, r5
    4ce0:	fb0e 8817 	mls	r8, lr, r7, r8
    4ce4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    4ce8:	fb07 f10c 	mul.w	r1, r7, ip
    4cec:	4299      	cmp	r1, r3
    4cee:	d909      	bls.n	4d04 <__udivmoddi4+0x60>
    4cf0:	18eb      	adds	r3, r5, r3
    4cf2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    4cf6:	f080 811b 	bcs.w	4f30 <__udivmoddi4+0x28c>
    4cfa:	4299      	cmp	r1, r3
    4cfc:	f240 8118 	bls.w	4f30 <__udivmoddi4+0x28c>
    4d00:	3f02      	subs	r7, #2
    4d02:	442b      	add	r3, r5
    4d04:	1a5b      	subs	r3, r3, r1
    4d06:	b2a4      	uxth	r4, r4
    4d08:	fbb3 f0fe 	udiv	r0, r3, lr
    4d0c:	fb0e 3310 	mls	r3, lr, r0, r3
    4d10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    4d14:	fb00 fc0c 	mul.w	ip, r0, ip
    4d18:	45a4      	cmp	ip, r4
    4d1a:	d909      	bls.n	4d30 <__udivmoddi4+0x8c>
    4d1c:	192c      	adds	r4, r5, r4
    4d1e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    4d22:	f080 8107 	bcs.w	4f34 <__udivmoddi4+0x290>
    4d26:	45a4      	cmp	ip, r4
    4d28:	f240 8104 	bls.w	4f34 <__udivmoddi4+0x290>
    4d2c:	3802      	subs	r0, #2
    4d2e:	442c      	add	r4, r5
    4d30:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    4d34:	eba4 040c 	sub.w	r4, r4, ip
    4d38:	2700      	movs	r7, #0
    4d3a:	b11e      	cbz	r6, 4d44 <__udivmoddi4+0xa0>
    4d3c:	40d4      	lsrs	r4, r2
    4d3e:	2300      	movs	r3, #0
    4d40:	e9c6 4300 	strd	r4, r3, [r6]
    4d44:	4639      	mov	r1, r7
    4d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4d4a:	428b      	cmp	r3, r1
    4d4c:	d909      	bls.n	4d62 <__udivmoddi4+0xbe>
    4d4e:	2e00      	cmp	r6, #0
    4d50:	f000 80eb 	beq.w	4f2a <__udivmoddi4+0x286>
    4d54:	2700      	movs	r7, #0
    4d56:	e9c6 0100 	strd	r0, r1, [r6]
    4d5a:	4638      	mov	r0, r7
    4d5c:	4639      	mov	r1, r7
    4d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4d62:	fab3 f783 	clz	r7, r3
    4d66:	2f00      	cmp	r7, #0
    4d68:	d147      	bne.n	4dfa <__udivmoddi4+0x156>
    4d6a:	428b      	cmp	r3, r1
    4d6c:	d302      	bcc.n	4d74 <__udivmoddi4+0xd0>
    4d6e:	4282      	cmp	r2, r0
    4d70:	f200 80fa 	bhi.w	4f68 <__udivmoddi4+0x2c4>
    4d74:	1a84      	subs	r4, r0, r2
    4d76:	eb61 0303 	sbc.w	r3, r1, r3
    4d7a:	2001      	movs	r0, #1
    4d7c:	4698      	mov	r8, r3
    4d7e:	2e00      	cmp	r6, #0
    4d80:	d0e0      	beq.n	4d44 <__udivmoddi4+0xa0>
    4d82:	e9c6 4800 	strd	r4, r8, [r6]
    4d86:	e7dd      	b.n	4d44 <__udivmoddi4+0xa0>
    4d88:	b902      	cbnz	r2, 4d8c <__udivmoddi4+0xe8>
    4d8a:	deff      	udf	#255	; 0xff
    4d8c:	fab2 f282 	clz	r2, r2
    4d90:	2a00      	cmp	r2, #0
    4d92:	f040 808f 	bne.w	4eb4 <__udivmoddi4+0x210>
    4d96:	1b49      	subs	r1, r1, r5
    4d98:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    4d9c:	fa1f f885 	uxth.w	r8, r5
    4da0:	2701      	movs	r7, #1
    4da2:	fbb1 fcfe 	udiv	ip, r1, lr
    4da6:	0c23      	lsrs	r3, r4, #16
    4da8:	fb0e 111c 	mls	r1, lr, ip, r1
    4dac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    4db0:	fb08 f10c 	mul.w	r1, r8, ip
    4db4:	4299      	cmp	r1, r3
    4db6:	d907      	bls.n	4dc8 <__udivmoddi4+0x124>
    4db8:	18eb      	adds	r3, r5, r3
    4dba:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    4dbe:	d202      	bcs.n	4dc6 <__udivmoddi4+0x122>
    4dc0:	4299      	cmp	r1, r3
    4dc2:	f200 80cd 	bhi.w	4f60 <__udivmoddi4+0x2bc>
    4dc6:	4684      	mov	ip, r0
    4dc8:	1a59      	subs	r1, r3, r1
    4dca:	b2a3      	uxth	r3, r4
    4dcc:	fbb1 f0fe 	udiv	r0, r1, lr
    4dd0:	fb0e 1410 	mls	r4, lr, r0, r1
    4dd4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    4dd8:	fb08 f800 	mul.w	r8, r8, r0
    4ddc:	45a0      	cmp	r8, r4
    4dde:	d907      	bls.n	4df0 <__udivmoddi4+0x14c>
    4de0:	192c      	adds	r4, r5, r4
    4de2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    4de6:	d202      	bcs.n	4dee <__udivmoddi4+0x14a>
    4de8:	45a0      	cmp	r8, r4
    4dea:	f200 80b6 	bhi.w	4f5a <__udivmoddi4+0x2b6>
    4dee:	4618      	mov	r0, r3
    4df0:	eba4 0408 	sub.w	r4, r4, r8
    4df4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    4df8:	e79f      	b.n	4d3a <__udivmoddi4+0x96>
    4dfa:	f1c7 0c20 	rsb	ip, r7, #32
    4dfe:	40bb      	lsls	r3, r7
    4e00:	fa22 fe0c 	lsr.w	lr, r2, ip
    4e04:	ea4e 0e03 	orr.w	lr, lr, r3
    4e08:	fa01 f407 	lsl.w	r4, r1, r7
    4e0c:	fa20 f50c 	lsr.w	r5, r0, ip
    4e10:	fa21 f30c 	lsr.w	r3, r1, ip
    4e14:	ea4f 481e 	mov.w	r8, lr, lsr #16
    4e18:	4325      	orrs	r5, r4
    4e1a:	fbb3 f9f8 	udiv	r9, r3, r8
    4e1e:	0c2c      	lsrs	r4, r5, #16
    4e20:	fb08 3319 	mls	r3, r8, r9, r3
    4e24:	fa1f fa8e 	uxth.w	sl, lr
    4e28:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    4e2c:	fb09 f40a 	mul.w	r4, r9, sl
    4e30:	429c      	cmp	r4, r3
    4e32:	fa02 f207 	lsl.w	r2, r2, r7
    4e36:	fa00 f107 	lsl.w	r1, r0, r7
    4e3a:	d90b      	bls.n	4e54 <__udivmoddi4+0x1b0>
    4e3c:	eb1e 0303 	adds.w	r3, lr, r3
    4e40:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    4e44:	f080 8087 	bcs.w	4f56 <__udivmoddi4+0x2b2>
    4e48:	429c      	cmp	r4, r3
    4e4a:	f240 8084 	bls.w	4f56 <__udivmoddi4+0x2b2>
    4e4e:	f1a9 0902 	sub.w	r9, r9, #2
    4e52:	4473      	add	r3, lr
    4e54:	1b1b      	subs	r3, r3, r4
    4e56:	b2ad      	uxth	r5, r5
    4e58:	fbb3 f0f8 	udiv	r0, r3, r8
    4e5c:	fb08 3310 	mls	r3, r8, r0, r3
    4e60:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
    4e64:	fb00 fa0a 	mul.w	sl, r0, sl
    4e68:	45a2      	cmp	sl, r4
    4e6a:	d908      	bls.n	4e7e <__udivmoddi4+0x1da>
    4e6c:	eb1e 0404 	adds.w	r4, lr, r4
    4e70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    4e74:	d26b      	bcs.n	4f4e <__udivmoddi4+0x2aa>
    4e76:	45a2      	cmp	sl, r4
    4e78:	d969      	bls.n	4f4e <__udivmoddi4+0x2aa>
    4e7a:	3802      	subs	r0, #2
    4e7c:	4474      	add	r4, lr
    4e7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    4e82:	fba0 8902 	umull	r8, r9, r0, r2
    4e86:	eba4 040a 	sub.w	r4, r4, sl
    4e8a:	454c      	cmp	r4, r9
    4e8c:	46c2      	mov	sl, r8
    4e8e:	464b      	mov	r3, r9
    4e90:	d354      	bcc.n	4f3c <__udivmoddi4+0x298>
    4e92:	d051      	beq.n	4f38 <__udivmoddi4+0x294>
    4e94:	2e00      	cmp	r6, #0
    4e96:	d069      	beq.n	4f6c <__udivmoddi4+0x2c8>
    4e98:	ebb1 050a 	subs.w	r5, r1, sl
    4e9c:	eb64 0403 	sbc.w	r4, r4, r3
    4ea0:	fa04 fc0c 	lsl.w	ip, r4, ip
    4ea4:	40fd      	lsrs	r5, r7
    4ea6:	40fc      	lsrs	r4, r7
    4ea8:	ea4c 0505 	orr.w	r5, ip, r5
    4eac:	e9c6 5400 	strd	r5, r4, [r6]
    4eb0:	2700      	movs	r7, #0
    4eb2:	e747      	b.n	4d44 <__udivmoddi4+0xa0>
    4eb4:	f1c2 0320 	rsb	r3, r2, #32
    4eb8:	fa20 f703 	lsr.w	r7, r0, r3
    4ebc:	4095      	lsls	r5, r2
    4ebe:	fa01 f002 	lsl.w	r0, r1, r2
    4ec2:	fa21 f303 	lsr.w	r3, r1, r3
    4ec6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    4eca:	4338      	orrs	r0, r7
    4ecc:	0c01      	lsrs	r1, r0, #16
    4ece:	fbb3 f7fe 	udiv	r7, r3, lr
    4ed2:	fa1f f885 	uxth.w	r8, r5
    4ed6:	fb0e 3317 	mls	r3, lr, r7, r3
    4eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    4ede:	fb07 f308 	mul.w	r3, r7, r8
    4ee2:	428b      	cmp	r3, r1
    4ee4:	fa04 f402 	lsl.w	r4, r4, r2
    4ee8:	d907      	bls.n	4efa <__udivmoddi4+0x256>
    4eea:	1869      	adds	r1, r5, r1
    4eec:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    4ef0:	d22f      	bcs.n	4f52 <__udivmoddi4+0x2ae>
    4ef2:	428b      	cmp	r3, r1
    4ef4:	d92d      	bls.n	4f52 <__udivmoddi4+0x2ae>
    4ef6:	3f02      	subs	r7, #2
    4ef8:	4429      	add	r1, r5
    4efa:	1acb      	subs	r3, r1, r3
    4efc:	b281      	uxth	r1, r0
    4efe:	fbb3 f0fe 	udiv	r0, r3, lr
    4f02:	fb0e 3310 	mls	r3, lr, r0, r3
    4f06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    4f0a:	fb00 f308 	mul.w	r3, r0, r8
    4f0e:	428b      	cmp	r3, r1
    4f10:	d907      	bls.n	4f22 <__udivmoddi4+0x27e>
    4f12:	1869      	adds	r1, r5, r1
    4f14:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    4f18:	d217      	bcs.n	4f4a <__udivmoddi4+0x2a6>
    4f1a:	428b      	cmp	r3, r1
    4f1c:	d915      	bls.n	4f4a <__udivmoddi4+0x2a6>
    4f1e:	3802      	subs	r0, #2
    4f20:	4429      	add	r1, r5
    4f22:	1ac9      	subs	r1, r1, r3
    4f24:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    4f28:	e73b      	b.n	4da2 <__udivmoddi4+0xfe>
    4f2a:	4637      	mov	r7, r6
    4f2c:	4630      	mov	r0, r6
    4f2e:	e709      	b.n	4d44 <__udivmoddi4+0xa0>
    4f30:	4607      	mov	r7, r0
    4f32:	e6e7      	b.n	4d04 <__udivmoddi4+0x60>
    4f34:	4618      	mov	r0, r3
    4f36:	e6fb      	b.n	4d30 <__udivmoddi4+0x8c>
    4f38:	4541      	cmp	r1, r8
    4f3a:	d2ab      	bcs.n	4e94 <__udivmoddi4+0x1f0>
    4f3c:	ebb8 0a02 	subs.w	sl, r8, r2
    4f40:	eb69 020e 	sbc.w	r2, r9, lr
    4f44:	3801      	subs	r0, #1
    4f46:	4613      	mov	r3, r2
    4f48:	e7a4      	b.n	4e94 <__udivmoddi4+0x1f0>
    4f4a:	4660      	mov	r0, ip
    4f4c:	e7e9      	b.n	4f22 <__udivmoddi4+0x27e>
    4f4e:	4618      	mov	r0, r3
    4f50:	e795      	b.n	4e7e <__udivmoddi4+0x1da>
    4f52:	4667      	mov	r7, ip
    4f54:	e7d1      	b.n	4efa <__udivmoddi4+0x256>
    4f56:	4681      	mov	r9, r0
    4f58:	e77c      	b.n	4e54 <__udivmoddi4+0x1b0>
    4f5a:	3802      	subs	r0, #2
    4f5c:	442c      	add	r4, r5
    4f5e:	e747      	b.n	4df0 <__udivmoddi4+0x14c>
    4f60:	f1ac 0c02 	sub.w	ip, ip, #2
    4f64:	442b      	add	r3, r5
    4f66:	e72f      	b.n	4dc8 <__udivmoddi4+0x124>
    4f68:	4638      	mov	r0, r7
    4f6a:	e708      	b.n	4d7e <__udivmoddi4+0xda>
    4f6c:	4637      	mov	r7, r6
    4f6e:	e6e9      	b.n	4d44 <__udivmoddi4+0xa0>

00004f70 <__aeabi_idiv0>:
    4f70:	4770      	bx	lr
    4f72:	bf00      	nop

00004f74 <flash_devs>:
    4f74:	4fc8 0000 00e8 2000                         .O..... 

00004f7c <spiflash_characteristics>:
    4f7c:	7530 0000 1a80 0006 d4c0 0001 3500 000c     0u...........5..
    4f8c:	49f0 0002 4240 000f c6c0 002d 9680 0098     .I..@B....-.....
    4f9c:	02bc 0000 0bb8 0000 0014 0000 0032 0000     ............2...

00004fac <spiflash_flash_funcs>:
    4fac:	07f7 0000 0881 0000 09fb 0000 06ad 0000     ................
    4fbc:	0000 0000 0b39 0000 0acd 0000               ....9.......

00004fc8 <nrf52k_flash_dev>:
    4fc8:	4fe0 0000 0000 0000 0000 0008 0080 0000     .O..............
    4fd8:	0001 0000 00ff 0000                         ........

00004fe0 <nrf52k_flash_funcs>:
    4fe0:	0ced 0000 0c1d 0000 0ba5 0000 0bfd 0000     ................
    4ff0:	0000 0000 0bf9 0000 0000 0000               ............

00004ffc <nrf52_hal_spis>:
    4ffc:	63bc 2000 0000 0000 0000 0000               .c. ........

00005008 <os_bsp_spi0m_cfg>:
    5008:	0302 0004                                   ....

0000500c <nrf52_hal_timers>:
    500c:	63e4 2000 0000 0000 0000 0000 0000 0000     .c. ............
	...
    5024:	7341 6573 7472 4020 3020 2578 0a78 0000     Assert @ 0x%x...
    5034:	7341 6573 7472 4020 3020 2578 2078 202d     Assert @ 0x%x - 
    5044:	7325 253a 0a64 0000 6e55 6168 646e 656c     %s:%d...Unhandle
    5054:	2064 6e69 6574 7272 7075 2074 2528 646c     d interrupt (%ld
    5064:	2c29 6520 6378 7065 6974 6e6f 7320 2070     ), exception sp 
    5074:	7830 3025 6c38 0a78 0000 0000 7220 3a30     0x%08lx..... r0:
    5084:	7830 3025 6c38 2078 7220 3a31 7830 3025     0x%08lx  r1:0x%0
    5094:	6c38 2078 7220 3a32 7830 3025 6c38 2078     8lx  r2:0x%08lx 
    50a4:	7220 3a33 7830 3025 6c38 0a78 0000 0000      r3:0x%08lx.....
    50b4:	7220 3a34 7830 3025 6c38 2078 7220 3a35      r4:0x%08lx  r5:
    50c4:	7830 3025 6c38 2078 7220 3a36 7830 3025     0x%08lx  r6:0x%0
    50d4:	6c38 2078 7220 3a37 7830 3025 6c38 0a78     8lx  r7:0x%08lx.
    50e4:	0000 0000 7220 3a38 7830 3025 6c38 2078     .... r8:0x%08lx 
    50f4:	7220 3a39 7830 3025 6c38 2078 3172 3a30      r9:0x%08lx r10:
    5104:	7830 3025 6c38 2078 3172 3a31 7830 3025     0x%08lx r11:0x%0
    5114:	6c38 0a78 0000 0000 3172 3a32 7830 3025     8lx.....r12:0x%0
    5124:	6c38 2078 6c20 3a72 7830 3025 6c38 2078     8lx  lr:0x%08lx 
    5134:	7020 3a63 7830 3025 6c38 2078 7370 3a72      pc:0x%08lx psr:
    5144:	7830 3025 6c38 0a78 0000 0000 4349 5253     0x%08lx.....ICSR
    5154:	303a 2578 3830 786c 4820 5346 3a52 7830     :0x%08lx HFSR:0x
    5164:	3025 6c38 2078 4643 5253 303a 2578 3830     %08lx CFSR:0x%08
    5174:	786c 000a 4642 5241 303a 2578 3830 786c     lx..BFAR:0x%08lx
    5184:	4d20 464d 5241 303a 2578 3830 786c 000a      MMFAR:0x%08lx..
    5194:	736d 7379 315f 0000 6f42 746f 6f6c 6461     msys_1..Bootload
    51a4:	7265 6420 6e6f 0a65 0000 0000 7453 7261     er done.....Star
    51b4:	6974 676e 4220 6f6f 6c74 616f 6564 2e72     ting Bootloader.
    51c4:	2e2e 000a 6843 6365 206b 7562 7474 6e6f     ....Check button
    51d4:	203a 6425 000a 0000 6157 7469 6e69 2067     : %d....Waiting 
    51e4:	2035 6573 6f63 646e 2073 6f66 2072 7562     5 seconds for bu
    51f4:	7474 6e6f 2e2e 0a2e 0000 0000 6c46 7361     tton........Flas
    5204:	6968 676e 6120 646e 7220 7365 7465 6974     hing and resetti
    5214:	676e 2e2e 0a2e 0000                         ng......

0000521c <COLMOD_PARA.7864>:
    521c:	0005 0000                                   ....

00005220 <FRMCTR1_PARA.7852>:
    5220:	2c01 002d                                   .,-.

00005224 <FRMCTR2_PARA.7853>:
    5224:	2c01 002d                                   .,-.

00005228 <FRMCTR3_PARA.7854>:
    5228:	2c01 012d 2d2c 0000                         .,-.,-..

00005230 <INVCTR_PARA.7855>:
    5230:	0007 0000                                   ....

00005234 <MADCTL1_PARA.7862>:
    5234:	0000 0000                                   ....

00005238 <PWCTR1_PARA.7856>:
    5238:	02a2 0084                                   ....

0000523c <PWCTR2_PARA.7857>:
    523c:	00c5 0000                                   ....

00005240 <PWCTR3_PARA.7858>:
    5240:	000a 0000                                   ....

00005244 <PWCTR4_PARA.7859>:
    5244:	2a8a 0000                                   .*..

00005248 <PWCTR5_PARA.7860>:
    5248:	ee8a 0000                                   ....

0000524c <VMCTR1_PARA.7861>:
    524c:	000e 0000 6944 7073 616c 6979 676e 6920     ....Displaying i
    525c:	616d 6567 2e2e 0a2e 0000 0000 6d49 6761     mage........Imag
    526c:	2065 6964 7073 616c 6579 0a64 0000 0000     e displayed.....
    527c:	3025 6c36 2075 0000 0103 0000               %06lu ......

00005288 <boot_img_magic>:
    5288:	c277 f395 d260 7fef 5235 0f50 b62c 8079     w...`...5RP.,.y.

00005298 <boot_swap_tables>:
    5298:	0104 0304 0204 0104 0104 0304 0301 0403     ................
    52a8:	0401 0000 6570 6d72 0000 0000 6574 7473     ....perm....test
    52b8:	0000 0000 5542 3b47 6320 6e61 7427 6820     ....BUG; can't h
    52c8:	7061 6570 006e 0000 6572 6576 7472 0000     appen...revert..
    52d8:	495b 464e 205d 7753 7061 7420 7079 3a65     [INF] Swap type:
    52e8:	2520 0a73 0000 0000 495b 464e 205d 7753      %s.....[INF] Sw
    52f8:	7061 7420 7079 3a65 6e20 6e6f 0065 0000     ap type: none...
    5308:	455b 5252 205d 6170 696e 2163 0000 0000     [ERR] panic!....
    5318:	575b 4e52 205d 6146 6c69 6465 7220 6165     [WRN] Failed rea
    5328:	6964 676e 7320 6365 6f74 7372 203b 4f42     ding sectors; BO
    5338:	544f 4d5f 5841 495f 474d 535f 4345 4f54     OT_MAX_IMG_SECTO
    5348:	5352 253d 2064 202d 6f74 206f 6d73 6c61     RS=%d - too smal
    5358:	3f6c 000a 575b 4e52 205d 6146 6c69 6465     l?..[WRN] Failed
    5368:	7220 6165 6964 676e 6920 616d 6567 6820      reading image h
    5378:	6165 6564 7372 203b 6d49 6761 3d65 7525     eaders; Image=%u
    5388:	000a 0000 575b 4e52 205d 6146 6c69 6465     ....[WRN] Failed
    5398:	7220 6165 6964 676e 6220 6f6f 2074 7473      reading boot st
    53a8:	7461 7375 203b 6d49 6761 3d65 7525 000a     atus; Image=%u..
    53b8:	7270 6d69 7261 0079 6573 6f63 646e 7261     primary.secondar
    53c8:	0079 0000 455b 5252 205d 6d49 6761 2065     y...[ERR] Image 
    53d8:	6e69 7420 6568 2520 2073 6c73 746f 6920     in the %s slot i
    53e8:	2073 6f6e 2074 6176 696c 2164 000a 0000     s not valid!....
    53f8:	455b 5252 205d 6162 2064 6d69 6761 2065     [ERR] bad image 
    5408:	616d 6967 2063 7830 6c25 3b78 4920 616d     magic 0x%lx; Ima
    5418:	6567 253d 0a75 0000 575b 4e52 205d 6143     ge=%u...[WRN] Ca
    5428:	6e6e 746f 7520 6770 6172 6564 203a 6f6d     nnot upgrade: mo
    5438:	6572 7320 6365 6f74 7372 7420 6168 206e     re sectors than 
    5448:	6c61 6f6c 6577 0064 575b 4e52 205d 6143     allowed.[WRN] Ca
    5458:	6e6e 746f 7520 6770 6172 6564 203a 6c73     nnot upgrade: sl
    5468:	746f 2073 6168 6576 6e20 6e6f 632d 6d6f     ots have non-com
    5478:	6170 6974 6c62 2065 6573 7463 726f 0073     patible sectors.
    5488:	575b 4e52 205d 6143 6e6e 746f 7520 6770     [WRN] Cannot upg
    5498:	6172 6564 203a 6f6e 2074 6c61 206c 6573     rade: not all se
    54a8:	7463 726f 2073 6966 2074 6e69 6973 6564     ctors fit inside
    54b8:	7320 7263 7461 6863 0000 0000 575b 4e52      scratch....[WRN
    54c8:	205d 6143 6e6e 746f 7520 6770 6172 6564     ] Cannot upgrade
    54d8:	203a 6c73 746f 2073 7261 2065 6f6e 2074     : slots are not 
    54e8:	6f63 706d 7461 6269 656c 0000               compatible..

000054f4 <boot_status_tables>:
    54f4:	0501 0001 0501 0203 0104 0104 0403 0203     ................
    5504:	455b 5252 205d 6544 6574 7463 6465 6920     [ERR] Detected i
    5514:	636e 6e6f 6973 7473 6e65 2074 7473 7461     nconsistent stat
    5524:	7375 0021 6162 0064 6f67 646f 0000 0000     us!.bad.good....
    5534:	6e75 6573 0074 0000 6373 6172 6374 0068     unset...scratch.
    5544:	6f6e 656e 0000 0000 7270 6d69 7261 2079     none....primary 
    5554:	6c73 746f 0000 0000 7250 6d69 7261 2079     slot....Primary 
    5564:	6d69 6761 0065 0000 495b 464e 205d 7325     image...[INF] %s
    5574:	203a 616d 6967 3d63 7325 202c 7773 7061     : magic=%s, swap
    5584:	745f 7079 3d65 7830 7825 202c 6f63 7970     _type=0x%x, copy
    5594:	645f 6e6f 3d65 7830 7825 202c 6d69 6761     _done=0x%x, imag
    55a4:	5f65 6b6f 303d 2578 0a78 0000 6353 6172     e_ok=0x%x...Scra
    55b4:	6374 0068 495b 464e 205d 6f42 746f 7320     tch.[INF] Boot s
    55c4:	756f 6372 3a65 2520 0a73 0000 495b 464e     ource: %s...[INF
    55d4:	205d 6f42 746f 7320 756f 6372 3a65 6e20     ] Boot source: n
    55e4:	6e6f 0065                                   one.

000055e8 <K>:
    55e8:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
    55f8:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
    5608:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
    5618:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
    5628:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
    5638:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
    5648:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
    5658:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
    5668:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
    5678:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
    5688:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
    5698:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
    56a8:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
    56b8:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
    56c8:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
    56d8:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.

000056e8 <stdout>:
    56e8:	0150 2000                                   P.. 

000056ec <sysflash_map_dflt>:
	...
    56f4:	6000 0000 0001 0000 8000 0000 4000 0007     .`...........@..
    5704:	0102 0000 0000 0004 4000 0007 0003 0000     .........@......
    5714:	c000 0007 1000 0000 0010 0000 6000 0000     .............`..
    5724:	2000 0000 0111 0000 4000 000b c000 0034     . .......@....4.

/Users/Luppy/PineTime/master-pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  22348	    132	  25504	  47984	   bb70	/Users/Luppy/PineTime/master-pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf
