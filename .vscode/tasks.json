{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
        {
            //  Build the Bootloader.
            "label": "1Ô∏è‚É£ Build Bootloader",
            "type": "shell",
            "windows": {
                "command": "cmd",
                "args": [
                    "/c",
                    " scripts\\nrf52\\build-boot.cmd && echo ‚úÖ ‚óæ Ô∏èDone! "
                ]
            },
            "osx": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " scripts/nrf52/build-boot.sh && echo ‚úÖ ‚óæ Ô∏èDone! "
                ],
            },
            "linux": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " scripts/nrf52/build-boot.sh && echo ‚úÖ ‚óæ Ô∏èDone! "
                ],
            },
            "presentation": {
                "clear": true
            }
        },
        {
            //  Build the Application.
            "label": "2Ô∏è‚É£ Build Application",
            "type": "shell",
            "windows": {
                "command": "cmd",
                "args": [
                    "/c",
                    " scripts\\build-app.cmd && echo ‚úÖ ‚óæ Ô∏èDone! "
                ]
            },
            "osx": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " scripts/build-app.sh && cp .vscode/launch-nrf52.json .vscode/launch.json && echo ‚úÖ ‚óæ Ô∏èDone! "
                ],
            },
            "linux": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " scripts/build-app.sh && echo ‚úÖ ‚óæ Ô∏èDone! "
                ],
            },
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": [ 
                {
                    //  Problem matcher for GNU Linker, e.g. /Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/apps/my_sensor_app/src/ATParser.h:82: undefined reference to `operator delete[](void*)'
                    "fileLocation": [ "absolute" ],
                    "pattern": {
                        "regexp": "^(/.*):(\\d+):\\s+(.*)$",
                        "file": 1,
                        "line": 2,
                        "message": 3,
                        // "code": 3,
                        // "severity": 4,
                    }                    
                }
            ],
            "presentation": {
                "clear": true
            }
        },
        {
            //  Create the Application ROM Image.
            "label": "3Ô∏è‚É£ Image Application",
            "type": "shell",
            "windows": {
                "command": "cmd",
                "args": [
                    "/c",
                    " scripts\\nrf52\\image-app.cmd && echo ‚úÖ ‚óæ Ô∏èDone! "
                ]
            },
            "osx": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " scripts/nrf52/image-app.sh && echo ‚úÖ ‚óæ Ô∏èDone! "
                ],
            },
            "linux": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " scripts/nrf52/image-app.sh && echo ‚úÖ ‚óæ Ô∏èDone! "
                ],
            },
            "problemMatcher": [],
            "presentation": {
                "clear": true
            }
        },
        {
            //  Flash the Bootloader.  We use custom scripts instead of "newt load" because "newt" runs in Ubuntu while the ST Link driver runs under Windows.
            "label": "4Ô∏è‚É£ Flash Bootloader",
            "type": "shell",
            "windows": {
                "command": "cmd",
                "args": [
                    "/c",
                    " scripts\\nrf52\\flash-boot.cmd && echo ‚úÖ ‚óæ Ô∏èDone! "
                ]
            },
            "osx": {
                // Previously: " newt load -v bluepill_boot && echo '**** Done!' "
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " scripts/nrf52/flash-boot.sh && echo ‚úÖ ‚óæ Ô∏èDone! "
                ],
            },
            "linux": {
                // Previously: " newt load -v bluepill_boot && echo '**** Done!' "
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " scripts/nrf52/flash-boot.sh && echo ‚úÖ ‚óæ Ô∏èDone! "
                ],
            },
            "problemMatcher": [],
            "presentation": {
                "clear": true
            }
        },
        {
            //  Flash the Application.  We use custom scripts instead of "newt load" because "newt" runs in Ubuntu while the ST Link driver runs under Windows.
            "label": "5Ô∏è‚É£ Flash Application",
            "type": "shell",
            "windows": {
                "command": "cmd",
                "args": [
                    "/c",
                    " scripts\\nrf52\\flash-app.cmd && echo ‚úÖ ‚óæ Ô∏èDone! "
                ]
            },
            "osx": {
                // Previously: " newt load -v bluepill_my_sensor && echo '**** Done!' "
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " scripts/nrf52/flash-app.sh && echo ‚úÖ ‚óæ Ô∏èDone! "
                ],
            },
            "linux": {
                // Previously: " newt load -v bluepill_my_sensor && echo '**** Done!' "
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " scripts/nrf52/flash-app.sh && echo ‚úÖ ‚óæ Ô∏èDone! "
                ],
            },
            "problemMatcher": [],
            "presentation": {
                "clear": true
            }
        },
        {
            //  Erase the Flash ROM
            "label": "‚ö°Ô∏è Erase Flash",
            "type": "shell",
            "windows": {
                "command": "cmd",
                "args": [
                    "/c",
                    " scripts\\nrf52\\flash-erase.cmd && echo ‚úÖ ‚óæ Ô∏èDone! "
                ]
            },
            "osx": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " scripts/nrf52/flash-erase.sh && echo ‚úÖ ‚óæ Ô∏èDone! "
                ],
            },
            "linux": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " scripts/nrf52/flash-erase.sh && echo ‚úÖ ‚óæ Ô∏èDone! "
                ],
            },
            "problemMatcher": [],
            "presentation": {
                "clear": true
            }
        },
        {
            //  Generate Rust bindings for C libraries.
            "label": "‚õì Generate Rust Bindings",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c", "-l",
                " set -e -x ; ./scripts/gen-bindings.sh ; ./scripts/gen-bindings-lvgl.sh ; echo ‚úÖ ‚óæ Ô∏èDone! "
            ],
            "problemMatcher": [],
            "presentation": {
                "clear": true
            }
        },
        {
            //  Build Rust library with macros expanded, output to logs/libmylib-expanded.rs.
            "label": "üëì Expand Rust Macros",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c", "-l",
                " set -e -x ; ./scripts/build-rustlib.sh ; echo ‚úÖ ‚óæ Ô∏èDone! "
            ],
            "problemMatcher": [],
            "presentation": {
                "clear": true
            }
        },
        {
            //  Generate documentation.
            "label": "üìñ Generate Doc",
            "type": "shell",
            "windows": {
                "command": "cmd",
                "args": [
                    "/c",
                    " cargo doc --document-private-items && echo ‚úÖ ‚óæ Ô∏èDone! target/thumbv7m-none-eabi/doc "
                ]
            },
            "osx": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " article=handdrawn ; set -e -x ; cat scripts/articles/$article-header.html scripts/rustdoc-header.html >article-rustdoc-header.html ; rustdoc --output docs/articles --html-in-header article-rustdoc-header.html --html-before-content scripts/rustdoc-before.html rust/app/src/$article.md ; cargo doc --document-private-items ; echo ‚úÖ ‚óæ Ô∏èDone! target/thumbv7m-none-eabi/doc "
                ]
            },
            "linux": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " set -e -x ; cargo doc --document-private-items ; echo ‚úÖ ‚óæ Ô∏èDone! target/thumbv7m-none-eabi/doc "
                ]
            },
            "problemMatcher": [],
            "presentation": {
                "clear": true
            }
        },
        {
            //  Remove all compiled files.
            "label": "üóë Clean",
            "type": "shell",
            "windows": {
                "command": "cmd",
                "args": [
                    "/c",
                    " newt\\newt.exe clean -v all && rd /q /s target && echo ‚úÖ ‚óæ Ô∏èDone!"
                ]
            },
            "osx": {
                // Previously: " newt load -v bluepill_my_sensor && echo '**** Done!' "
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " newt clean -v all && rm -r target ; echo ‚úÖ ‚óæ Ô∏èDone! "
                ],
            },
            "linux": {
                // Previously: " newt load -v bluepill_my_sensor && echo '**** Done!' "
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " newt clean -v all && rm -r target ; echo ‚úÖ ‚óæ Ô∏èDone! "
                ],
            },
            "problemMatcher": [],
            "presentation": {
                "clear": true
            }
        },
        {
            //  Install Mynewt source, build tools, sample.
            "label": "Install Mynewt",
            "type": "shell",
            "windows": {
                "command": "cmd",
                "args": [
                    "/c",
                    " echo Done! Please restart Visual Studio Code to activate the extensions"
                ]
            },
            "osx": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " scripts/install-mac.sh "
                ]
            },
            "linux": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " scripts/install-linux.sh "
                ]
            },
            "problemMatcher": [],
            "presentation": {
                "clear": true
            }
        },
        {
            //  Prompt the user to restart.
            "label": "Prompt Restart",
            "type": "shell",
            "windows": {
                "command": "cmd",
                "args": [
                    "/c",
                    " echo Done! Please restart Visual Studio Code to activate the extensions "
                ]
            },
            "osx": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " echo Done! Please restart Visual Studio Code to activate the extensions "
                ]
            },
            "linux": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " echo Done! Please restart Visual Studio Code to activate the extensions "
                ]
            },
            "problemMatcher": [],
            "presentation": {
                "clear": true
            }
        },
        /*  For debug we now use the Cortex Debug Extension.
        {
            "label": "üí£ Debug bluepill_my_sensor",
            "type": "shell",
            "windows": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " newt debug -v bluepill_my_sensor ",
                    //  "-n",
                ]
            },
            "osx": {
                "command": 
                " newt debug -v bluepill_my_sensor "
            },
            "linux": {
                "command": 
                " newt debug -v bluepill_my_sensor "
            },
            "problemMatcher": [
            ]
        },
        */
    ]
}
